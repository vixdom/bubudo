{"ast":null,"code":"import { includeCommonConfiguration } from \"../../configurations.js\";\nimport { Chrono } from \"../../chrono.js\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results.js\";\nimport { Meridiem, Weekday } from \"../../types.js\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser.js\";\nimport ESWeekdayParser from \"./parsers/ESWeekdayParser.js\";\nimport ESTimeExpressionParser from \"./parsers/ESTimeExpressionParser.js\";\nimport ESMergeDateTimeRefiner from \"./refiners/ESMergeDateTimeRefiner.js\";\nimport ESMergeDateRangeRefiner from \"./refiners/ESMergeDateRangeRefiner.js\";\nimport ESMonthNameLittleEndianParser from \"./parsers/ESMonthNameLittleEndianParser.js\";\nimport ESCasualDateParser from \"./parsers/ESCasualDateParser.js\";\nimport ESCasualTimeParser from \"./parsers/ESCasualTimeParser.js\";\nimport ESTimeUnitWithinFormatParser from \"./parsers/ESTimeUnitWithinFormatParser.js\";\nexport { Chrono, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Meridiem, Weekday };\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration() {\n  let littleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const option = createConfiguration(false, littleEndian);\n  option.parsers.push(new ESCasualDateParser());\n  option.parsers.push(new ESCasualTimeParser());\n  return option;\n}\nexport function createConfiguration() {\n  let strictMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return includeCommonConfiguration({\n    parsers: [new SlashDateFormatParser(littleEndian), new ESWeekdayParser(), new ESTimeExpressionParser(), new ESMonthNameLittleEndianParser(), new ESTimeUnitWithinFormatParser()],\n    refiners: [new ESMergeDateTimeRefiner(), new ESMergeDateRangeRefiner()]\n  }, strictMode);\n}","map":{"version":3,"names":["includeCommonConfiguration","Chrono","ParsingResult","ParsingComponents","ReferenceWithTimezone","Meridiem","Weekday","SlashDateFormatParser","ESWeekdayParser","ESTimeExpressionParser","ESMergeDateTimeRefiner","ESMergeDateRangeRefiner","ESMonthNameLittleEndianParser","ESCasualDateParser","ESCasualTimeParser","ESTimeUnitWithinFormatParser","casual","createCasualConfiguration","strict","createConfiguration","parse","text","ref","option","parseDate","littleEndian","arguments","length","undefined","parsers","push","strictMode","refiners"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/es/index.ts"],"sourcesContent":["/**\n * Chrono components for Spanish support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport { Chrono, Configuration, Parser, Refiner } from \"../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../types\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ESWeekdayParser from \"./parsers/ESWeekdayParser\";\nimport ESTimeExpressionParser from \"./parsers/ESTimeExpressionParser\";\nimport ESMergeDateTimeRefiner from \"./refiners/ESMergeDateTimeRefiner\";\nimport ESMergeDateRangeRefiner from \"./refiners/ESMergeDateRangeRefiner\";\nimport ESMonthNameLittleEndianParser from \"./parsers/ESMonthNameLittleEndianParser\";\nimport ESCasualDateParser from \"./parsers/ESCasualDateParser\";\nimport ESCasualTimeParser from \"./parsers/ESCasualTimeParser\";\nimport ESTimeUnitWithinFormatParser from \"./parsers/ESTimeUnitWithinFormatParser\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(littleEndian = true): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.push(new ESCasualDateParser());\n    option.parsers.push(new ESCasualTimeParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(strictMode = true, littleEndian = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(littleEndian),\n                new ESWeekdayParser(),\n                new ESTimeExpressionParser(),\n                new ESMonthNameLittleEndianParser(),\n                new ESTimeUnitWithinFormatParser(),\n            ],\n            refiners: [new ESMergeDateTimeRefiner(), new ESMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n"],"mappings":"AAMA,SAASA,0BAA0B,QAAQ,yBAAuB;AAClE,SAASC,MAAM,QAAwC,iBAAe;AACtE,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB,QAAQ,kBAAgB;AACxF,SAAmEC,QAAQ,EAAEC,OAAO,QAAQ,gBAAc;AAC1G,OAAOC,qBAAqB,MAAM,+CAA6C;AAC/E,OAAOC,eAAe,MAAM,8BAA4B;AACxD,OAAOC,sBAAsB,MAAM,qCAAmC;AACtE,OAAOC,sBAAsB,MAAM,sCAAoC;AACvE,OAAOC,uBAAuB,MAAM,uCAAqC;AACzE,OAAOC,6BAA6B,MAAM,4CAA0C;AACpF,OAAOC,kBAAkB,MAAM,iCAA+B;AAC9D,OAAOC,kBAAkB,MAAM,iCAA+B;AAC9D,OAAOC,4BAA4B,MAAM,2CAAyC;AAElF,SAASd,MAAM,EAAmBC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB;AACzF,SAAmEC,QAAQ,EAAEC,OAAO;AAGpF,OAAO,MAAMU,MAAM,GAAG,IAAIf,MAAM,CAACgB,yBAAyB,EAAE,CAAC;AAC7D,OAAO,MAAMC,MAAM,GAAG,IAAIjB,MAAM,CAACkB,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAE3D,OAAM,SAAUC,KAAKA,CAACC,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACrF,OAAOP,MAAM,CAACI,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC1C;AAEA,OAAM,SAAUC,SAASA,CAACH,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACzF,OAAOP,MAAM,CAACQ,SAAS,CAACH,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC9C;AAKA,OAAM,SAAUN,yBAAyBA,CAAA,EAAoB;EAAA,IAAnBQ,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACzD,MAAMH,MAAM,GAAGJ,mBAAmB,CAAC,KAAK,EAAEM,YAAY,CAAC;EACvDF,MAAM,CAACM,OAAO,CAACC,IAAI,CAAC,IAAIjB,kBAAkB,EAAE,CAAC;EAC7CU,MAAM,CAACM,OAAO,CAACC,IAAI,CAAC,IAAIhB,kBAAkB,EAAE,CAAC;EAC7C,OAAOS,MAAM;AACjB;AAKA,OAAM,SAAUJ,mBAAmBA,CAAA,EAAuC;EAAA,IAAtCY,UAAU,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAED,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACtE,OAAO1B,0BAA0B,CAC7B;IACI6B,OAAO,EAAE,CACL,IAAItB,qBAAqB,CAACkB,YAAY,CAAC,EACvC,IAAIjB,eAAe,EAAE,EACrB,IAAIC,sBAAsB,EAAE,EAC5B,IAAIG,6BAA6B,EAAE,EACnC,IAAIG,4BAA4B,EAAE,CACrC;IACDiB,QAAQ,EAAE,CAAC,IAAItB,sBAAsB,EAAE,EAAE,IAAIC,uBAAuB,EAAE;GACzE,EACDoB,UAAU,CACb;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}