{"ast":null,"code":"import { includeCommonConfiguration } from \"../../configurations.js\";\nimport { Chrono } from \"../../chrono.js\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results.js\";\nimport { Meridiem, Weekday } from \"../../types.js\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser.js\";\nimport ISOFormatParser from \"../../common/parsers/ISOFormatParser.js\";\nimport DETimeExpressionParser from \"./parsers/DETimeExpressionParser.js\";\nimport DEWeekdayParser from \"./parsers/DEWeekdayParser.js\";\nimport DESpecificTimeExpressionParser from \"./parsers/DESpecificTimeExpressionParser.js\";\nimport DEMergeDateRangeRefiner from \"./refiners/DEMergeDateRangeRefiner.js\";\nimport DEMergeDateTimeRefiner from \"./refiners/DEMergeDateTimeRefiner.js\";\nimport DECasualDateParser from \"./parsers/DECasualDateParser.js\";\nimport DECasualTimeParser from \"./parsers/DECasualTimeParser.js\";\nimport DEMonthNameLittleEndianParser from \"./parsers/DEMonthNameLittleEndianParser.js\";\nimport DETimeUnitRelativeFormatParser from \"./parsers/DETimeUnitRelativeFormatParser.js\";\nimport DETimeUnitWithinFormatParser from \"./parsers/DETimeUnitWithinFormatParser.js\";\nexport { Chrono, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Meridiem, Weekday };\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration(littleEndian = true) {\n  const option = createConfiguration(false, littleEndian);\n  option.parsers.unshift(new DECasualTimeParser());\n  option.parsers.unshift(new DECasualDateParser());\n  option.parsers.unshift(new DETimeUnitRelativeFormatParser());\n  return option;\n}\nexport function createConfiguration(strictMode = true, littleEndian = true) {\n  return includeCommonConfiguration({\n    parsers: [new ISOFormatParser(), new SlashDateFormatParser(littleEndian), new DETimeExpressionParser(), new DESpecificTimeExpressionParser(), new DEMonthNameLittleEndianParser(), new DEWeekdayParser(), new DETimeUnitWithinFormatParser()],\n    refiners: [new DEMergeDateRangeRefiner(), new DEMergeDateTimeRefiner()]\n  }, strictMode);\n}","map":{"version":3,"names":["includeCommonConfiguration","Chrono","ParsingResult","ParsingComponents","ReferenceWithTimezone","Meridiem","Weekday","SlashDateFormatParser","ISOFormatParser","DETimeExpressionParser","DEWeekdayParser","DESpecificTimeExpressionParser","DEMergeDateRangeRefiner","DEMergeDateTimeRefiner","DECasualDateParser","DECasualTimeParser","DEMonthNameLittleEndianParser","DETimeUnitRelativeFormatParser","DETimeUnitWithinFormatParser","casual","createCasualConfiguration","strict","createConfiguration","parse","text","ref","option","parseDate","littleEndian","parsers","unshift","strictMode","refiners"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/de/index.ts"],"sourcesContent":["import { includeCommonConfiguration } from \"../../configurations\";\nimport { Chrono, Configuration, Parser, Refiner } from \"../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../types\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ISOFormatParser from \"../../common/parsers/ISOFormatParser\";\nimport DETimeExpressionParser from \"./parsers/DETimeExpressionParser\";\nimport DEWeekdayParser from \"./parsers/DEWeekdayParser\";\nimport DESpecificTimeExpressionParser from \"./parsers/DESpecificTimeExpressionParser\";\nimport DEMergeDateRangeRefiner from \"./refiners/DEMergeDateRangeRefiner\";\nimport DEMergeDateTimeRefiner from \"./refiners/DEMergeDateTimeRefiner\";\nimport DECasualDateParser from \"./parsers/DECasualDateParser\";\nimport DECasualTimeParser from \"./parsers/DECasualTimeParser\";\nimport DEMonthNameLittleEndianParser from \"./parsers/DEMonthNameLittleEndianParser\";\nimport DETimeUnitRelativeFormatParser from \"./parsers/DETimeUnitRelativeFormatParser\";\nimport DETimeUnitWithinFormatParser from \"./parsers/DETimeUnitWithinFormatParser\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\nexport function createCasualConfiguration(littleEndian = true): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new DECasualTimeParser());\n    option.parsers.unshift(new DECasualDateParser());\n    option.parsers.unshift(new DETimeUnitRelativeFormatParser());\n    return option;\n}\n\nexport function createConfiguration(strictMode = true, littleEndian = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new ISOFormatParser(),\n                new SlashDateFormatParser(littleEndian),\n                new DETimeExpressionParser(),\n                new DESpecificTimeExpressionParser(),\n                new DEMonthNameLittleEndianParser(),\n                new DEWeekdayParser(),\n                new DETimeUnitWithinFormatParser(),\n            ],\n            refiners: [new DEMergeDateRangeRefiner(), new DEMergeDateTimeRefiner()],\n        },\n        strictMode\n    );\n}\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,yBAAuB;AAClE,SAASC,MAAM,QAAwC,iBAAe;AACtE,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB,QAAQ,kBAAgB;AACxF,SAAmEC,QAAQ,EAAEC,OAAO,QAAQ,gBAAc;AAC1G,OAAOC,qBAAqB,MAAM,+CAA6C;AAC/E,OAAOC,eAAe,MAAM,yCAAuC;AACnE,OAAOC,sBAAsB,MAAM,qCAAmC;AACtE,OAAOC,eAAe,MAAM,8BAA4B;AACxD,OAAOC,8BAA8B,MAAM,6CAA2C;AACtF,OAAOC,uBAAuB,MAAM,uCAAqC;AACzE,OAAOC,sBAAsB,MAAM,sCAAoC;AACvE,OAAOC,kBAAkB,MAAM,iCAA+B;AAC9D,OAAOC,kBAAkB,MAAM,iCAA+B;AAC9D,OAAOC,6BAA6B,MAAM,4CAA0C;AACpF,OAAOC,8BAA8B,MAAM,6CAA2C;AACtF,OAAOC,4BAA4B,MAAM,2CAAyC;AAElF,SAASjB,MAAM,EAAmBC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB;AACzF,SAAmEC,QAAQ,EAAEC,OAAO;AAGpF,OAAO,MAAMa,MAAM,GAAG,IAAIlB,MAAM,CAACmB,yBAAyB,EAAE,CAAC;AAC7D,OAAO,MAAMC,MAAM,GAAG,IAAIpB,MAAM,CAACqB,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAE3D,OAAM,SAAUC,KAAKA,CAACC,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACrF,OAAOP,MAAM,CAACI,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC1C;AAEA,OAAM,SAAUC,SAASA,CAACH,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACzF,OAAOP,MAAM,CAACQ,SAAS,CAACH,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC9C;AAEA,OAAM,SAAUN,yBAAyBA,CAACQ,YAAY,GAAG,IAAI;EACzD,MAAMF,MAAM,GAAGJ,mBAAmB,CAAC,KAAK,EAAEM,YAAY,CAAC;EACvDF,MAAM,CAACG,OAAO,CAACC,OAAO,CAAC,IAAIf,kBAAkB,EAAE,CAAC;EAChDW,MAAM,CAACG,OAAO,CAACC,OAAO,CAAC,IAAIhB,kBAAkB,EAAE,CAAC;EAChDY,MAAM,CAACG,OAAO,CAACC,OAAO,CAAC,IAAIb,8BAA8B,EAAE,CAAC;EAC5D,OAAOS,MAAM;AACjB;AAEA,OAAM,SAAUJ,mBAAmBA,CAACS,UAAU,GAAG,IAAI,EAAEH,YAAY,GAAG,IAAI;EACtE,OAAO5B,0BAA0B,CAC7B;IACI6B,OAAO,EAAE,CACL,IAAIrB,eAAe,EAAE,EACrB,IAAID,qBAAqB,CAACqB,YAAY,CAAC,EACvC,IAAInB,sBAAsB,EAAE,EAC5B,IAAIE,8BAA8B,EAAE,EACpC,IAAIK,6BAA6B,EAAE,EACnC,IAAIN,eAAe,EAAE,EACrB,IAAIQ,4BAA4B,EAAE,CACrC;IACDc,QAAQ,EAAE,CAAC,IAAIpB,uBAAuB,EAAE,EAAE,IAAIC,sBAAsB,EAAE;GACzE,EACDkB,UAAU,CACb;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}