{"ast":null,"code":"import { MONTH_DICTIONARY } from \"../constants.js\";\nimport { findYearClosestToRef } from \"../../../calculation/years.js\";\nimport { matchAnyPattern } from \"../../../utils/pattern.js\";\nimport { YEAR_PATTERN, parseYear } from \"../constants.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nconst PATTERN = new RegExp(`(${matchAnyPattern(MONTH_DICTIONARY)})` + `\\\\s*` + `(?:` + `[,-]?\\\\s*(${YEAR_PATTERN})?` + \")?\" + \"(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)\", \"i\");\nconst MONTH_NAME_GROUP = 1;\nconst YEAR_GROUP = 2;\nexport default class NLMonthNameParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const components = context.createParsingComponents();\n    components.imply(\"day\", 1);\n    const monthName = match[MONTH_NAME_GROUP];\n    const month = MONTH_DICTIONARY[monthName.toLowerCase()];\n    components.assign(\"month\", month);\n    if (match[YEAR_GROUP]) {\n      const year = parseYear(match[YEAR_GROUP]);\n      components.assign(\"year\", year);\n    } else {\n      const year = findYearClosestToRef(context.refDate, 1, month);\n      components.imply(\"year\", year);\n    }\n    return components;\n  }\n}","map":{"version":3,"names":["MONTH_DICTIONARY","findYearClosestToRef","matchAnyPattern","YEAR_PATTERN","parseYear","AbstractParserWithWordBoundaryChecking","PATTERN","RegExp","MONTH_NAME_GROUP","YEAR_GROUP","NLMonthNameParser","innerPattern","innerExtract","context","match","components","createParsingComponents","imply","monthName","month","toLowerCase","assign","year","refDate"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/parsers/NLMonthNameParser.ts"],"sourcesContent":["import { MONTH_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `\\\\s*` +\n        `(?:` +\n        `[,-]?\\\\s*(${YEAR_PATTERN})?` +\n        \")?\" +\n        \"(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)\",\n    \"i\"\n);\n\nconst MONTH_NAME_GROUP = 1;\nconst YEAR_GROUP = 2;\n\n/**\n * The parser for parsing month name and year.\n * - januari, 2012\n * - januari 2012\n * - januari\n */\nexport default class NLMonthNameParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const components = context.createParsingComponents();\n        components.imply(\"day\", 1);\n\n        const monthName = match[MONTH_NAME_GROUP];\n        const month = MONTH_DICTIONARY[monthName.toLowerCase()];\n        components.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            components.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, 1, month);\n            components.imply(\"year\", year);\n        }\n\n        return components;\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,iBAAe;AAEhD,SAASC,oBAAoB,QAAQ,+BAA6B;AAClE,SAASC,eAAe,QAAQ,2BAAyB;AACzD,SAASC,YAAY,EAAEC,SAAS,QAAQ,iBAAe;AACvD,SAASC,sCAAsC,QAAQ,2DAAyD;AAEhH,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,IAAIL,eAAe,CAACF,gBAAgB,CAAC,GAAG,GACpC,MAAM,GACN,KAAK,GACL,aAAaG,YAAY,IAAI,GAC7B,IAAI,GACJ,kCAAkC,EACtC,GAAG,CACN;AAED,MAAMK,gBAAgB,GAAG,CAAC;AAC1B,MAAMC,UAAU,GAAG,CAAC;AAQpB,eAAc,MAAOC,iBAAkB,SAAQL,sCAAsC;EACjFM,YAAYA,CAAA;IACR,OAAOL,OAAO;EAClB;EAEAM,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,UAAU,GAAGF,OAAO,CAACG,uBAAuB,EAAE;IACpDD,UAAU,CAACE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;IAE1B,MAAMC,SAAS,GAAGJ,KAAK,CAACN,gBAAgB,CAAC;IACzC,MAAMW,KAAK,GAAGnB,gBAAgB,CAACkB,SAAS,CAACE,WAAW,EAAE,CAAC;IACvDL,UAAU,CAACM,MAAM,CAAC,OAAO,EAAEF,KAAK,CAAC;IAEjC,IAAIL,KAAK,CAACL,UAAU,CAAC,EAAE;MACnB,MAAMa,IAAI,GAAGlB,SAAS,CAACU,KAAK,CAACL,UAAU,CAAC,CAAC;MACzCM,UAAU,CAACM,MAAM,CAAC,MAAM,EAAEC,IAAI,CAAC;KAClC,MAAM;MACH,MAAMA,IAAI,GAAGrB,oBAAoB,CAACY,OAAO,CAACU,OAAO,EAAE,CAAC,EAAEJ,KAAK,CAAC;MAC5DJ,UAAU,CAACE,KAAK,CAAC,MAAM,EAAEK,IAAI,CAAC;;IAGlC,OAAOP,UAAU;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}