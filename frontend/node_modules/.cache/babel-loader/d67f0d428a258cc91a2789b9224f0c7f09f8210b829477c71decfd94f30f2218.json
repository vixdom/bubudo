{"ast":null,"code":"import { includeCommonConfiguration } from \"../../configurations.js\";\nimport { Chrono } from \"../../chrono.js\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results.js\";\nimport { Meridiem, Weekday } from \"../../types.js\";\nimport NLMergeDateRangeRefiner from \"./refiners/NLMergeDateRangeRefiner.js\";\nimport NLMergeDateTimeRefiner from \"./refiners/NLMergeDateTimeRefiner.js\";\nimport NLCasualDateParser from \"./parsers/NLCasualDateParser.js\";\nimport NLCasualTimeParser from \"./parsers/NLCasualTimeParser.js\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser.js\";\nimport NLTimeUnitWithinFormatParser from \"./parsers/NLTimeUnitWithinFormatParser.js\";\nimport NLWeekdayParser from \"./parsers/NLWeekdayParser.js\";\nimport NLMonthNameMiddleEndianParser from \"./parsers/NLMonthNameMiddleEndianParser.js\";\nimport NLMonthNameParser from \"./parsers/NLMonthNameParser.js\";\nimport NLSlashMonthFormatParser from \"./parsers/NLSlashMonthFormatParser.js\";\nimport NLTimeExpressionParser from \"./parsers/NLTimeExpressionParser.js\";\nimport NLCasualYearMonthDayParser from \"./parsers/NLCasualYearMonthDayParser.js\";\nimport NLCasualDateTimeParser from \"./parsers/NLCasualDateTimeParser.js\";\nimport NLTimeUnitCasualRelativeFormatParser from \"./parsers/NLTimeUnitCasualRelativeFormatParser.js\";\nimport NLRelativeDateFormatParser from \"./parsers/NLRelativeDateFormatParser.js\";\nimport NLTimeUnitAgoFormatParser from \"./parsers/NLTimeUnitAgoFormatParser.js\";\nimport NLTimeUnitLaterFormatParser from \"./parsers/NLTimeUnitLaterFormatParser.js\";\nexport { Chrono, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Meridiem, Weekday };\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration(littleEndian = true) {\n  const option = createConfiguration(false, littleEndian);\n  option.parsers.unshift(new NLCasualDateParser());\n  option.parsers.unshift(new NLCasualTimeParser());\n  option.parsers.unshift(new NLCasualDateTimeParser());\n  option.parsers.unshift(new NLMonthNameParser());\n  option.parsers.unshift(new NLRelativeDateFormatParser());\n  option.parsers.unshift(new NLTimeUnitCasualRelativeFormatParser());\n  return option;\n}\nexport function createConfiguration(strictMode = true, littleEndian = true) {\n  return includeCommonConfiguration({\n    parsers: [new SlashDateFormatParser(littleEndian), new NLTimeUnitWithinFormatParser(), new NLMonthNameMiddleEndianParser(), new NLMonthNameParser(), new NLWeekdayParser(), new NLCasualYearMonthDayParser(), new NLSlashMonthFormatParser(), new NLTimeExpressionParser(strictMode), new NLTimeUnitAgoFormatParser(strictMode), new NLTimeUnitLaterFormatParser(strictMode)],\n    refiners: [new NLMergeDateTimeRefiner(), new NLMergeDateRangeRefiner()]\n  }, strictMode);\n}","map":{"version":3,"names":["includeCommonConfiguration","Chrono","ParsingResult","ParsingComponents","ReferenceWithTimezone","Meridiem","Weekday","NLMergeDateRangeRefiner","NLMergeDateTimeRefiner","NLCasualDateParser","NLCasualTimeParser","SlashDateFormatParser","NLTimeUnitWithinFormatParser","NLWeekdayParser","NLMonthNameMiddleEndianParser","NLMonthNameParser","NLSlashMonthFormatParser","NLTimeExpressionParser","NLCasualYearMonthDayParser","NLCasualDateTimeParser","NLTimeUnitCasualRelativeFormatParser","NLRelativeDateFormatParser","NLTimeUnitAgoFormatParser","NLTimeUnitLaterFormatParser","casual","createCasualConfiguration","strict","createConfiguration","parse","text","ref","option","parseDate","littleEndian","parsers","unshift","strictMode","refiners"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/index.ts"],"sourcesContent":["/**\n * Chrono components for Dutch support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport { Chrono, Configuration, Parser, Refiner } from \"../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../types\";\nimport NLMergeDateRangeRefiner from \"./refiners/NLMergeDateRangeRefiner\";\nimport NLMergeDateTimeRefiner from \"./refiners/NLMergeDateTimeRefiner\";\nimport NLCasualDateParser from \"./parsers/NLCasualDateParser\";\nimport NLCasualTimeParser from \"./parsers/NLCasualTimeParser\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport NLTimeUnitWithinFormatParser from \"./parsers/NLTimeUnitWithinFormatParser\";\nimport NLWeekdayParser from \"./parsers/NLWeekdayParser\";\nimport NLMonthNameMiddleEndianParser from \"./parsers/NLMonthNameMiddleEndianParser\";\nimport NLMonthNameParser from \"./parsers/NLMonthNameParser\";\nimport NLSlashMonthFormatParser from \"./parsers/NLSlashMonthFormatParser\";\nimport NLTimeExpressionParser from \"./parsers/NLTimeExpressionParser\";\nimport NLCasualYearMonthDayParser from \"./parsers/NLCasualYearMonthDayParser\";\nimport NLCasualDateTimeParser from \"./parsers/NLCasualDateTimeParser\";\nimport NLTimeUnitCasualRelativeFormatParser from \"./parsers/NLTimeUnitCasualRelativeFormatParser\";\nimport NLRelativeDateFormatParser from \"./parsers/NLRelativeDateFormatParser\";\nimport NLTimeUnitAgoFormatParser from \"./parsers/NLTimeUnitAgoFormatParser\";\nimport NLTimeUnitLaterFormatParser from \"./parsers/NLTimeUnitLaterFormatParser\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\nexport function createCasualConfiguration(littleEndian = true): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new NLCasualDateParser());\n    option.parsers.unshift(new NLCasualTimeParser());\n    option.parsers.unshift(new NLCasualDateTimeParser());\n    option.parsers.unshift(new NLMonthNameParser());\n    option.parsers.unshift(new NLRelativeDateFormatParser());\n    option.parsers.unshift(new NLTimeUnitCasualRelativeFormatParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(strictMode = true, littleEndian = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(littleEndian),\n                new NLTimeUnitWithinFormatParser(),\n                new NLMonthNameMiddleEndianParser(),\n                new NLMonthNameParser(),\n                new NLWeekdayParser(),\n                new NLCasualYearMonthDayParser(),\n                new NLSlashMonthFormatParser(),\n                new NLTimeExpressionParser(strictMode),\n                new NLTimeUnitAgoFormatParser(strictMode),\n                new NLTimeUnitLaterFormatParser(strictMode),\n            ],\n            refiners: [new NLMergeDateTimeRefiner(), new NLMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}