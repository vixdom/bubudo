{"ast":null,"code":"import{supabase}from'./supabaseClient';const TABLE_NAME='tasks';export async function fetchUserTasks(userId){const{data,error}=await supabase.from(TABLE_NAME).select('*').eq('user_id',userId);if(error)throw error;return(data||[]).map(task=>({...task,dueDate:task.dueDate?new Date(task.dueDate):null,subTasks:task.subTasks||[]}));}// Helper: Check if string is a valid UUID (v4)\nexport function isValidUUID(id){return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);}export async function upsertUserTasks(userId,tasks){// Attach user_id to each task and only include 'id' if it's a valid UUID\nconst tasksWithUser=tasks.map(task=>{const{id,...rest}=task;return id&&isValidUUID(id)?{...rest,id,user_id:userId}:{...rest,user_id:userId};});const{error}=await supabase.from(TABLE_NAME).upsert(tasksWithUser,{onConflict:'id'});if(error)throw error;}export async function deleteUserTasks(userId){const{error}=await supabase.from(TABLE_NAME).delete().eq('user_id',userId);if(error)throw error;}","map":{"version":3,"names":["supabase","TABLE_NAME","fetchUserTasks","userId","data","error","from","select","eq","map","task","dueDate","Date","subTasks","isValidUUID","id","test","upsertUserTasks","tasks","tasksWithUser","rest","user_id","upsert","onConflict","deleteUserTasks","delete"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/services/supabaseTasksService.ts"],"sourcesContent":["import { supabase } from './supabaseClient';\nimport { TaskWithSubTasks } from './geminiService';\n\nconst TABLE_NAME = 'tasks';\n\nexport async function fetchUserTasks(userId: string): Promise<TaskWithSubTasks[]> {\n  const { data, error } = await supabase\n    .from(TABLE_NAME)\n    .select('*')\n    .eq('user_id', userId);\n  if (error) throw error;\n  return (data || []).map(task => ({\n    ...task,\n    dueDate: task.dueDate ? new Date(task.dueDate) : null,\n    subTasks: task.subTasks || []\n  }));\n}\n\n// Helper: Check if string is a valid UUID (v4)\nexport function isValidUUID(id: string): boolean {\n  return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);\n}\n\nexport async function upsertUserTasks(userId: string, tasks: (Omit<TaskWithSubTasks, 'id'> & { id?: string })[]) {\n  // Attach user_id to each task and only include 'id' if it's a valid UUID\n  const tasksWithUser = tasks.map(task => {\n    const { id, ...rest } = task;\n    return id && isValidUUID(id)\n      ? { ...rest, id, user_id: userId }\n      : { ...rest, user_id: userId };\n  });\n  const { error } = await supabase\n    .from(TABLE_NAME)\n    .upsert(tasksWithUser, { onConflict: 'id' });\n  if (error) throw error;\n}\n\nexport async function deleteUserTasks(userId: string) {\n  const { error } = await supabase\n    .from(TABLE_NAME)\n    .delete()\n    .eq('user_id', userId);\n  if (error) throw error;\n}\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,kBAAkB,CAG3C,KAAM,CAAAC,UAAU,CAAG,OAAO,CAE1B,MAAO,eAAe,CAAAC,cAAcA,CAACC,MAAc,CAA+B,CAChF,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACnCM,IAAI,CAACL,UAAU,CAAC,CAChBM,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,CAAEL,MAAM,CAAC,CACxB,GAAIE,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtB,MAAO,CAACD,IAAI,EAAI,EAAE,EAAEK,GAAG,CAACC,IAAI,GAAK,CAC/B,GAAGA,IAAI,CACPC,OAAO,CAAED,IAAI,CAACC,OAAO,CAAG,GAAI,CAAAC,IAAI,CAACF,IAAI,CAACC,OAAO,CAAC,CAAG,IAAI,CACrDE,QAAQ,CAAEH,IAAI,CAACG,QAAQ,EAAI,EAC7B,CAAC,CAAC,CAAC,CACL,CAEA;AACA,MAAO,SAAS,CAAAC,WAAWA,CAACC,EAAU,CAAW,CAC/C,MAAO,6EAA4E,CAACC,IAAI,CAACD,EAAE,CAAC,CAC9F,CAEA,MAAO,eAAe,CAAAE,eAAeA,CAACd,MAAc,CAAEe,KAAyD,CAAE,CAC/G;AACA,KAAM,CAAAC,aAAa,CAAGD,KAAK,CAACT,GAAG,CAACC,IAAI,EAAI,CACtC,KAAM,CAAEK,EAAE,CAAE,GAAGK,IAAK,CAAC,CAAGV,IAAI,CAC5B,MAAO,CAAAK,EAAE,EAAID,WAAW,CAACC,EAAE,CAAC,CACxB,CAAE,GAAGK,IAAI,CAAEL,EAAE,CAAEM,OAAO,CAAElB,MAAO,CAAC,CAChC,CAAE,GAAGiB,IAAI,CAAEC,OAAO,CAAElB,MAAO,CAAC,CAClC,CAAC,CAAC,CACF,KAAM,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CAC7BM,IAAI,CAACL,UAAU,CAAC,CAChBqB,MAAM,CAACH,aAAa,CAAE,CAAEI,UAAU,CAAE,IAAK,CAAC,CAAC,CAC9C,GAAIlB,KAAK,CAAE,KAAM,CAAAA,KAAK,CACxB,CAEA,MAAO,eAAe,CAAAmB,eAAeA,CAACrB,MAAc,CAAE,CACpD,KAAM,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CAC7BM,IAAI,CAACL,UAAU,CAAC,CAChBwB,MAAM,CAAC,CAAC,CACRjB,EAAE,CAAC,SAAS,CAAEL,MAAM,CAAC,CACxB,GAAIE,KAAK,CAAE,KAAM,CAAAA,KAAK,CACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}