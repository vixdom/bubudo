{"ast":null,"code":"export class AbstractParserWithWordBoundaryChecking {\n  constructor() {\n    this.cachedInnerPattern = null;\n    this.cachedPattern = null;\n  }\n  innerPatternHasChange(context, currentInnerPattern) {\n    return this.innerPattern(context) !== currentInnerPattern;\n  }\n  patternLeftBoundary() {\n    return `(\\\\W|^)`;\n  }\n  pattern(context) {\n    if (this.cachedInnerPattern) {\n      if (!this.innerPatternHasChange(context, this.cachedInnerPattern)) {\n        return this.cachedPattern;\n      }\n    }\n    this.cachedInnerPattern = this.innerPattern(context);\n    this.cachedPattern = new RegExp(`${this.patternLeftBoundary()}${this.cachedInnerPattern.source}`, this.cachedInnerPattern.flags);\n    return this.cachedPattern;\n  }\n  extract(context, match) {\n    const header = match[1] ?? \"\";\n    match.index = match.index + header.length;\n    match[0] = match[0].substring(header.length);\n    for (let i = 2; i < match.length; i++) {\n      match[i - 1] = match[i];\n    }\n    return this.innerExtract(context, match);\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","constructor","cachedInnerPattern","cachedPattern","innerPatternHasChange","context","currentInnerPattern","innerPattern","patternLeftBoundary","pattern","RegExp","source","flags","extract","match","header","index","length","substring","i","innerExtract"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/common/parsers/AbstractParserWithWordBoundary.ts"],"sourcesContent":["import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../results\";\nimport { Component } from \"../../types\";\n\n/**\n * A parser that checks for word boundary and applying the inner pattern and extraction.\n */\nexport abstract class AbstractParserWithWordBoundaryChecking implements Parser {\n    abstract innerPattern(context: ParsingContext): RegExp;\n    abstract innerExtract(\n        context: ParsingContext,\n        match: RegExpMatchArray\n    ): ParsingComponents | ParsingResult | { [c in Component]?: number } | null;\n\n    // Overrides this method if there is more efficient way to check for inner pattern change.\n    innerPatternHasChange(context: ParsingContext, currentInnerPattern: RegExp): boolean {\n        return this.innerPattern(context) !== currentInnerPattern;\n    }\n\n    patternLeftBoundary(): string {\n        return `(\\\\W|^)`;\n    }\n\n    private cachedInnerPattern?: RegExp = null;\n    private cachedPattern?: RegExp = null;\n\n    pattern(context: ParsingContext): RegExp {\n        if (this.cachedInnerPattern) {\n            if (!this.innerPatternHasChange(context, this.cachedInnerPattern)) {\n                return this.cachedPattern;\n            }\n        }\n        this.cachedInnerPattern = this.innerPattern(context);\n        this.cachedPattern = new RegExp(\n            `${this.patternLeftBoundary()}${this.cachedInnerPattern.source}`,\n            this.cachedInnerPattern.flags\n        );\n        return this.cachedPattern;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray) {\n        const header = match[1] ?? \"\";\n        match.index = match.index + header.length;\n        match[0] = match[0].substring(header.length);\n        for (let i = 2; i < match.length; i++) {\n            match[i - 1] = match[i];\n        }\n\n        return this.innerExtract(context, match);\n    }\n}\n"],"mappings":"AAOA,OAAM,MAAgBA,sCAAsC;EAA5DC,YAAA;IAgBY,KAAAC,kBAAkB,GAAY,IAAI;IAClC,KAAAC,aAAa,GAAY,IAAI;EA0BzC;EAnCIC,qBAAqBA,CAACC,OAAuB,EAAEC,mBAA2B;IACtE,OAAO,IAAI,CAACC,YAAY,CAACF,OAAO,CAAC,KAAKC,mBAAmB;EAC7D;EAEAE,mBAAmBA,CAAA;IACf,OAAO,SAAS;EACpB;EAKAC,OAAOA,CAACJ,OAAuB;IAC3B,IAAI,IAAI,CAACH,kBAAkB,EAAE;MACzB,IAAI,CAAC,IAAI,CAACE,qBAAqB,CAACC,OAAO,EAAE,IAAI,CAACH,kBAAkB,CAAC,EAAE;QAC/D,OAAO,IAAI,CAACC,aAAa;;;IAGjC,IAAI,CAACD,kBAAkB,GAAG,IAAI,CAACK,YAAY,CAACF,OAAO,CAAC;IACpD,IAAI,CAACF,aAAa,GAAG,IAAIO,MAAM,CAC3B,GAAG,IAAI,CAACF,mBAAmB,EAAE,GAAG,IAAI,CAACN,kBAAkB,CAACS,MAAM,EAAE,EAChE,IAAI,CAACT,kBAAkB,CAACU,KAAK,CAChC;IACD,OAAO,IAAI,CAACT,aAAa;EAC7B;EAEAU,OAAOA,CAACR,OAAuB,EAAES,KAAuB;IACpD,MAAMC,MAAM,GAAGD,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;IAC7BA,KAAK,CAACE,KAAK,GAAGF,KAAK,CAACE,KAAK,GAAGD,MAAM,CAACE,MAAM;IACzCH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACI,SAAS,CAACH,MAAM,CAACE,MAAM,CAAC;IAC5C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;MACnCL,KAAK,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGL,KAAK,CAACK,CAAC,CAAC;;IAG3B,OAAO,IAAI,CAACC,YAAY,CAACf,OAAO,EAAES,KAAK,CAAC;EAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}