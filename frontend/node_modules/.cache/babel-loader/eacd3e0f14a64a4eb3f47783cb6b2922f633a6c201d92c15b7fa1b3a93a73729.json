{"ast":null,"code":"var _jsxFileName = \"/Users/mvikr/Projects/TaskApp/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Box, Button } from '@mui/material';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\nimport AuthHeader from './components/AuthHeader';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [promptSelection, setPromptSelection] = useState('A');\n  const [user, setUser] = useState(null);\n\n  // Load tasks from localStorage on initial mount\n  useEffect(() => {\n    try {\n      const storedTasks = localStorage.getItem('tasks');\n      if (storedTasks) {\n        const parsedTasks = JSON.parse(storedTasks);\n        // Convert dueDate strings back to Date objects\n        const tasksWithDates = parsedTasks.map(task => ({\n          ...task,\n          dueDate: task.dueDate ? new Date(task.dueDate) : null\n        }));\n        setTasks(tasksWithDates);\n        console.log('Tasks loaded from localStorage');\n      }\n    } catch (error) {\n      console.error('Failed to load tasks from localStorage:', error);\n      // Optional: Clear corrupted storage\n      // localStorage.removeItem('tasks');\n    }\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // Save tasks to localStorage whenever the tasks state changes\n  useEffect(() => {\n    try {\n      // Convert Date objects to ISO strings before saving\n      const tasksToStore = tasks.map(task => ({\n        ...task,\n        dueDate: task.dueDate ? task.dueDate.toISOString() : null\n      }));\n      localStorage.setItem('tasks', JSON.stringify(tasksToStore));\n      // console.log('Tasks saved to localStorage'); // Optional: uncomment for debugging\n    } catch (error) {\n      console.error('Failed to save tasks to localStorage:', error);\n    }\n  }, [tasks]); // Dependency array ensures this runs whenever tasks change\n\n  // Updated to accept task data object\n  const addTask = taskData => {\n    const newTask = {\n      id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n      ...taskData,\n      completed: false,\n      // New tasks start as incomplete\n      // Ensure subtasks also start as incomplete if not already set (though geminiService adds this)\n      subTasks: taskData.subTasks.map(st => {\n        var _st$completed;\n        return {\n          ...st,\n          completed: (_st$completed = st.completed) !== null && _st$completed !== void 0 ? _st$completed : false\n        };\n      })\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // Handler to toggle main task and its subtasks\n  const handleToggleTask = taskId => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        const newCompletedStatus = !task.completed;\n        return {\n          ...task,\n          completed: newCompletedStatus,\n          subTasks: task.subTasks.map(sub => ({\n            ...sub,\n            completed: newCompletedStatus\n          }))\n        };\n      }\n      return task;\n    }));\n  };\n\n  // Handler to toggle a single subtask and update parent task if needed\n  const handleToggleSubTask = (taskId, subTaskId) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        let allSubTasksCompleted = true;\n        const updatedSubTasks = task.subTasks.map(sub => {\n          if (sub.id === subTaskId) {\n            const newSubCompletedStatus = !sub.completed;\n            if (!newSubCompletedStatus) allSubTasksCompleted = false; // If any is unchecked, parent is not complete\n            return {\n              ...sub,\n              completed: newSubCompletedStatus\n            };\n          } else {\n            if (!sub.completed) allSubTasksCompleted = false; // Check status of other subtasks\n          }\n          return sub;\n        });\n        // Ensure parent 'completed' reflects if ALL subtasks are complete *after* the toggle\n        return {\n          ...task,\n          subTasks: updatedSubTasks,\n          completed: allSubTasksCompleted\n        };\n      }\n      return task;\n    }));\n  };\n\n  // Function to toggle prompt\n  const togglePrompt = () => {\n    setPromptSelection(prev => prev === 'A' ? 'B' : 'A');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AuthHeader, {\n      onAuthChange: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          my: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: togglePrompt,\n            children: [\"Using Prompt: \", promptSelection, \" (Click to Switch)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddTaskForm, {\n          onAddTask: addTask,\n          currentPrompt: promptSelection,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n          tasks: tasks,\n          onToggleTask: handleToggleTask,\n          onToggleSubTask: handleToggleSubTask,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"RlQ7bSer6ld5lWz9QcNVy5M7JQM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Box","Button","TaskList","AddTaskForm","AuthHeader","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","tasks","setTasks","promptSelection","setPromptSelection","user","setUser","storedTasks","localStorage","getItem","parsedTasks","JSON","parse","tasksWithDates","map","task","dueDate","Date","console","log","error","tasksToStore","toISOString","setItem","stringify","addTask","taskData","newTask","id","now","toString","Math","random","substring","completed","subTasks","st","_st$completed","handleToggleTask","taskId","newCompletedStatus","sub","handleToggleSubTask","subTaskId","allSubTasksCompleted","updatedSubTasks","newSubCompletedStatus","togglePrompt","prev","children","onAuthChange","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","sx","my","display","justifyContent","mb","variant","onClick","onAddTask","currentPrompt","onToggleTask","onToggleSubTask","_c","$RefreshReg$"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Typography, Box, Button } from '@mui/material';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\nimport AuthHeader from './components/AuthHeader';\nimport { TaskWithSubTasks, SubTask, PromptSelection } from './services/geminiService';\n\nexport interface Task { // Base Task interface (for potential future use without subtasks)\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState<TaskWithSubTasks[]>([]);\n  const [promptSelection, setPromptSelection] = useState<PromptSelection>('A');\n  const [user, setUser] = useState<any>(null);\n\n  // Load tasks from localStorage on initial mount\n  useEffect(() => {\n    try {\n      const storedTasks = localStorage.getItem('tasks');\n      if (storedTasks) {\n        const parsedTasks: TaskWithSubTasks[] = JSON.parse(storedTasks);\n        // Convert dueDate strings back to Date objects\n        const tasksWithDates = parsedTasks.map(task => ({\n          ...task,\n          dueDate: task.dueDate ? new Date(task.dueDate) : null\n        }));\n        setTasks(tasksWithDates);\n        console.log('Tasks loaded from localStorage');\n      }\n    } catch (error) {\n      console.error('Failed to load tasks from localStorage:', error);\n      // Optional: Clear corrupted storage\n      // localStorage.removeItem('tasks');\n    }\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // Save tasks to localStorage whenever the tasks state changes\n  useEffect(() => {\n    try {\n      // Convert Date objects to ISO strings before saving\n      const tasksToStore = tasks.map(task => ({\n        ...task,\n        dueDate: task.dueDate ? task.dueDate.toISOString() : null\n      }));\n      localStorage.setItem('tasks', JSON.stringify(tasksToStore));\n      // console.log('Tasks saved to localStorage'); // Optional: uncomment for debugging\n    } catch (error) {\n      console.error('Failed to save tasks to localStorage:', error);\n    }\n  }, [tasks]); // Dependency array ensures this runs whenever tasks change\n\n  // Updated to accept task data object\n  const addTask = (taskData: Omit<TaskWithSubTasks, 'id' | 'completed'>) => {\n    const newTask: TaskWithSubTasks = {\n      id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n      ...taskData,\n      completed: false, // New tasks start as incomplete\n      // Ensure subtasks also start as incomplete if not already set (though geminiService adds this)\n      subTasks: taskData.subTasks.map(st => ({...st, completed: st.completed ?? false })) \n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // Handler to toggle main task and its subtasks\n  const handleToggleTask = (taskId: string) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        const newCompletedStatus = !task.completed;\n        return {\n          ...task,\n          completed: newCompletedStatus,\n          subTasks: task.subTasks.map(sub => ({ ...sub, completed: newCompletedStatus }))\n        };\n      }\n      return task;\n    }));\n  };\n\n  // Handler to toggle a single subtask and update parent task if needed\n  const handleToggleSubTask = (taskId: string, subTaskId: string) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        let allSubTasksCompleted = true;\n        const updatedSubTasks = task.subTasks.map(sub => {\n          if (sub.id === subTaskId) {\n            const newSubCompletedStatus = !sub.completed;\n            if (!newSubCompletedStatus) allSubTasksCompleted = false; // If any is unchecked, parent is not complete\n            return { ...sub, completed: newSubCompletedStatus };\n          } else {\n            if (!sub.completed) allSubTasksCompleted = false; // Check status of other subtasks\n          }\n          return sub;\n        });\n        // Ensure parent 'completed' reflects if ALL subtasks are complete *after* the toggle\n        return { ...task, subTasks: updatedSubTasks, completed: allSubTasksCompleted };\n      }\n      return task;\n    }));\n  };\n\n  // Function to toggle prompt\n  const togglePrompt = () => {\n    setPromptSelection(prev => (prev === 'A' ? 'B' : 'A'));\n  };\n\n  return (\n    <>\n      <AuthHeader onAuthChange={setUser} />\n      <Container maxWidth=\"md\">\n        <Box sx={{ my: 4 }}>\n          {/* Prompt Toggle Button */}\n          <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>\n            <Button variant=\"outlined\" onClick={togglePrompt}>\n              Using Prompt: {promptSelection} (Click to Switch)\n            </Button>\n          </Box>\n\n          <AddTaskForm onAddTask={addTask} currentPrompt={promptSelection} user={user} />\n          <TaskList tasks={tasks} onToggleTask={handleToggleTask} onToggleSubTask={handleToggleSubTask} user={user} />\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}