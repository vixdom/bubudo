{"ast":null,"code":"import JPStandardParser from \"./parsers/JPStandardParser.js\";\nimport JPMergeDateRangeRefiner from \"./refiners/JPMergeDateRangeRefiner.js\";\nimport JPCasualDateParser from \"./parsers/JPCasualDateParser.js\";\nimport { Chrono } from \"../../chrono.js\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results.js\";\nimport { Meridiem, Weekday } from \"../../types.js\";\nexport { Chrono, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Meridiem, Weekday };\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration());\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration() {\n  const option = createConfiguration();\n  option.parsers.unshift(new JPCasualDateParser());\n  return option;\n}\nexport function createConfiguration() {\n  return {\n    parsers: [new JPStandardParser()],\n    refiners: [new JPMergeDateRangeRefiner()]\n  };\n}","map":{"version":3,"names":["JPStandardParser","JPMergeDateRangeRefiner","JPCasualDateParser","Chrono","ParsingResult","ParsingComponents","ReferenceWithTimezone","Meridiem","Weekday","casual","createCasualConfiguration","strict","createConfiguration","parse","text","ref","option","parseDate","parsers","unshift","refiners"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ja/index.ts"],"sourcesContent":["/**\n * Chrono components for Japanese support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport JPStandardParser from \"./parsers/JPStandardParser\";\nimport JPMergeDateRangeRefiner from \"./refiners/JPMergeDateRangeRefiner\";\nimport JPCasualDateParser from \"./parsers/JPCasualDateParser\";\n\nimport { Chrono, Configuration, Parser, Refiner } from \"../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../types\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration());\n\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(): Configuration {\n    const option = createConfiguration();\n    option.parsers.unshift(new JPCasualDateParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(): Configuration {\n    return {\n        parsers: [new JPStandardParser()],\n        refiners: [new JPMergeDateRangeRefiner()],\n    };\n}\n"],"mappings":"AAMA,OAAOA,gBAAgB,MAAM,+BAA6B;AAC1D,OAAOC,uBAAuB,MAAM,uCAAqC;AACzE,OAAOC,kBAAkB,MAAM,iCAA+B;AAE9D,SAASC,MAAM,QAAwC,iBAAe;AACtE,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB,QAAQ,kBAAgB;AACxF,SAAmEC,QAAQ,EAAEC,OAAO,QAAQ,gBAAc;AAE1G,SAASL,MAAM,EAAmBC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB;AACzF,SAAmEC,QAAQ,EAAEC,OAAO;AAGpF,OAAO,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAACO,yBAAyB,EAAE,CAAC;AAC7D,OAAO,MAAMC,MAAM,GAAG,IAAIR,MAAM,CAACS,mBAAmB,EAAE,CAAC;AAEvD,OAAM,SAAUC,KAAKA,CAACC,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACrF,OAAOP,MAAM,CAACI,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC1C;AAEA,OAAM,SAAUC,SAASA,CAACH,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACzF,OAAOP,MAAM,CAACQ,SAAS,CAACH,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC9C;AAKA,OAAM,SAAUN,yBAAyBA,CAAA;EACrC,MAAMM,MAAM,GAAGJ,mBAAmB,EAAE;EACpCI,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,IAAIjB,kBAAkB,EAAE,CAAC;EAChD,OAAOc,MAAM;AACjB;AAKA,OAAM,SAAUJ,mBAAmBA,CAAA;EAC/B,OAAO;IACHM,OAAO,EAAE,CAAC,IAAIlB,gBAAgB,EAAE,CAAC;IACjCoB,QAAQ,EAAE,CAAC,IAAInB,uBAAuB,EAAE;GAC3C;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}