{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { REGEX_PARTS } from \"../constants.js\";\nexport class AbstractParserWithLeftBoundaryChecking extends AbstractParserWithWordBoundaryChecking {\n  patternLeftBoundary() {\n    return REGEX_PARTS.leftBoundary;\n  }\n  innerPattern(context) {\n    return new RegExp(this.innerPatternString(context), REGEX_PARTS.flags);\n  }\n  innerPatternHasChange(context, currentInnerPattern) {\n    return false;\n  }\n}\nexport class AbstractParserWithLeftRightBoundaryChecking extends AbstractParserWithLeftBoundaryChecking {\n  innerPattern(context) {\n    return new RegExp(`${this.innerPatternString(context)}${REGEX_PARTS.rightBoundary}`, REGEX_PARTS.flags);\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","REGEX_PARTS","AbstractParserWithLeftBoundaryChecking","patternLeftBoundary","leftBoundary","innerPattern","context","RegExp","innerPatternString","flags","innerPatternHasChange","currentInnerPattern","AbstractParserWithLeftRightBoundaryChecking","rightBoundary"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.ts"],"sourcesContent":["import { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { REGEX_PARTS } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\n\nexport abstract class AbstractParserWithLeftBoundaryChecking extends AbstractParserWithWordBoundaryChecking {\n    abstract innerPatternString(context: ParsingContext): string;\n\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(context: ParsingContext): RegExp {\n        return new RegExp(this.innerPatternString(context), REGEX_PARTS.flags);\n    }\n\n    innerPatternHasChange(context: ParsingContext, currentInnerPattern: RegExp): boolean {\n        return false;\n    }\n}\n\nexport abstract class AbstractParserWithLeftRightBoundaryChecking extends AbstractParserWithLeftBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return new RegExp(`${this.innerPatternString(context)}${REGEX_PARTS.rightBoundary}`, REGEX_PARTS.flags);\n    }\n}\n"],"mappings":"AAAA,SAASA,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,WAAW,QAAQ,iBAAe;AAG3C,OAAM,MAAgBC,sCAAuC,SAAQF,sCAAsC;EAGvGG,mBAAmBA,CAAA;IACf,OAAOF,WAAW,CAACG,YAAY;EACnC;EAEAC,YAAYA,CAACC,OAAuB;IAChC,OAAO,IAAIC,MAAM,CAAC,IAAI,CAACC,kBAAkB,CAACF,OAAO,CAAC,EAAEL,WAAW,CAACQ,KAAK,CAAC;EAC1E;EAEAC,qBAAqBA,CAACJ,OAAuB,EAAEK,mBAA2B;IACtE,OAAO,KAAK;EAChB;;AAGJ,OAAM,MAAgBC,2CAA4C,SAAQV,sCAAsC;EAC5GG,YAAYA,CAACC,OAAuB;IAChC,OAAO,IAAIC,MAAM,CAAC,GAAG,IAAI,CAACC,kBAAkB,CAACF,OAAO,CAAC,GAAGL,WAAW,CAACY,aAAa,EAAE,EAAEZ,WAAW,CAACQ,KAAK,CAAC;EAC3G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}