{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst TABLE_NAME = 'tasks';\nexport async function fetchUserTasks(userId) {\n  const {\n    data,\n    error\n  } = await supabase.from(TABLE_NAME).select('*').eq('user_id', userId);\n  if (error) throw error;\n  return (data || []).map(task => ({\n    ...task,\n    dueDate: task.dueDate ? new Date(task.dueDate) : null,\n    subTasks: task.subTasks || []\n  }));\n}\n\n// Helper: Check if string is a valid UUID (v4)\nexport function isValidUUID(id) {\n  return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);\n}\nexport async function upsertUserTasks(userId, tasks) {\n  // Attach user_id to each task and only include 'id' if it's a valid UUID\n  const tasksWithUser = tasks.map(task => {\n    const {\n      id,\n      ...rest\n    } = task;\n    return id && isValidUUID(id) ? {\n      ...rest,\n      id,\n      user_id: userId\n    } : {\n      ...rest,\n      user_id: userId\n    };\n  });\n  const {\n    error\n  } = await supabase.from(TABLE_NAME).upsert(tasksWithUser, {\n    onConflict: 'id'\n  });\n  if (error) throw error;\n}\nexport async function deleteUserTasks(userId) {\n  const {\n    error\n  } = await supabase.from(TABLE_NAME).delete().eq('user_id', userId);\n  if (error) throw error;\n}","map":{"version":3,"names":["supabase","TABLE_NAME","fetchUserTasks","userId","data","error","from","select","eq","map","task","dueDate","Date","subTasks","isValidUUID","id","test","upsertUserTasks","tasks","tasksWithUser","rest","user_id","upsert","onConflict","deleteUserTasks","delete"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/services/supabaseTasksService.ts"],"sourcesContent":["import { supabase } from './supabaseClient';\nimport { TaskWithSubTasks } from './geminiService';\n\nconst TABLE_NAME = 'tasks';\n\nexport async function fetchUserTasks(userId: string): Promise<TaskWithSubTasks[]> {\n  const { data, error } = await supabase\n    .from(TABLE_NAME)\n    .select('*')\n    .eq('user_id', userId);\n  if (error) throw error;\n  return (data || []).map(task => ({\n    ...task,\n    dueDate: task.dueDate ? new Date(task.dueDate) : null,\n    subTasks: task.subTasks || []\n  }));\n}\n\n// Helper: Check if string is a valid UUID (v4)\nexport function isValidUUID(id: string): boolean {\n  return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);\n}\n\nexport async function upsertUserTasks(userId: string, tasks: (Omit<TaskWithSubTasks, 'id'> & { id?: string })[]) {\n  // Attach user_id to each task and only include 'id' if it's a valid UUID\n  const tasksWithUser = tasks.map(task => {\n    const { id, ...rest } = task;\n    return id && isValidUUID(id)\n      ? { ...rest, id, user_id: userId }\n      : { ...rest, user_id: userId };\n  });\n  const { error } = await supabase\n    .from(TABLE_NAME)\n    .upsert(tasksWithUser, { onConflict: 'id' });\n  if (error) throw error;\n}\n\nexport async function deleteUserTasks(userId: string) {\n  const { error } = await supabase\n    .from(TABLE_NAME)\n    .delete()\n    .eq('user_id', userId);\n  if (error) throw error;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAG3C,MAAMC,UAAU,GAAG,OAAO;AAE1B,OAAO,eAAeC,cAAcA,CAACC,MAAc,EAA+B;EAChF,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAACL,UAAU,CAAC,CAChBM,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAEL,MAAM,CAAC;EACxB,IAAIE,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAO,CAACD,IAAI,IAAI,EAAE,EAAEK,GAAG,CAACC,IAAI,KAAK;IAC/B,GAAGA,IAAI;IACPC,OAAO,EAAED,IAAI,CAACC,OAAO,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACC,OAAO,CAAC,GAAG,IAAI;IACrDE,QAAQ,EAAEH,IAAI,CAACG,QAAQ,IAAI;EAC7B,CAAC,CAAC,CAAC;AACL;;AAEA;AACA,OAAO,SAASC,WAAWA,CAACC,EAAU,EAAW;EAC/C,OAAO,4EAA4E,CAACC,IAAI,CAACD,EAAE,CAAC;AAC9F;AAEA,OAAO,eAAeE,eAAeA,CAACd,MAAc,EAAEe,KAAyD,EAAE;EAC/G;EACA,MAAMC,aAAa,GAAGD,KAAK,CAACT,GAAG,CAACC,IAAI,IAAI;IACtC,MAAM;MAAEK,EAAE;MAAE,GAAGK;IAAK,CAAC,GAAGV,IAAI;IAC5B,OAAOK,EAAE,IAAID,WAAW,CAACC,EAAE,CAAC,GACxB;MAAE,GAAGK,IAAI;MAAEL,EAAE;MAAEM,OAAO,EAAElB;IAAO,CAAC,GAChC;MAAE,GAAGiB,IAAI;MAAEC,OAAO,EAAElB;IAAO,CAAC;EAClC,CAAC,CAAC;EACF,MAAM;IAAEE;EAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAACL,UAAU,CAAC,CAChBqB,MAAM,CAACH,aAAa,EAAE;IAAEI,UAAU,EAAE;EAAK,CAAC,CAAC;EAC9C,IAAIlB,KAAK,EAAE,MAAMA,KAAK;AACxB;AAEA,OAAO,eAAemB,eAAeA,CAACrB,MAAc,EAAE;EACpD,MAAM;IAAEE;EAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAACL,UAAU,CAAC,CAChBwB,MAAM,CAAC,CAAC,CACRjB,EAAE,CAAC,SAAS,EAAEL,MAAM,CAAC;EACxB,IAAIE,KAAK,EAAE,MAAMA,KAAK;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}