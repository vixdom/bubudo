{"ast":null,"code":"import{GoogleGenerativeAI}from\"@google/generative-ai\";// Define Interfaces\n// ==================================\n// --- PROMPT DEFINITIONS START ---\n// ==================================\n// --- Prompt A (Updated detailed prompt) ---\nconst PROMPT_A=taskTitle=>`\nYou are an AI assistant that breaks down any user-provided task into a minimal list of high-level, actionable subtasks, never exceeding five. For very simple tasks, you may omit subtasks entirely. The first subtask should usually be something that can be done in under ten minutes. Avoid detailed “how-to” steps; keep instructions high-level. If a subtask depends on another, add that subtask’s id to its dependsOn array.\n\nOutput Format\n\nReturn only a JSON array of subtask objects, where each object has:\n\n1. id: A string reflecting its order (e.g., \"1\", \"1.1\", \"2\", \"2.1\"). \n   - If a subtask depends on “1,” you could label it “1.1,” “1.2,” etc.\n2. title: A short description of the subtask.\n3. dependsOn: An array of the IDs this subtask depends on (empty if none).\n4. timeEstimate (optional but recommended): A short approximate time estimate (e.g., “~5 minutes,” “1–2 hours,” etc.) Use your best judgement on estimating this effort.\n\nPlease remember:\n• Do not exceed five subtasks in total.\n• Omit subtasks entirely if the task is so simple that none are needed.\n• Return the response exclusively as valid JSON according to the specified structure, with no additional text.\n\nTask: ${taskTitle}\n`;// --- Prompt B (New minimal prompt) ---\nconst PROMPT_B=taskTitle=>`\nYou are an AI assistant integrated into a task-manager application. Your primary role is to help users break down a task into a *minimal* number of manageable, high-level sub-tasks. These sub-tasks should guide the user through the *process* of completion, not the specific micro-steps.\n\n**Goal:** Given a user-provided task, analyze its complexity. If the task is complex enough to warrant breakdown, generate a minimal list of actionable, high-level sub-tasks (typically 1 to 5). For very simple, single-action tasks, state that no further breakdown is needed or provide just one step if appropriate.\n\n**Task from User:** ${taskTitle}\n\n**Instructions for Generating Sub-tasks:**\n1.  **Assess Task Complexity:** First, evaluate if the task ${taskTitle} is simple enough to be done as a single action (e.g., 'Take out the trash', 'Reply Yes to the invite') or if it benefits from being broken down.\n    *   If **very simple:** Respond with a single JSON object in the array like: '[{\"title\": \"No breakdown needed / Single Step\", \"estimatedTime\": \"\"}]'. Do *not* proceed further with breakdown steps.\n    *   If **complex enough:** Proceed with the following steps.\n2.  **Identify Key Phases:** Break down the task into the essential, logical phases needed for completion (e.g., Planning/Research, Preparation/Gathering, Execution, Review/Finalization). Aim for the *fewest* distinct phases necessary.\n3.  **Formulate Minimal Sub-tasks:** Create a list of sub-tasks based on these essential phases.\n    *   **Minimize:** Only include distinct phases that represent a meaningful shift in activity or focus. Combine steps where logical. Aim for 1-5 sub-tasks maximum.\n    *   **Keep them High-Level:** Focus on *what* needs to be done, not the detailed step-by-step instructions.\n    *   **Action-Oriented:** Start each sub-task with a verb (e.g., \"Research...\", \"Gather...\", \"Draft...\", \"Execute...\", \"Review...\").\n    *   **Non-Prescriptive:** Avoid overly detailed instructions. Guide, don't micromanage.\n    *   **Customized:** Ensure sub-tasks are directly relevant to the user's specific task ${taskTitle}.\n4.  **Estimate Time:** For each generated sub-task, provide a rough, estimated time commitment (e.g., \"~5 mins\", \"~30 mins\", \"~1-2 hours\").\n5.  **Add \"Guide Me\" Links:** For *each* generated sub-task, add a helpful link to assist the user, embedded *within the title string*. This should ideally be:\n    *   A relevant **Google Search query:** '[Guide Me: Search 'how to X']'\n    *   A relevant **Youtube query:** '[Guide Me: Youtube 'tutorial for Y']'\n    *   A suggestion for a **type of tool or app:** '[Guide Me: Use a Calendar App]' or '[Guide Me: Check Grocery/Shopping App]'\n    *   Choose the most appropriate type of link for the specific sub-task.\n6.  **Format Output:** Ensure the final response is *strictly* JSON formatted as follows, containing the list of sub-tasks (or the single \"no breakdown needed\" entry):\n\nFormat your response strictly as JSON with this structure:\n[\n  {\n    \"title\": \"Minimal, high-level sub-task description including [Guide Me: ...]\",\n    \"estimatedTime\": \"~X mins/hrs\"\n  }\n]\n`;// ==================================\n// --- PROMPT DEFINITIONS END ---\n// ==================================\n// --- Service Initialization ---\nconst API_KEY=process.env.REACT_APP_GEMINI_API_KEY;if(!API_KEY){console.error(\"CRITICAL ERROR: Missing REACT_APP_GEMINI_API_KEY environment variable.\");}const geminiService=API_KEY?new GoogleGenerativeAI(API_KEY):null;// --- API Call Function ---\n// Type for selecting prompt\n// *** IMPORTANT: Ensure breakDownTask function is updated like this ***\nexport async function breakDownTask(taskTitle,promptVersion){if(!geminiService){console.error(\"Gemini service not initialized due to missing API key.\");throw new Error(\"API Key configuration error. Cannot contact AI service.\");}try{const genAI=geminiService;const model=genAI.getGenerativeModel({model:\"gemini-1.5-flash\"});// Select the prompt based on the argument\nlet prompt;switch(promptVersion){case'A':prompt=PROMPT_A(taskTitle);break;case'B':prompt=PROMPT_B(taskTitle);break;default:console.warn(`Unknown prompt version '${promptVersion}', defaulting to A.`);prompt=PROMPT_A(taskTitle);}console.log(`Using Prompt ${promptVersion} for task: \"${taskTitle}\"`);// Log which prompt is used\nconst result=await model.generateContent(prompt);const response=await result.response;let text=await response.text();// Clean the response text\ntext=text.replace(/```json\\n?|```/g,'').trim();console.log(\"Cleaned Gemini Response:\",text);// Now expecting pure JSON output from Gemini (Prompt A updated)\nlet parsedSubtasks;// Extract JSON array from the response (find first [ and last ])\nconst jsonStart=text.indexOf('[');const jsonEnd=text.lastIndexOf(']');if(jsonStart!==-1&&jsonEnd!==-1&&jsonEnd>jsonStart){const jsonStr=text.substring(jsonStart,jsonEnd+1);try{parsedSubtasks=JSON.parse(jsonStr);// Add unique IDs and ensure completed status is false\nparsedSubtasks=parsedSubtasks.map(subtask=>({...subtask,dependsOn:Array.isArray(subtask.dependsOn)?subtask.dependsOn:[],completed:false,uuid:Date.now().toString()+Math.random().toString(36).substring(2,9)// for React key if needed\n}));}catch(parseError){console.error(\"Failed to parse Gemini JSON substring:\",parseError,\"Raw JSON:\",jsonStr);// Handle the \"no breakdown needed\" case from Prompt B gracefully\nif(text.includes(\"No breakdown needed\")||text.includes(\"task seems straightforward\")){console.log(\"Detected 'no breakdown needed' response type.\");return[{id:Date.now().toString()+Math.random().toString(36).substring(2,9),title:\"No breakdown needed / Simple task\",completed:false,dependsOn:[],estimatedTime:\"\"}];}throw new Error('Failed to parse task breakdown response');}}else{// If no JSON found, handle as before\nconsole.error(\"No JSON array found in Gemini response.\");if(text.includes(\"No breakdown needed\")||text.includes(\"task seems straightforward\")){return[{id:Date.now().toString()+Math.random().toString(36).substring(2,9),title:\"No breakdown needed / Simple task\",completed:false,dependsOn:[],estimatedTime:\"\"}];}throw new Error('Failed to parse task breakdown response');}console.log(\"Parsed Subtasks:\",parsedSubtasks);return parsedSubtasks;}catch(error){console.error(\"Error breaking down task:\",error);if(error instanceof Error&&error.message.includes(\"API key not valid\")){throw new Error('Invalid API Key. Please check your .env file and Google AI Studio settings.');}if(error instanceof Error&&error.message.includes(\"400\")){console.error(\"Potential issue with prompt or model request.\");throw new Error('Error processing task breakdown with AI. Check console for details.');}throw new Error('Failed to break down task');}}","map":{"version":3,"names":["GoogleGenerativeAI","PROMPT_A","taskTitle","PROMPT_B","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","console","error","geminiService","breakDownTask","promptVersion","Error","genAI","model","getGenerativeModel","prompt","warn","log","result","generateContent","response","text","replace","trim","parsedSubtasks","jsonStart","indexOf","jsonEnd","lastIndexOf","jsonStr","substring","JSON","parse","map","subtask","dependsOn","Array","isArray","completed","uuid","Date","now","toString","Math","random","parseError","includes","id","title","estimatedTime","message"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Define Interfaces\nexport interface Task {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nexport interface SubTask {\n  id: string; // Added unique ID\n  title: string;\n  completed: boolean;\n  dependsOn: (string | number)[]; // Added dependency array\n  estimatedTime?: string; // Optional estimated time\n}\n\nexport interface TaskWithSubTasks extends Task {\n  subTasks: SubTask[];\n  totalEstimatedTime?: string; // Added total estimated time for the main task\n  dueDate?: Date | null;         // Added due date\n}\n\n// ==================================\n// --- PROMPT DEFINITIONS START ---\n// ==================================\n\n// --- Prompt A (Updated detailed prompt) ---\nconst PROMPT_A = (taskTitle: string) => `\nYou are an AI assistant that breaks down any user-provided task into a minimal list of high-level, actionable subtasks, never exceeding five. For very simple tasks, you may omit subtasks entirely. The first subtask should usually be something that can be done in under ten minutes. Avoid detailed “how-to” steps; keep instructions high-level. If a subtask depends on another, add that subtask’s id to its dependsOn array.\n\nOutput Format\n\nReturn only a JSON array of subtask objects, where each object has:\n\n1. id: A string reflecting its order (e.g., \"1\", \"1.1\", \"2\", \"2.1\"). \n   - If a subtask depends on “1,” you could label it “1.1,” “1.2,” etc.\n2. title: A short description of the subtask.\n3. dependsOn: An array of the IDs this subtask depends on (empty if none).\n4. timeEstimate (optional but recommended): A short approximate time estimate (e.g., “~5 minutes,” “1–2 hours,” etc.) Use your best judgement on estimating this effort.\n\nPlease remember:\n• Do not exceed five subtasks in total.\n• Omit subtasks entirely if the task is so simple that none are needed.\n• Return the response exclusively as valid JSON according to the specified structure, with no additional text.\n\nTask: ${taskTitle}\n`;\n\n// --- Prompt B (New minimal prompt) ---\nconst PROMPT_B = (taskTitle: string) => `\nYou are an AI assistant integrated into a task-manager application. Your primary role is to help users break down a task into a *minimal* number of manageable, high-level sub-tasks. These sub-tasks should guide the user through the *process* of completion, not the specific micro-steps.\n\n**Goal:** Given a user-provided task, analyze its complexity. If the task is complex enough to warrant breakdown, generate a minimal list of actionable, high-level sub-tasks (typically 1 to 5). For very simple, single-action tasks, state that no further breakdown is needed or provide just one step if appropriate.\n\n**Task from User:** ${taskTitle}\n\n**Instructions for Generating Sub-tasks:**\n1.  **Assess Task Complexity:** First, evaluate if the task ${taskTitle} is simple enough to be done as a single action (e.g., 'Take out the trash', 'Reply Yes to the invite') or if it benefits from being broken down.\n    *   If **very simple:** Respond with a single JSON object in the array like: '[{\"title\": \"No breakdown needed / Single Step\", \"estimatedTime\": \"\"}]'. Do *not* proceed further with breakdown steps.\n    *   If **complex enough:** Proceed with the following steps.\n2.  **Identify Key Phases:** Break down the task into the essential, logical phases needed for completion (e.g., Planning/Research, Preparation/Gathering, Execution, Review/Finalization). Aim for the *fewest* distinct phases necessary.\n3.  **Formulate Minimal Sub-tasks:** Create a list of sub-tasks based on these essential phases.\n    *   **Minimize:** Only include distinct phases that represent a meaningful shift in activity or focus. Combine steps where logical. Aim for 1-5 sub-tasks maximum.\n    *   **Keep them High-Level:** Focus on *what* needs to be done, not the detailed step-by-step instructions.\n    *   **Action-Oriented:** Start each sub-task with a verb (e.g., \"Research...\", \"Gather...\", \"Draft...\", \"Execute...\", \"Review...\").\n    *   **Non-Prescriptive:** Avoid overly detailed instructions. Guide, don't micromanage.\n    *   **Customized:** Ensure sub-tasks are directly relevant to the user's specific task ${taskTitle}.\n4.  **Estimate Time:** For each generated sub-task, provide a rough, estimated time commitment (e.g., \"~5 mins\", \"~30 mins\", \"~1-2 hours\").\n5.  **Add \"Guide Me\" Links:** For *each* generated sub-task, add a helpful link to assist the user, embedded *within the title string*. This should ideally be:\n    *   A relevant **Google Search query:** '[Guide Me: Search 'how to X']'\n    *   A relevant **Youtube query:** '[Guide Me: Youtube 'tutorial for Y']'\n    *   A suggestion for a **type of tool or app:** '[Guide Me: Use a Calendar App]' or '[Guide Me: Check Grocery/Shopping App]'\n    *   Choose the most appropriate type of link for the specific sub-task.\n6.  **Format Output:** Ensure the final response is *strictly* JSON formatted as follows, containing the list of sub-tasks (or the single \"no breakdown needed\" entry):\n\nFormat your response strictly as JSON with this structure:\n[\n  {\n    \"title\": \"Minimal, high-level sub-task description including [Guide Me: ...]\",\n    \"estimatedTime\": \"~X mins/hrs\"\n  }\n]\n`;\n\n\n// ==================================\n// --- PROMPT DEFINITIONS END ---\n// ==================================\n\n\n// --- Service Initialization ---\n\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\nif (!API_KEY) {\n  console.error(\"CRITICAL ERROR: Missing REACT_APP_GEMINI_API_KEY environment variable.\");\n}\n\nconst geminiService = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;\n\n// --- API Call Function ---\n\nexport type PromptSelection = 'A' | 'B'; // Type for selecting prompt\n\n// *** IMPORTANT: Ensure breakDownTask function is updated like this ***\nexport async function breakDownTask(\n  taskTitle: string,\n  promptVersion: PromptSelection // Added parameter to select prompt\n): Promise<SubTask[]> {\n  if (!geminiService) {\n    console.error(\"Gemini service not initialized due to missing API key.\");\n    throw new Error(\"API Key configuration error. Cannot contact AI service.\");\n  }\n\n  try {\n    const genAI = geminiService;\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\",\n    });\n\n    // Select the prompt based on the argument\n    let prompt: string;\n    switch (promptVersion) {\n      case 'A':\n        prompt = PROMPT_A(taskTitle);\n        break;\n      case 'B':\n        prompt = PROMPT_B(taskTitle);\n        break;\n      default:\n        console.warn(`Unknown prompt version '${promptVersion}', defaulting to A.`);\n        prompt = PROMPT_A(taskTitle);\n    }\n\n    console.log(`Using Prompt ${promptVersion} for task: \"${taskTitle}\"`); // Log which prompt is used\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    let text = await response.text();\n\n    // Clean the response text\n    text = text.replace(/```json\\n?|```/g, '').trim();\n    console.log(\"Cleaned Gemini Response:\", text);\n\n    // Now expecting pure JSON output from Gemini (Prompt A updated)\n    let parsedSubtasks: SubTask[];\n    // Extract JSON array from the response (find first [ and last ])\n    const jsonStart = text.indexOf('[');\n    const jsonEnd = text.lastIndexOf(']');\n    if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n      const jsonStr = text.substring(jsonStart, jsonEnd + 1);\n      try {\n        parsedSubtasks = JSON.parse(jsonStr);\n        // Add unique IDs and ensure completed status is false\n        parsedSubtasks = parsedSubtasks.map(subtask => ({\n          ...subtask,\n          dependsOn: Array.isArray(subtask.dependsOn) ? subtask.dependsOn : [],\n          completed: false,\n          uuid: Date.now().toString() + Math.random().toString(36).substring(2, 9) // for React key if needed\n        }));\n      } catch (parseError) {\n        console.error(\"Failed to parse Gemini JSON substring:\", parseError, \"Raw JSON:\", jsonStr);\n        // Handle the \"no breakdown needed\" case from Prompt B gracefully\n        if (text.includes(\"No breakdown needed\") || text.includes(\"task seems straightforward\")) {\n          console.log(\"Detected 'no breakdown needed' response type.\");\n          return [{\n            id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n            title: \"No breakdown needed / Simple task\",\n            completed: false,\n            dependsOn: [],\n            estimatedTime: \"\"\n          }];\n        }\n        throw new Error('Failed to parse task breakdown response');\n      }\n    } else {\n      // If no JSON found, handle as before\n      console.error(\"No JSON array found in Gemini response.\");\n      if (text.includes(\"No breakdown needed\") || text.includes(\"task seems straightforward\")) {\n        return [{\n          id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n          title: \"No breakdown needed / Simple task\",\n          completed: false,\n          dependsOn: [],\n          estimatedTime: \"\"\n        }];\n      }\n      throw new Error('Failed to parse task breakdown response');\n    }\n\n    console.log(\"Parsed Subtasks:\", parsedSubtasks);\n    return parsedSubtasks;\n  } catch (error) {\n    console.error(\"Error breaking down task:\", error);\n    if (error instanceof Error && error.message.includes(\"API key not valid\")) {\n      throw new Error('Invalid API Key. Please check your .env file and Google AI Studio settings.');\n    }\n    if (error instanceof Error && error.message.includes(\"400\")) {\n      console.error(\"Potential issue with prompt or model request.\");\n      throw new Error('Error processing task breakdown with AI. Check console for details.');\n    }\n    throw new Error('Failed to break down task');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}