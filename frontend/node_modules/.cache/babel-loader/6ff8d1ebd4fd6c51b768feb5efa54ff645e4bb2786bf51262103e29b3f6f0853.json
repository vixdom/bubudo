{"ast":null,"code":"import { TIME_UNITS_PATTERN, parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits.js\";\nconst PATTERN = new RegExp(`(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\nconst PATTERN_NO_ABBR = new RegExp(`(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_NO_ABBR_PATTERN})(?=\\\\W|$)`, \"i\");\nexport default class ENTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n  constructor(allowAbbreviations = true) {\n    super();\n    this.allowAbbreviations = allowAbbreviations;\n  }\n  innerPattern() {\n    return this.allowAbbreviations ? PATTERN : PATTERN_NO_ABBR;\n  }\n  innerExtract(context, match) {\n    const prefix = match[1].toLowerCase();\n    let timeUnits = parseTimeUnits(match[2]);\n    if (!timeUnits) {\n      return null;\n    }\n    switch (prefix) {\n      case \"last\":\n      case \"past\":\n      case \"-\":\n        timeUnits = reverseTimeUnits(timeUnits);\n        break;\n    }\n    return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n  }\n}","map":{"version":3,"names":["TIME_UNITS_PATTERN","parseTimeUnits","TIME_UNITS_NO_ABBR_PATTERN","ParsingComponents","AbstractParserWithWordBoundaryChecking","reverseTimeUnits","PATTERN","RegExp","PATTERN_NO_ABBR","ENTimeUnitCasualRelativeFormatParser","constructor","allowAbbreviations","innerPattern","innerExtract","context","match","prefix","toLowerCase","timeUnits","createRelativeFromReference","reference"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.ts"],"sourcesContent":["import { TIME_UNITS_PATTERN, parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\nconst PATTERN_NO_ABBR = new RegExp(\n    `(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_NO_ABBR_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nexport default class ENTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private allowAbbreviations: boolean = true) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.allowAbbreviations ? PATTERN : PATTERN_NO_ABBR;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const prefix = match[1].toLowerCase();\n        let timeUnits = parseTimeUnits(match[2]);\n        if (!timeUnits) {\n            return null;\n        }\n        switch (prefix) {\n            case \"last\":\n            case \"past\":\n            case \"-\":\n                timeUnits = reverseTimeUnits(timeUnits);\n                break;\n        }\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,cAAc,EAAEC,0BAA0B,QAAQ,iBAAe;AAE9F,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,gBAAgB,QAAQ,6BAA2B;AAE5D,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAAC,yCAAyCP,kBAAkB,YAAY,EAAE,GAAG,CAAC;AACxG,MAAMQ,eAAe,GAAG,IAAID,MAAM,CAC9B,yCAAyCL,0BAA0B,YAAY,EAC/E,GAAG,CACN;AAED,eAAc,MAAOO,oCAAqC,SAAQL,sCAAsC;EACpGM,YAAoBC,kBAAA,GAA8B,IAAI;IAClD,KAAK,EAAE;IADS,KAAAA,kBAAkB,GAAlBA,kBAAkB;EAEtC;EAEAC,YAAYA,CAAA;IACR,OAAO,IAAI,CAACD,kBAAkB,GAAGL,OAAO,GAAGE,eAAe;EAC9D;EAEAK,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,MAAM,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE;IACrC,IAAIC,SAAS,GAAGjB,cAAc,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC;IACxC,IAAI,CAACG,SAAS,EAAE;MACZ,OAAO,IAAI;;IAEf,QAAQF,MAAM;MACV,KAAK,MAAM;MACX,KAAK,MAAM;MACX,KAAK,GAAG;QACJE,SAAS,GAAGb,gBAAgB,CAACa,SAAS,CAAC;QACvC;;IAER,OAAOf,iBAAiB,CAACgB,2BAA2B,CAACL,OAAO,CAACM,SAAS,EAAEF,SAAS,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}