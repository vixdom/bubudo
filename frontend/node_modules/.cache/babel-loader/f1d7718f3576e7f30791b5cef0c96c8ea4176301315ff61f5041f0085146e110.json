{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nexport const geminiService = new GoogleGenerativeAI(GEMINI_API_KEY);\nexport const breakDownTask = async task => {\n  try {\n    const model = geminiService.getGenerativeModel({\n      model: 'gemini-pro'\n    });\n    const prompt = `\n    Break down the following task into 3-5 actionable sub-tasks that are specific, measurable, achievable, relevant, and time-bound (SMART).\n    For each sub-task, provide a rough estimate of how long it would take to complete in minutes.\n    \n    Task: ${task}\n    \n    Format your response as JSON with this structure:\n    [\n      {\n        \"title\": \"Sub-task description\",\n        \"estimatedTime\": \"X minutes\"\n      }\n    ]\n    `;\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = await response.text();\n    try {\n      const parsed = JSON.parse(text);\n      return parsed.map((subtask, index) => ({\n        id: `${Date.now()}-${index}`,\n        title: subtask.title,\n        estimatedTime: subtask.estimatedTime,\n        completed: false\n      }));\n    } catch (error) {\n      console.error('Failed to parse Gemini response:', error);\n      throw new Error('Failed to parse task breakdown response');\n    }\n  } catch (error) {\n    console.error('Error breaking down task:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","GEMINI_API_KEY","process","env","REACT_APP_GEMINI_API_KEY","geminiService","breakDownTask","task","model","getGenerativeModel","prompt","result","generateContent","response","text","parsed","JSON","parse","map","subtask","index","id","Date","now","title","estimatedTime","completed","error","console","Error"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\n\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\nexport const geminiService = new GoogleGenerativeAI(GEMINI_API_KEY);\n\nexport interface SubTask {\n  id: string;\n  title: string;\n  estimatedTime: string;\n  completed: boolean;\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nexport interface TaskWithSubTasks extends Task {\n  subTasks: SubTask[];\n}\n\nexport const breakDownTask = async (task: string): Promise<SubTask[]> => {\n  try {\n    const model = geminiService.getGenerativeModel({ model: 'gemini-pro' });\n    \n    const prompt = `\n    Break down the following task into 3-5 actionable sub-tasks that are specific, measurable, achievable, relevant, and time-bound (SMART).\n    For each sub-task, provide a rough estimate of how long it would take to complete in minutes.\n    \n    Task: ${task}\n    \n    Format your response as JSON with this structure:\n    [\n      {\n        \"title\": \"Sub-task description\",\n        \"estimatedTime\": \"X minutes\"\n      }\n    ]\n    `;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = await response.text();\n    \n    try {\n      const parsed = JSON.parse(text);\n      return parsed.map((subtask: any, index: number) => ({\n        id: `${Date.now()}-${index}`,\n        title: subtask.title,\n        estimatedTime: subtask.estimatedTime,\n        completed: false\n      }));\n    } catch (error) {\n      console.error('Failed to parse Gemini response:', error);\n      throw new Error('Failed to parse task breakdown response');\n    }\n  } catch (error) {\n    console.error('Error breaking down task:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAE3D,OAAO,MAAMC,aAAa,GAAG,IAAIL,kBAAkB,CAACC,cAAc,CAAC;AAmBnE,OAAO,MAAMK,aAAa,GAAG,MAAOC,IAAY,IAAyB;EACvE,IAAI;IACF,MAAMC,KAAK,GAAGH,aAAa,CAACI,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAa,CAAC,CAAC;IAEvE,MAAME,MAAM,GAAG;AACnB;AACA;AACA;AACA,YAAYH,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMI,MAAM,GAAG,MAAMH,KAAK,CAACI,eAAe,CAACF,MAAM,CAAC;IAClD,MAAMG,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;IACtC,MAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAI,CAAC,CAAC;IAElC,IAAI;MACF,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MAC/B,OAAOC,MAAM,CAACG,GAAG,CAAC,CAACC,OAAY,EAAEC,KAAa,MAAM;QAClDC,EAAE,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIH,KAAK,EAAE;QAC5BI,KAAK,EAAEL,OAAO,CAACK,KAAK;QACpBC,aAAa,EAAEN,OAAO,CAACM,aAAa;QACpCC,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAM,IAAIE,KAAK,CAAC,yCAAyC,CAAC;IAC5D;EACF,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}