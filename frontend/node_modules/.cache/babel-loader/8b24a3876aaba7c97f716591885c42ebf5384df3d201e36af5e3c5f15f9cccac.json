{"ast":null,"code":"export function reverseTimeUnits(timeUnits) {\n  const reversed = {};\n  for (const key in timeUnits) {\n    reversed[key] = -timeUnits[key];\n  }\n  return reversed;\n}\nexport function addImpliedTimeUnits(components, timeUnits) {\n  const output = components.clone();\n  let date = components.dayjs();\n  for (const key in timeUnits) {\n    date = date.add(timeUnits[key], key);\n  }\n  if (\"day\" in timeUnits || \"d\" in timeUnits || \"week\" in timeUnits || \"month\" in timeUnits || \"year\" in timeUnits) {\n    output.imply(\"day\", date.date());\n    output.imply(\"month\", date.month() + 1);\n    output.imply(\"year\", date.year());\n  }\n  if (\"second\" in timeUnits || \"minute\" in timeUnits || \"hour\" in timeUnits) {\n    output.imply(\"second\", date.second());\n    output.imply(\"minute\", date.minute());\n    output.imply(\"hour\", date.hour());\n  }\n  return output;\n}","map":{"version":3,"names":["reverseTimeUnits","timeUnits","reversed","key","addImpliedTimeUnits","components","output","clone","date","dayjs","add","imply","month","year","second","minute","hour"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/utils/timeunits.ts"],"sourcesContent":["import { OpUnitType, QUnitType } from \"dayjs\";\nimport { ParsingComponents } from \"../results\";\n\nexport type TimeUnits = { [c in OpUnitType | QUnitType]?: number };\n\nexport function reverseTimeUnits(timeUnits: TimeUnits): TimeUnits {\n    const reversed = {};\n    for (const key in timeUnits) {\n        // noinspection JSUnfilteredForInLoop\n        reversed[key] = -timeUnits[key];\n    }\n\n    return reversed as TimeUnits;\n}\n\nexport function addImpliedTimeUnits(components: ParsingComponents, timeUnits: TimeUnits): ParsingComponents {\n    const output = components.clone();\n\n    let date = components.dayjs();\n    for (const key in timeUnits) {\n        // noinspection JSUnfilteredForInLoop,TypeScriptValidateTypes\n        date = date.add(timeUnits[key], key as QUnitType);\n    }\n\n    if (\"day\" in timeUnits || \"d\" in timeUnits || \"week\" in timeUnits || \"month\" in timeUnits || \"year\" in timeUnits) {\n        output.imply(\"day\", date.date());\n        output.imply(\"month\", date.month() + 1);\n        output.imply(\"year\", date.year());\n    }\n\n    if (\"second\" in timeUnits || \"minute\" in timeUnits || \"hour\" in timeUnits) {\n        output.imply(\"second\", date.second());\n        output.imply(\"minute\", date.minute());\n        output.imply(\"hour\", date.hour());\n    }\n\n    return output;\n}\n"],"mappings":"AAKA,OAAM,SAAUA,gBAAgBA,CAACC,SAAoB;EACjD,MAAMC,QAAQ,GAAG,EAAE;EACnB,KAAK,MAAMC,GAAG,IAAIF,SAAS,EAAE;IAEzBC,QAAQ,CAACC,GAAG,CAAC,GAAG,CAACF,SAAS,CAACE,GAAG,CAAC;;EAGnC,OAAOD,QAAqB;AAChC;AAEA,OAAM,SAAUE,mBAAmBA,CAACC,UAA6B,EAAEJ,SAAoB;EACnF,MAAMK,MAAM,GAAGD,UAAU,CAACE,KAAK,EAAE;EAEjC,IAAIC,IAAI,GAAGH,UAAU,CAACI,KAAK,EAAE;EAC7B,KAAK,MAAMN,GAAG,IAAIF,SAAS,EAAE;IAEzBO,IAAI,GAAGA,IAAI,CAACE,GAAG,CAACT,SAAS,CAACE,GAAG,CAAC,EAAEA,GAAgB,CAAC;;EAGrD,IAAI,KAAK,IAAIF,SAAS,IAAI,GAAG,IAAIA,SAAS,IAAI,MAAM,IAAIA,SAAS,IAAI,OAAO,IAAIA,SAAS,IAAI,MAAM,IAAIA,SAAS,EAAE;IAC9GK,MAAM,CAACK,KAAK,CAAC,KAAK,EAAEH,IAAI,CAACA,IAAI,EAAE,CAAC;IAChCF,MAAM,CAACK,KAAK,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,EAAE,GAAG,CAAC,CAAC;IACvCN,MAAM,CAACK,KAAK,CAAC,MAAM,EAAEH,IAAI,CAACK,IAAI,EAAE,CAAC;;EAGrC,IAAI,QAAQ,IAAIZ,SAAS,IAAI,QAAQ,IAAIA,SAAS,IAAI,MAAM,IAAIA,SAAS,EAAE;IACvEK,MAAM,CAACK,KAAK,CAAC,QAAQ,EAAEH,IAAI,CAACM,MAAM,EAAE,CAAC;IACrCR,MAAM,CAACK,KAAK,CAAC,QAAQ,EAAEH,IAAI,CAACO,MAAM,EAAE,CAAC;IACrCT,MAAM,CAACK,KAAK,CAAC,MAAM,EAAEH,IAAI,CAACQ,IAAI,EAAE,CAAC;;EAGrC,OAAOV,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}