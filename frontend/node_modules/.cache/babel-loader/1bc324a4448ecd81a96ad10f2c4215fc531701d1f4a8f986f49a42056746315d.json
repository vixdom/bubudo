{"ast":null,"code":"import { MONTH_DICTIONARY } from \"../constants.js\";\nimport { matchAnyPattern } from \"../../../utils/pattern.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nconst PATTERN = new RegExp(`([0-9]{4})[\\\\.\\\\/\\\\s]` + `(?:(${matchAnyPattern(MONTH_DICTIONARY)})|([0-9]{1,2}))[\\\\.\\\\/\\\\s]` + `([0-9]{1,2})` + \"(?=\\\\W|$)\", \"i\");\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst MONTH_NUMBER_GROUP = 3;\nconst DATE_NUMBER_GROUP = 4;\nexport default class NLCasualYearMonthDayParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const month = match[MONTH_NUMBER_GROUP] ? parseInt(match[MONTH_NUMBER_GROUP]) : MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n    if (month < 1 || month > 12) {\n      return null;\n    }\n    const year = parseInt(match[YEAR_NUMBER_GROUP]);\n    const day = parseInt(match[DATE_NUMBER_GROUP]);\n    return {\n      day: day,\n      month: month,\n      year: year\n    };\n  }\n}","map":{"version":3,"names":["MONTH_DICTIONARY","matchAnyPattern","AbstractParserWithWordBoundaryChecking","PATTERN","RegExp","YEAR_NUMBER_GROUP","MONTH_NAME_GROUP","MONTH_NUMBER_GROUP","DATE_NUMBER_GROUP","NLCasualYearMonthDayParser","innerPattern","innerExtract","context","match","month","parseInt","toLowerCase","year","day"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/parsers/NLCasualYearMonthDayParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n/*\n    Date format with slash \"/\" between numbers like ENSlashDateFormatParser,\n    but this parser expect year before month and date.\n    - YYYY/MM/DD\n    - YYYY-MM-DD\n    - YYYY.MM.DD\n*/\nconst PATTERN = new RegExp(\n    `([0-9]{4})[\\\\.\\\\/\\\\s]` +\n        `(?:(${matchAnyPattern(MONTH_DICTIONARY)})|([0-9]{1,2}))[\\\\.\\\\/\\\\s]` +\n        `([0-9]{1,2})` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst MONTH_NUMBER_GROUP = 3;\nconst DATE_NUMBER_GROUP = 4;\n\nexport default class NLCasualYearMonthDayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = match[MONTH_NUMBER_GROUP]\n            ? parseInt(match[MONTH_NUMBER_GROUP])\n            : MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n\n        if (month < 1 || month > 12) {\n            return null;\n        }\n\n        const year = parseInt(match[YEAR_NUMBER_GROUP]);\n        const day = parseInt(match[DATE_NUMBER_GROUP]);\n\n        return {\n            day: day,\n            month: month,\n            year: year,\n        };\n    }\n}\n"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,iBAAe;AAChD,SAASC,eAAe,QAAQ,2BAAyB;AACzD,SAASC,sCAAsC,QAAQ,2DAAyD;AAShH,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,uBAAuB,GACnB,OAAOH,eAAe,CAACD,gBAAgB,CAAC,4BAA4B,GACpE,cAAc,GACd,WAAW,EACf,GAAG,CACN;AAED,MAAMK,iBAAiB,GAAG,CAAC;AAC3B,MAAMC,gBAAgB,GAAG,CAAC;AAC1B,MAAMC,kBAAkB,GAAG,CAAC;AAC5B,MAAMC,iBAAiB,GAAG,CAAC;AAE3B,eAAc,MAAOC,0BAA2B,SAAQP,sCAAsC;EAC1FQ,YAAYA,CAAA;IACR,OAAOP,OAAO;EAClB;EAEAQ,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,KAAK,GAAGD,KAAK,CAACN,kBAAkB,CAAC,GACjCQ,QAAQ,CAACF,KAAK,CAACN,kBAAkB,CAAC,CAAC,GACnCP,gBAAgB,CAACa,KAAK,CAACP,gBAAgB,CAAC,CAACU,WAAW,EAAE,CAAC;IAE7D,IAAIF,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE;MACzB,OAAO,IAAI;;IAGf,MAAMG,IAAI,GAAGF,QAAQ,CAACF,KAAK,CAACR,iBAAiB,CAAC,CAAC;IAC/C,MAAMa,GAAG,GAAGH,QAAQ,CAACF,KAAK,CAACL,iBAAiB,CAAC,CAAC;IAE9C,OAAO;MACHU,GAAG,EAAEA,GAAG;MACRJ,KAAK,EAAEA,KAAK;MACZG,IAAI,EAAEA;KACT;EACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}