{"ast":null,"code":"const TIMEZONE_OFFSET_PATTERN = new RegExp(\"^\\\\s*(?:\\\\(?(?:GMT|UTC)\\\\s?)?([+-])(\\\\d{1,2})(?::?(\\\\d{2}))?\\\\)?\", \"i\");\nconst TIMEZONE_OFFSET_SIGN_GROUP = 1;\nconst TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 2;\nconst TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 3;\nexport default class ExtractTimezoneOffsetRefiner {\n  refine(context, results) {\n    results.forEach(function (result) {\n      if (result.start.isCertain(\"timezoneOffset\")) {\n        return;\n      }\n      const suffix = context.text.substring(result.index + result.text.length);\n      const match = TIMEZONE_OFFSET_PATTERN.exec(suffix);\n      if (!match) {\n        return;\n      }\n      context.debug(() => {\n        console.log(`Extracting timezone: '${match[0]}' into : ${result}`);\n      });\n      const hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);\n      const minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP] || \"0\");\n      let timezoneOffset = hourOffset * 60 + minuteOffset;\n      if (timezoneOffset > 14 * 60) {\n        return;\n      }\n      if (match[TIMEZONE_OFFSET_SIGN_GROUP] === \"-\") {\n        timezoneOffset = -timezoneOffset;\n      }\n      if (result.end != null) {\n        result.end.assign(\"timezoneOffset\", timezoneOffset);\n      }\n      result.start.assign(\"timezoneOffset\", timezoneOffset);\n      result.text += match[0];\n    });\n    return results;\n  }\n}","map":{"version":3,"names":["TIMEZONE_OFFSET_PATTERN","RegExp","TIMEZONE_OFFSET_SIGN_GROUP","TIMEZONE_OFFSET_HOUR_OFFSET_GROUP","TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP","ExtractTimezoneOffsetRefiner","refine","context","results","forEach","result","start","isCertain","suffix","text","substring","index","length","match","exec","debug","console","log","hourOffset","parseInt","minuteOffset","timezoneOffset","end","assign"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/common/refiners/ExtractTimezoneOffsetRefiner.ts"],"sourcesContent":["import { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nconst TIMEZONE_OFFSET_PATTERN = new RegExp(\"^\\\\s*(?:\\\\(?(?:GMT|UTC)\\\\s?)?([+-])(\\\\d{1,2})(?::?(\\\\d{2}))?\\\\)?\", \"i\");\nconst TIMEZONE_OFFSET_SIGN_GROUP = 1;\nconst TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 2;\nconst TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 3;\n\nexport default class ExtractTimezoneOffsetRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        results.forEach(function (result) {\n            if (result.start.isCertain(\"timezoneOffset\")) {\n                return;\n            }\n\n            const suffix = context.text.substring(result.index + result.text.length);\n            const match = TIMEZONE_OFFSET_PATTERN.exec(suffix);\n            if (!match) {\n                return;\n            }\n\n            context.debug(() => {\n                console.log(`Extracting timezone: '${match[0]}' into : ${result}`);\n            });\n\n            const hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);\n            const minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP] || \"0\");\n            let timezoneOffset = hourOffset * 60 + minuteOffset;\n            // No timezones have offsets greater than 14 hours, so disregard this match\n            if (timezoneOffset > 14 * 60) {\n                return;\n            }\n            if (match[TIMEZONE_OFFSET_SIGN_GROUP] === \"-\") {\n                timezoneOffset = -timezoneOffset;\n            }\n\n            if (result.end != null) {\n                result.end.assign(\"timezoneOffset\", timezoneOffset);\n            }\n\n            result.start.assign(\"timezoneOffset\", timezoneOffset);\n            result.text += match[0];\n        });\n\n        return results;\n    }\n}\n"],"mappings":"AAGA,MAAMA,uBAAuB,GAAG,IAAIC,MAAM,CAAC,kEAAkE,EAAE,GAAG,CAAC;AACnH,MAAMC,0BAA0B,GAAG,CAAC;AACpC,MAAMC,iCAAiC,GAAG,CAAC;AAC3C,MAAMC,mCAAmC,GAAG,CAAC;AAE7C,eAAc,MAAOC,4BAA4B;EAC7CC,MAAMA,CAACC,OAAuB,EAAEC,OAAwB;IACpDA,OAAO,CAACC,OAAO,CAAC,UAAUC,MAAM;MAC5B,IAAIA,MAAM,CAACC,KAAK,CAACC,SAAS,CAAC,gBAAgB,CAAC,EAAE;QAC1C;;MAGJ,MAAMC,MAAM,GAAGN,OAAO,CAACO,IAAI,CAACC,SAAS,CAACL,MAAM,CAACM,KAAK,GAAGN,MAAM,CAACI,IAAI,CAACG,MAAM,CAAC;MACxE,MAAMC,KAAK,GAAGlB,uBAAuB,CAACmB,IAAI,CAACN,MAAM,CAAC;MAClD,IAAI,CAACK,KAAK,EAAE;QACR;;MAGJX,OAAO,CAACa,KAAK,CAAC,MAAK;QACfC,OAAO,CAACC,GAAG,CAAC,yBAAyBJ,KAAK,CAAC,CAAC,CAAC,YAAYR,MAAM,EAAE,CAAC;MACtE,CAAC,CAAC;MAEF,MAAMa,UAAU,GAAGC,QAAQ,CAACN,KAAK,CAACf,iCAAiC,CAAC,CAAC;MACrE,MAAMsB,YAAY,GAAGD,QAAQ,CAACN,KAAK,CAACd,mCAAmC,CAAC,IAAI,GAAG,CAAC;MAChF,IAAIsB,cAAc,GAAGH,UAAU,GAAG,EAAE,GAAGE,YAAY;MAEnD,IAAIC,cAAc,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1B;;MAEJ,IAAIR,KAAK,CAAChB,0BAA0B,CAAC,KAAK,GAAG,EAAE;QAC3CwB,cAAc,GAAG,CAACA,cAAc;;MAGpC,IAAIhB,MAAM,CAACiB,GAAG,IAAI,IAAI,EAAE;QACpBjB,MAAM,CAACiB,GAAG,CAACC,MAAM,CAAC,gBAAgB,EAAEF,cAAc,CAAC;;MAGvDhB,MAAM,CAACC,KAAK,CAACiB,MAAM,CAAC,gBAAgB,EAAEF,cAAc,CAAC;MACrDhB,MAAM,CAACI,IAAI,IAAII,KAAK,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAOV,OAAO;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}