{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Define Interfaces\n\n// ==================================\n// --- PROMPT DEFINITIONS START ---\n// ==================================\n\n// --- Prompt A (Updated detailed prompt) ---\nconst PROMPT_A = taskTitle => `\nYou are an AI assistant that breaks down any user-provided task into a minimal list of high-level, actionable subtasks.\n- For very simple tasks, you may omit subtasks entirely.\n- Never exceed five subtasks.\n- The first subtask should usually be something that can be done in under ten minutes.\n- Keep instructions high-level (no detailed how-to steps).\n- If a subtask depends on another, show that dependency.\n- Provide a time estimate (e.g., “~5 minutes,” “1–2 hours,” etc.) whenever helpful.\n\nReturn your output as a valid JSON array ONLY, with the following structure for each subtask:\n[\n  {\n    \"id\": \"a\",\n    \"title\": \"Subtask title\",\n    \"dependsOn\": [],\n    \"timeEstimate\": \"~10 minutes\"\n  },\n  {\n    \"id\": \"b\",\n    \"title\": \"Subtask title\",\n    \"dependsOn\": [\"a\"],\n    \"timeEstimate\": \"~15 minutes\"\n  }\n]\n\n- id: Unique identifier (e.g., “a”, “b”, “1”, “2”).\n- title: A concise description of the subtask.\n- dependsOn: An array of the IDs this subtask depends on (empty if none).\n- timeEstimate: A short approximate time estimate.\n\nIMPORTANT: Return ONLY the valid JSON array. Do NOT include any explanations, lists, markdown formatting, or text outside the JSON array.\n\nTask: ${taskTitle}\n`;\n\n// --- Prompt B (New minimal prompt) ---\n_c = PROMPT_A;\nconst PROMPT_B = taskTitle => `\nYou are an AI assistant integrated into a task-manager application. Your primary role is to help users break down a task into a *minimal* number of manageable, high-level sub-tasks. These sub-tasks should guide the user through the *process* of completion, not the specific micro-steps.\n\n**Goal:** Given a user-provided task, analyze its complexity. If the task is complex enough to warrant breakdown, generate a minimal list of actionable, high-level sub-tasks (typically 1 to 5). For very simple, single-action tasks, state that no further breakdown is needed or provide just one step if appropriate.\n\n**Task from User:** ${taskTitle}\n\n**Instructions for Generating Sub-tasks:**\n1.  **Assess Task Complexity:** First, evaluate if the task ${taskTitle} is simple enough to be done as a single action (e.g., 'Take out the trash', 'Reply Yes to the invite') or if it benefits from being broken down.\n    *   If **very simple:** Respond with a single JSON object in the array like: '[{\"title\": \"No breakdown needed / Single Step\", \"estimatedTime\": \"\"}]'. Do *not* proceed further with breakdown steps.\n    *   If **complex enough:** Proceed with the following steps.\n2.  **Identify Key Phases:** Break down the task into the essential, logical phases needed for completion (e.g., Planning/Research, Preparation/Gathering, Execution, Review/Finalization). Aim for the *fewest* distinct phases necessary.\n3.  **Formulate Minimal Sub-tasks:** Create a list of sub-tasks based on these essential phases.\n    *   **Minimize:** Only include distinct phases that represent a meaningful shift in activity or focus. Combine steps where logical. Aim for 1-5 sub-tasks maximum.\n    *   **Keep them High-Level:** Focus on *what* needs to be done, not the detailed step-by-step instructions.\n    *   **Action-Oriented:** Start each sub-task with a verb (e.g., \"Research...\", \"Gather...\", \"Draft...\", \"Execute...\", \"Review...\").\n    *   **Non-Prescriptive:** Avoid overly detailed instructions. Guide, don't micromanage.\n    *   **Customized:** Ensure sub-tasks are directly relevant to the user's specific task ${taskTitle}.\n4.  **Estimate Time:** For each generated sub-task, provide a rough, estimated time commitment (e.g., \"~5 mins\", \"~30 mins\", \"~1-2 hours\").\n5.  **Add \"Guide Me\" Links:** For *each* generated sub-task, add a helpful link to assist the user, embedded *within the title string*. This should ideally be:\n    *   A relevant **Google Search query:** '[Guide Me: Search 'how to X']'\n    *   A relevant **Youtube query:** '[Guide Me: Youtube 'tutorial for Y']'\n    *   A suggestion for a **type of tool or app:** '[Guide Me: Use a Calendar App]' or '[Guide Me: Check Grocery/Shopping App]'\n    *   Choose the most appropriate type of link for the specific sub-task.\n6.  **Format Output:** Ensure the final response is *strictly* JSON formatted as follows, containing the list of sub-tasks (or the single \"no breakdown needed\" entry):\n\nFormat your response strictly as JSON with this structure:\n[\n  {\n    \"title\": \"Minimal, high-level sub-task description including [Guide Me: ...]\",\n    \"estimatedTime\": \"~X mins/hrs\"\n  }\n]\n`;\n\n// ==================================\n// --- PROMPT DEFINITIONS END ---\n// ==================================\n\n// --- Service Initialization ---\n_c2 = PROMPT_B;\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nif (!API_KEY) {\n  console.error(\"CRITICAL ERROR: Missing REACT_APP_GEMINI_API_KEY environment variable.\");\n}\nconst geminiService = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;\n\n// --- API Call Function ---\n\n// Type for selecting prompt\n\n// *** IMPORTANT: Ensure breakDownTask function is updated like this ***\nexport async function breakDownTask(taskTitle, promptVersion) {\n  if (!geminiService) {\n    console.error(\"Gemini service not initialized due to missing API key.\");\n    throw new Error(\"API Key configuration error. Cannot contact AI service.\");\n  }\n  try {\n    const genAI = geminiService;\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\"\n    });\n\n    // Select the prompt based on the argument\n    let prompt;\n    switch (promptVersion) {\n      case 'A':\n        prompt = PROMPT_A(taskTitle);\n        break;\n      case 'B':\n        prompt = PROMPT_B(taskTitle);\n        break;\n      default:\n        console.warn(`Unknown prompt version '${promptVersion}', defaulting to A.`);\n        prompt = PROMPT_A(taskTitle);\n    }\n    console.log(`Using Prompt ${promptVersion} for task: \"${taskTitle}\"`); // Log which prompt is used\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    let text = await response.text();\n\n    // Clean the response text\n    text = text.replace(/```json\\n?|```/g, '').trim();\n    console.log(\"Cleaned Gemini Response:\", text);\n\n    // Now expecting pure JSON output from Gemini (Prompt A updated)\n    let parsedSubtasks;\n    try {\n      parsedSubtasks = JSON.parse(text);\n      // Add unique IDs and ensure completed status is false\n      parsedSubtasks = parsedSubtasks.map(subtask => ({\n        ...subtask,\n        id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n        completed: false\n      }));\n    } catch (parseError) {\n      console.error(\"Failed to parse Gemini response:\", parseError, \"Raw text:\", text);\n      // Handle the \"no breakdown needed\" case from Prompt B gracefully\n      if (text.includes(\"No breakdown needed\") || text.includes(\"task seems straightforward\")) {\n        console.log(\"Detected 'no breakdown needed' response type.\");\n        return [{\n          id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n          title: \"No breakdown needed / Simple task\",\n          completed: false,\n          dependsOn: [],\n          estimatedTime: \"\"\n        }];\n      }\n      throw new Error('Failed to parse task breakdown response');\n    }\n    console.log(\"Parsed Subtasks:\", parsedSubtasks);\n    return parsedSubtasks;\n  } catch (error) {\n    console.error(\"Error breaking down task:\", error);\n    if (error instanceof Error && error.message.includes(\"API key not valid\")) {\n      throw new Error('Invalid API Key. Please check your .env file and Google AI Studio settings.');\n    }\n    if (error instanceof Error && error.message.includes(\"400\")) {\n      console.error(\"Potential issue with prompt or model request.\");\n      throw new Error('Error processing task breakdown with AI. Check console for details.');\n    }\n    throw new Error('Failed to break down task');\n  }\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"PROMPT_A\");\n$RefreshReg$(_c2, \"PROMPT_B\");","map":{"version":3,"names":["GoogleGenerativeAI","PROMPT_A","taskTitle","_c","PROMPT_B","_c2","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","console","error","geminiService","breakDownTask","promptVersion","Error","genAI","model","getGenerativeModel","prompt","warn","log","result","generateContent","response","text","replace","trim","parsedSubtasks","JSON","parse","map","subtask","id","Date","now","toString","Math","random","substring","completed","parseError","includes","title","dependsOn","estimatedTime","message","$RefreshReg$"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Define Interfaces\nexport interface Task {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nexport interface SubTask {\n  id: string; // Added unique ID\n  title: string;\n  completed: boolean;\n  dependsOn: (string | number)[]; // Added dependency array\n  estimatedTime?: string; // Optional estimated time\n}\n\nexport interface TaskWithSubTasks extends Task {\n  subTasks: SubTask[];\n  totalEstimatedTime?: string; // Added total estimated time for the main task\n  dueDate?: Date | null;         // Added due date\n}\n\n// ==================================\n// --- PROMPT DEFINITIONS START ---\n// ==================================\n\n// --- Prompt A (Updated detailed prompt) ---\nconst PROMPT_A = (taskTitle: string) => `\nYou are an AI assistant that breaks down any user-provided task into a minimal list of high-level, actionable subtasks.\n- For very simple tasks, you may omit subtasks entirely.\n- Never exceed five subtasks.\n- The first subtask should usually be something that can be done in under ten minutes.\n- Keep instructions high-level (no detailed how-to steps).\n- If a subtask depends on another, show that dependency.\n- Provide a time estimate (e.g., “~5 minutes,” “1–2 hours,” etc.) whenever helpful.\n\nReturn your output as a valid JSON array ONLY, with the following structure for each subtask:\n[\n  {\n    \"id\": \"a\",\n    \"title\": \"Subtask title\",\n    \"dependsOn\": [],\n    \"timeEstimate\": \"~10 minutes\"\n  },\n  {\n    \"id\": \"b\",\n    \"title\": \"Subtask title\",\n    \"dependsOn\": [\"a\"],\n    \"timeEstimate\": \"~15 minutes\"\n  }\n]\n\n- id: Unique identifier (e.g., “a”, “b”, “1”, “2”).\n- title: A concise description of the subtask.\n- dependsOn: An array of the IDs this subtask depends on (empty if none).\n- timeEstimate: A short approximate time estimate.\n\nIMPORTANT: Return ONLY the valid JSON array. Do NOT include any explanations, lists, markdown formatting, or text outside the JSON array.\n\nTask: ${taskTitle}\n`;\n\n// --- Prompt B (New minimal prompt) ---\nconst PROMPT_B = (taskTitle: string) => `\nYou are an AI assistant integrated into a task-manager application. Your primary role is to help users break down a task into a *minimal* number of manageable, high-level sub-tasks. These sub-tasks should guide the user through the *process* of completion, not the specific micro-steps.\n\n**Goal:** Given a user-provided task, analyze its complexity. If the task is complex enough to warrant breakdown, generate a minimal list of actionable, high-level sub-tasks (typically 1 to 5). For very simple, single-action tasks, state that no further breakdown is needed or provide just one step if appropriate.\n\n**Task from User:** ${taskTitle}\n\n**Instructions for Generating Sub-tasks:**\n1.  **Assess Task Complexity:** First, evaluate if the task ${taskTitle} is simple enough to be done as a single action (e.g., 'Take out the trash', 'Reply Yes to the invite') or if it benefits from being broken down.\n    *   If **very simple:** Respond with a single JSON object in the array like: '[{\"title\": \"No breakdown needed / Single Step\", \"estimatedTime\": \"\"}]'. Do *not* proceed further with breakdown steps.\n    *   If **complex enough:** Proceed with the following steps.\n2.  **Identify Key Phases:** Break down the task into the essential, logical phases needed for completion (e.g., Planning/Research, Preparation/Gathering, Execution, Review/Finalization). Aim for the *fewest* distinct phases necessary.\n3.  **Formulate Minimal Sub-tasks:** Create a list of sub-tasks based on these essential phases.\n    *   **Minimize:** Only include distinct phases that represent a meaningful shift in activity or focus. Combine steps where logical. Aim for 1-5 sub-tasks maximum.\n    *   **Keep them High-Level:** Focus on *what* needs to be done, not the detailed step-by-step instructions.\n    *   **Action-Oriented:** Start each sub-task with a verb (e.g., \"Research...\", \"Gather...\", \"Draft...\", \"Execute...\", \"Review...\").\n    *   **Non-Prescriptive:** Avoid overly detailed instructions. Guide, don't micromanage.\n    *   **Customized:** Ensure sub-tasks are directly relevant to the user's specific task ${taskTitle}.\n4.  **Estimate Time:** For each generated sub-task, provide a rough, estimated time commitment (e.g., \"~5 mins\", \"~30 mins\", \"~1-2 hours\").\n5.  **Add \"Guide Me\" Links:** For *each* generated sub-task, add a helpful link to assist the user, embedded *within the title string*. This should ideally be:\n    *   A relevant **Google Search query:** '[Guide Me: Search 'how to X']'\n    *   A relevant **Youtube query:** '[Guide Me: Youtube 'tutorial for Y']'\n    *   A suggestion for a **type of tool or app:** '[Guide Me: Use a Calendar App]' or '[Guide Me: Check Grocery/Shopping App]'\n    *   Choose the most appropriate type of link for the specific sub-task.\n6.  **Format Output:** Ensure the final response is *strictly* JSON formatted as follows, containing the list of sub-tasks (or the single \"no breakdown needed\" entry):\n\nFormat your response strictly as JSON with this structure:\n[\n  {\n    \"title\": \"Minimal, high-level sub-task description including [Guide Me: ...]\",\n    \"estimatedTime\": \"~X mins/hrs\"\n  }\n]\n`;\n\n\n// ==================================\n// --- PROMPT DEFINITIONS END ---\n// ==================================\n\n\n// --- Service Initialization ---\n\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\nif (!API_KEY) {\n  console.error(\"CRITICAL ERROR: Missing REACT_APP_GEMINI_API_KEY environment variable.\");\n}\n\nconst geminiService = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;\n\n// --- API Call Function ---\n\nexport type PromptSelection = 'A' | 'B'; // Type for selecting prompt\n\n// *** IMPORTANT: Ensure breakDownTask function is updated like this ***\nexport async function breakDownTask(\n  taskTitle: string,\n  promptVersion: PromptSelection // Added parameter to select prompt\n): Promise<SubTask[]> {\n  if (!geminiService) {\n    console.error(\"Gemini service not initialized due to missing API key.\");\n    throw new Error(\"API Key configuration error. Cannot contact AI service.\");\n  }\n\n  try {\n    const genAI = geminiService;\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\",\n    });\n\n    // Select the prompt based on the argument\n    let prompt: string;\n    switch (promptVersion) {\n      case 'A':\n        prompt = PROMPT_A(taskTitle);\n        break;\n      case 'B':\n        prompt = PROMPT_B(taskTitle);\n        break;\n      default:\n        console.warn(`Unknown prompt version '${promptVersion}', defaulting to A.`);\n        prompt = PROMPT_A(taskTitle);\n    }\n\n    console.log(`Using Prompt ${promptVersion} for task: \"${taskTitle}\"`); // Log which prompt is used\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    let text = await response.text();\n\n    // Clean the response text\n    text = text.replace(/```json\\n?|```/g, '').trim();\n    console.log(\"Cleaned Gemini Response:\", text);\n\n    // Now expecting pure JSON output from Gemini (Prompt A updated)\n    let parsedSubtasks: SubTask[];\n    try {\n      parsedSubtasks = JSON.parse(text);\n      // Add unique IDs and ensure completed status is false\n      parsedSubtasks = parsedSubtasks.map(subtask => ({\n        ...subtask,\n        id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n        completed: false\n      }));\n    } catch (parseError) {\n      console.error(\"Failed to parse Gemini response:\", parseError, \"Raw text:\", text);\n      // Handle the \"no breakdown needed\" case from Prompt B gracefully\n      if (text.includes(\"No breakdown needed\") || text.includes(\"task seems straightforward\")) {\n        console.log(\"Detected 'no breakdown needed' response type.\");\n        return [{\n           id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n           title: \"No breakdown needed / Simple task\",\n           completed: false,\n           dependsOn: [],\n           estimatedTime: \"\"\n        }];\n      }\n      throw new Error('Failed to parse task breakdown response');\n    }\n\n    console.log(\"Parsed Subtasks:\", parsedSubtasks);\n    return parsedSubtasks;\n  } catch (error) {\n    console.error(\"Error breaking down task:\", error);\n     if (error instanceof Error && error.message.includes(\"API key not valid\")) {\n         throw new Error('Invalid API Key. Please check your .env file and Google AI Studio settings.');\n    }\n     if (error instanceof Error && error.message.includes(\"400\")) {\n         console.error(\"Potential issue with prompt or model request.\");\n         throw new Error('Error processing task breakdown with AI. Check console for details.');\n     }\n    throw new Error('Failed to break down task');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}