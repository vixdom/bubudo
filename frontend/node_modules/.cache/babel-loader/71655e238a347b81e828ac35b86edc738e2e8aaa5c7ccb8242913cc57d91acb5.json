{"ast":null,"code":"import dayjs from \"dayjs\";\nimport { Meridiem } from \"../../../types.js\";\nimport * as references from \"../../../common/casualReferences.js\";\nconst PATTERN = /今日|きょう|本日|ほんじつ|昨日|きのう|明日|あした|今夜|こんや|今夕|こんゆう|今晩|こんばん|今朝|けさ/i;\nfunction normalizeTextToKanji(text) {\n  switch (text) {\n    case \"きょう\":\n      return \"今日\";\n    case \"ほんじつ\":\n      return \"本日\";\n    case \"きのう\":\n      return \"昨日\";\n    case \"あした\":\n      return \"明日\";\n    case \"こんや\":\n      return \"今夜\";\n    case \"こんゆう\":\n      return \"今夕\";\n    case \"こんばん\":\n      return \"今晩\";\n    case \"けさ\":\n      return \"今朝\";\n    default:\n      return text;\n  }\n}\nexport default class JPCasualDateParser {\n  pattern() {\n    return PATTERN;\n  }\n  extract(context, match) {\n    const text = normalizeTextToKanji(match[0]);\n    const date = dayjs(context.refDate);\n    const components = context.createParsingComponents();\n    switch (text) {\n      case \"昨日\":\n        return references.yesterday(context.reference);\n      case \"明日\":\n        return references.tomorrow(context.reference);\n      case \"本日\":\n      case \"今日\":\n        return references.today(context.reference);\n    }\n    if (text == \"今夜\" || text == \"今夕\" || text == \"今晩\") {\n      components.imply(\"hour\", 22);\n      components.assign(\"meridiem\", Meridiem.PM);\n    } else if (text.match(\"今朝\")) {\n      components.imply(\"hour\", 6);\n      components.assign(\"meridiem\", Meridiem.AM);\n    }\n    components.assign(\"day\", date.date());\n    components.assign(\"month\", date.month() + 1);\n    components.assign(\"year\", date.year());\n    return components;\n  }\n}","map":{"version":3,"names":["dayjs","Meridiem","references","PATTERN","normalizeTextToKanji","text","JPCasualDateParser","pattern","extract","context","match","date","refDate","components","createParsingComponents","yesterday","reference","tomorrow","today","imply","assign","PM","AM","month","year"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ja/parsers/JPCasualDateParser.ts"],"sourcesContent":["import { Parser, ParsingContext } from \"../../../chrono\";\nimport dayjs from \"dayjs\";\nimport { Meridiem } from \"../../../types\";\nimport * as references from \"../../../common/casualReferences\";\n\nconst PATTERN = /今日|きょう|本日|ほんじつ|昨日|きのう|明日|あした|今夜|こんや|今夕|こんゆう|今晩|こんばん|今朝|けさ/i;\n\nfunction normalizeTextToKanji(text: string) {\n    switch (text) {\n        case \"きょう\":\n            return \"今日\";\n        case \"ほんじつ\":\n            return \"本日\";\n        case \"きのう\":\n            return \"昨日\";\n        case \"あした\":\n            return \"明日\";\n        case \"こんや\":\n            return \"今夜\";\n        case \"こんゆう\":\n            return \"今夕\";\n        case \"こんばん\":\n            return \"今晩\";\n        case \"けさ\":\n            return \"今朝\";\n        default:\n            return text;\n    }\n}\n\nexport default class JPCasualDateParser implements Parser {\n    pattern() {\n        return PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray) {\n        const text = normalizeTextToKanji(match[0]);\n\n        const date = dayjs(context.refDate);\n        const components = context.createParsingComponents();\n\n        switch (text) {\n            case \"昨日\":\n                return references.yesterday(context.reference);\n\n            case \"明日\":\n                return references.tomorrow(context.reference);\n\n            case \"本日\":\n            case \"今日\":\n                return references.today(context.reference);\n        }\n\n        if (text == \"今夜\" || text == \"今夕\" || text == \"今晩\") {\n            components.imply(\"hour\", 22);\n            components.assign(\"meridiem\", Meridiem.PM);\n        } else if (text.match(\"今朝\")) {\n            components.imply(\"hour\", 6);\n            components.assign(\"meridiem\", Meridiem.AM);\n        }\n\n        components.assign(\"day\", date.date());\n        components.assign(\"month\", date.month() + 1);\n        components.assign(\"year\", date.year());\n        return components;\n    }\n}\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,mBAAiB;AAC1C,OAAO,KAAKC,UAAU,MAAM,qCAAmC;AAE/D,MAAMC,OAAO,GAAG,4DAA4D;AAE5E,SAASC,oBAAoBA,CAACC,IAAY;EACtC,QAAQA,IAAI;IACR,KAAK,KAAK;MACN,OAAO,IAAI;IACf,KAAK,MAAM;MACP,OAAO,IAAI;IACf,KAAK,KAAK;MACN,OAAO,IAAI;IACf,KAAK,KAAK;MACN,OAAO,IAAI;IACf,KAAK,KAAK;MACN,OAAO,IAAI;IACf,KAAK,MAAM;MACP,OAAO,IAAI;IACf,KAAK,MAAM;MACP,OAAO,IAAI;IACf,KAAK,IAAI;MACL,OAAO,IAAI;IACf;MACI,OAAOA,IAAI;;AAEvB;AAEA,eAAc,MAAOC,kBAAkB;EACnCC,OAAOA,CAAA;IACH,OAAOJ,OAAO;EAClB;EAEAK,OAAOA,CAACC,OAAuB,EAAEC,KAAuB;IACpD,MAAML,IAAI,GAAGD,oBAAoB,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;IAE3C,MAAMC,IAAI,GAAGX,KAAK,CAACS,OAAO,CAACG,OAAO,CAAC;IACnC,MAAMC,UAAU,GAAGJ,OAAO,CAACK,uBAAuB,EAAE;IAEpD,QAAQT,IAAI;MACR,KAAK,IAAI;QACL,OAAOH,UAAU,CAACa,SAAS,CAACN,OAAO,CAACO,SAAS,CAAC;MAElD,KAAK,IAAI;QACL,OAAOd,UAAU,CAACe,QAAQ,CAACR,OAAO,CAACO,SAAS,CAAC;MAEjD,KAAK,IAAI;MACT,KAAK,IAAI;QACL,OAAOd,UAAU,CAACgB,KAAK,CAACT,OAAO,CAACO,SAAS,CAAC;;IAGlD,IAAIX,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI,EAAE;MAC9CQ,UAAU,CAACM,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;MAC5BN,UAAU,CAACO,MAAM,CAAC,UAAU,EAAEnB,QAAQ,CAACoB,EAAE,CAAC;KAC7C,MAAM,IAAIhB,IAAI,CAACK,KAAK,CAAC,IAAI,CAAC,EAAE;MACzBG,UAAU,CAACM,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;MAC3BN,UAAU,CAACO,MAAM,CAAC,UAAU,EAAEnB,QAAQ,CAACqB,EAAE,CAAC;;IAG9CT,UAAU,CAACO,MAAM,CAAC,KAAK,EAAET,IAAI,CAACA,IAAI,EAAE,CAAC;IACrCE,UAAU,CAACO,MAAM,CAAC,OAAO,EAAET,IAAI,CAACY,KAAK,EAAE,GAAG,CAAC,CAAC;IAC5CV,UAAU,CAACO,MAAM,CAAC,MAAM,EAAET,IAAI,CAACa,IAAI,EAAE,CAAC;IACtC,OAAOX,UAAU;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}