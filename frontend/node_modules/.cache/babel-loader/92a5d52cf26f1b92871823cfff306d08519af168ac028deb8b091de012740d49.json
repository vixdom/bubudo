{"ast":null,"code":"import{GoogleGenerativeAI}from\"@google/generative-ai\";// Define Interfaces\n// ==================================\n// --- PROMPT DEFINITIONS START ---\n// ==================================\n// --- Prompt A (Updated detailed prompt) ---\n// Helper to fetch and cache prompts\nconst promptCache={};async function loadPrompt(promptName){const filename=promptName==='A'?'/prompts/promptA.txt':'/prompts/promptB.txt';if(promptCache[promptName])return promptCache[promptName];const response=await fetch(filename);if(!response.ok)throw new Error(`Failed to load prompt ${promptName}`);const text=await response.text();promptCache[promptName]=text;return text;}// Returns the prompt with ${taskTitle} replaced\nasync function getPromptWithTaskTitle(promptName,taskTitle){const template=await loadPrompt(promptName);return template.replace(/\\$\\{taskTitle\\}/g,taskTitle);}// ==================================\n// --- PROMPT DEFINITIONS END ---\n// ==================================\n// --- Service Initialization ---\nconst API_KEY=process.env.REACT_APP_GEMINI_API_KEY;if(!API_KEY){console.error(\"CRITICAL ERROR: Missing REACT_APP_GEMINI_API_KEY environment variable.\");}const geminiService=API_KEY?new GoogleGenerativeAI(API_KEY):null;// --- API Call Function ---\n// Type for selecting prompt\n// *** IMPORTANT: Ensure breakDownTask function is updated like this ***\nexport async function breakDownTask(taskTitle,promptVersion){if(!geminiService){console.error(\"Gemini service not initialized due to missing API key.\");throw new Error(\"API Key configuration error. Cannot contact AI service.\");}try{const genAI=geminiService;const model=genAI.getGenerativeModel({model:\"gemini-1.5-flash\"});// Select the prompt based on the argument\n// Load the prompt from file and substitute taskTitle\nconst prompt=await getPromptWithTaskTitle(promptVersion,taskTitle);console.log(`Using Prompt ${promptVersion} for task: \"${taskTitle}\"`);// Log which prompt is used\nconst result=await model.generateContent(prompt);const response=await result.response;let text=await response.text();// Clean the response text\ntext=text.replace(/```json\\n?|```/g,'').trim();console.log(\"Cleaned Gemini Response:\",text);// Now expecting pure JSON output from Gemini (Prompt A updated)\nlet parsedSubtasks;// Extract JSON array from the response (find first [ and last ])\nconst jsonStart=text.indexOf('[');const jsonEnd=text.lastIndexOf(']');if(jsonStart!==-1&&jsonEnd!==-1&&jsonEnd>jsonStart){const jsonStr=text.substring(jsonStart,jsonEnd+1);try{parsedSubtasks=JSON.parse(jsonStr);// Add unique IDs and ensure completed status is false\nparsedSubtasks=parsedSubtasks.map(subtask=>({...subtask,dependsOn:Array.isArray(subtask.dependsOn)?subtask.dependsOn:[],completed:false,uuid:Date.now().toString()+Math.random().toString(36).substring(2,9)// for React key if needed\n}));}catch(parseError){console.error(\"Failed to parse Gemini JSON substring:\",parseError,\"Raw JSON:\",jsonStr);// Handle the \"no breakdown needed\" case from Prompt B gracefully\nif(text.includes(\"No breakdown needed\")||text.includes(\"task seems straightforward\")){console.log(\"Detected 'no breakdown needed' response type.\");return[{id:Date.now().toString()+Math.random().toString(36).substring(2,9),title:\"No breakdown needed / Simple task\",completed:false,dependsOn:[],estimatedTime:\"\"}];}throw new Error('Failed to parse task breakdown response');}}else{// If no JSON found, handle as before\nconsole.error(\"No JSON array found in Gemini response.\");if(text.includes(\"No breakdown needed\")||text.includes(\"task seems straightforward\")){return[{id:Date.now().toString()+Math.random().toString(36).substring(2,9),title:\"No breakdown needed / Simple task\",completed:false,dependsOn:[],estimatedTime:\"\"}];}throw new Error('Failed to parse task breakdown response');}console.log(\"Parsed Subtasks:\",parsedSubtasks);return parsedSubtasks;}catch(error){console.error(\"Error breaking down task:\",error);if(error instanceof Error&&error.message.includes(\"API key not valid\")){throw new Error('Invalid API Key. Please check your .env file and Google AI Studio settings.');}if(error instanceof Error&&error.message.includes(\"400\")){console.error(\"Potential issue with prompt or model request.\");throw new Error('Error processing task breakdown with AI. Check console for details.');}throw new Error('Failed to break down task');}}","map":{"version":3,"names":["GoogleGenerativeAI","promptCache","loadPrompt","promptName","filename","response","fetch","ok","Error","text","getPromptWithTaskTitle","taskTitle","template","replace","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","console","error","geminiService","breakDownTask","promptVersion","genAI","model","getGenerativeModel","prompt","log","result","generateContent","trim","parsedSubtasks","jsonStart","indexOf","jsonEnd","lastIndexOf","jsonStr","substring","JSON","parse","map","subtask","dependsOn","Array","isArray","completed","uuid","Date","now","toString","Math","random","parseError","includes","id","title","estimatedTime","message"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Define Interfaces\nexport interface Task {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nexport interface SubTask {\n  id: string; // Added unique ID\n  title: string;\n  completed: boolean;\n  dependsOn: (string | number)[]; // Added dependency array\n  estimatedTime?: string; // Optional estimated time\n}\n\nexport interface TaskWithSubTasks extends Task {\n  subTasks: SubTask[];\n  totalEstimatedTime?: string; // Added total estimated time for the main task\n  dueDate?: Date | null;         // Added due date\n}\n\n// ==================================\n// --- PROMPT DEFINITIONS START ---\n// ==================================\n\n// --- Prompt A (Updated detailed prompt) ---\n// Helper to fetch and cache prompts\nconst promptCache: Record<string, string> = {};\nasync function loadPrompt(promptName: 'A' | 'B'): Promise<string> {\n  const filename = promptName === 'A' ? '/prompts/promptA.txt' : '/prompts/promptB.txt';\n  if (promptCache[promptName]) return promptCache[promptName];\n  const response = await fetch(filename);\n  if (!response.ok) throw new Error(`Failed to load prompt ${promptName}`);\n  const text = await response.text();\n  promptCache[promptName] = text;\n  return text;\n}\n\n// Returns the prompt with ${taskTitle} replaced\nasync function getPromptWithTaskTitle(promptName: 'A' | 'B', taskTitle: string): Promise<string> {\n  const template = await loadPrompt(promptName);\n  return template.replace(/\\$\\{taskTitle\\}/g, taskTitle);\n}\n\n\n// ==================================\n// --- PROMPT DEFINITIONS END ---\n// ==================================\n\n// --- Service Initialization ---\n\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\nif (!API_KEY) {\n  console.error(\"CRITICAL ERROR: Missing REACT_APP_GEMINI_API_KEY environment variable.\");\n}\n\nconst geminiService = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;\n\n// --- API Call Function ---\n\nexport type PromptSelection = 'A' | 'B'; // Type for selecting prompt\n\n// *** IMPORTANT: Ensure breakDownTask function is updated like this ***\nexport async function breakDownTask(\n  taskTitle: string,\n  promptVersion: PromptSelection // Added parameter to select prompt\n): Promise<SubTask[]> {\n  if (!geminiService) {\n    console.error(\"Gemini service not initialized due to missing API key.\");\n    throw new Error(\"API Key configuration error. Cannot contact AI service.\");\n  }\n\n  try {\n    const genAI = geminiService;\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\",\n    });\n\n    // Select the prompt based on the argument\n    // Load the prompt from file and substitute taskTitle\n    const prompt = await getPromptWithTaskTitle(promptVersion, taskTitle);\n\n    console.log(`Using Prompt ${promptVersion} for task: \"${taskTitle}\"`); // Log which prompt is used\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    let text = await response.text();\n\n    // Clean the response text\n    text = text.replace(/```json\\n?|```/g, '').trim();\n    console.log(\"Cleaned Gemini Response:\", text);\n\n    // Now expecting pure JSON output from Gemini (Prompt A updated)\n    let parsedSubtasks: SubTask[];\n    // Extract JSON array from the response (find first [ and last ])\n    const jsonStart = text.indexOf('[');\n    const jsonEnd = text.lastIndexOf(']');\n    if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n      const jsonStr = text.substring(jsonStart, jsonEnd + 1);\n      try {\n        parsedSubtasks = JSON.parse(jsonStr);\n        // Add unique IDs and ensure completed status is false\n        parsedSubtasks = parsedSubtasks.map(subtask => ({\n          ...subtask,\n          dependsOn: Array.isArray(subtask.dependsOn) ? subtask.dependsOn : [],\n          completed: false,\n          uuid: Date.now().toString() + Math.random().toString(36).substring(2, 9) // for React key if needed\n        }));\n      } catch (parseError) {\n        console.error(\"Failed to parse Gemini JSON substring:\", parseError, \"Raw JSON:\", jsonStr);\n        // Handle the \"no breakdown needed\" case from Prompt B gracefully\n        if (text.includes(\"No breakdown needed\") || text.includes(\"task seems straightforward\")) {\n          console.log(\"Detected 'no breakdown needed' response type.\");\n          return [{\n            id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n            title: \"No breakdown needed / Simple task\",\n            completed: false,\n            dependsOn: [],\n            estimatedTime: \"\"\n          }];\n        }\n        throw new Error('Failed to parse task breakdown response');\n      }\n    } else {\n      // If no JSON found, handle as before\n      console.error(\"No JSON array found in Gemini response.\");\n      if (text.includes(\"No breakdown needed\") || text.includes(\"task seems straightforward\")) {\n        return [{\n          id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n          title: \"No breakdown needed / Simple task\",\n          completed: false,\n          dependsOn: [],\n          estimatedTime: \"\"\n        }];\n      }\n      throw new Error('Failed to parse task breakdown response');\n    }\n\n    console.log(\"Parsed Subtasks:\", parsedSubtasks);\n    return parsedSubtasks;\n  } catch (error) {\n    console.error(\"Error breaking down task:\", error);\n    if (error instanceof Error && error.message.includes(\"API key not valid\")) {\n      throw new Error('Invalid API Key. Please check your .env file and Google AI Studio settings.');\n    }\n    if (error instanceof Error && error.message.includes(\"400\")) {\n      console.error(\"Potential issue with prompt or model request.\");\n      throw new Error('Error processing task breakdown with AI. Check console for details.');\n    }\n    throw new Error('Failed to break down task');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}