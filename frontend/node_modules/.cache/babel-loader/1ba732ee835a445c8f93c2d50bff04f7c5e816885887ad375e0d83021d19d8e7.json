{"ast":null,"code":"import ExtractTimezoneAbbrRefiner from \"./common/refiners/ExtractTimezoneAbbrRefiner.js\";\nimport ExtractTimezoneOffsetRefiner from \"./common/refiners/ExtractTimezoneOffsetRefiner.js\";\nimport OverlapRemovalRefiner from \"./common/refiners/OverlapRemovalRefiner.js\";\nimport ForwardDateRefiner from \"./common/refiners/ForwardDateRefiner.js\";\nimport UnlikelyFormatFilter from \"./common/refiners/UnlikelyFormatFilter.js\";\nimport ISOFormatParser from \"./common/parsers/ISOFormatParser.js\";\nimport MergeWeekdayComponentRefiner from \"./common/refiners/MergeWeekdayComponentRefiner.js\";\nexport function includeCommonConfiguration(configuration) {\n  let strictMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  configuration.parsers.unshift(new ISOFormatParser());\n  configuration.refiners.unshift(new MergeWeekdayComponentRefiner());\n  configuration.refiners.unshift(new ExtractTimezoneOffsetRefiner());\n  configuration.refiners.unshift(new OverlapRemovalRefiner());\n  configuration.refiners.push(new ExtractTimezoneAbbrRefiner());\n  configuration.refiners.push(new OverlapRemovalRefiner());\n  configuration.refiners.push(new ForwardDateRefiner());\n  configuration.refiners.push(new UnlikelyFormatFilter(strictMode));\n  return configuration;\n}","map":{"version":3,"names":["ExtractTimezoneAbbrRefiner","ExtractTimezoneOffsetRefiner","OverlapRemovalRefiner","ForwardDateRefiner","UnlikelyFormatFilter","ISOFormatParser","MergeWeekdayComponentRefiner","includeCommonConfiguration","configuration","strictMode","arguments","length","undefined","parsers","unshift","refiners","push"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/configurations.ts"],"sourcesContent":["import { Configuration, Parser, Refiner } from \"./chrono\";\n\nimport ExtractTimezoneAbbrRefiner from \"./common/refiners/ExtractTimezoneAbbrRefiner\";\nimport ExtractTimezoneOffsetRefiner from \"./common/refiners/ExtractTimezoneOffsetRefiner\";\nimport OverlapRemovalRefiner from \"./common/refiners/OverlapRemovalRefiner\";\nimport ForwardDateRefiner from \"./common/refiners/ForwardDateRefiner\";\nimport UnlikelyFormatFilter from \"./common/refiners/UnlikelyFormatFilter\";\nimport ISOFormatParser from \"./common/parsers/ISOFormatParser\";\nimport MergeWeekdayComponentRefiner from \"./common/refiners/MergeWeekdayComponentRefiner\";\n\nexport function includeCommonConfiguration(configuration: Configuration, strictMode = false): Configuration {\n    configuration.parsers.unshift(new ISOFormatParser());\n\n    configuration.refiners.unshift(new MergeWeekdayComponentRefiner());\n    configuration.refiners.unshift(new ExtractTimezoneOffsetRefiner());\n    configuration.refiners.unshift(new OverlapRemovalRefiner());\n\n    // Unlike ExtractTimezoneOffsetRefiner, this refiner relies on knowing both date and time in cases where the tz\n    // is ambiguous (in terms of DST/non-DST). It therefore needs to be applied as late as possible in the parsing.\n    configuration.refiners.push(new ExtractTimezoneAbbrRefiner());\n    configuration.refiners.push(new OverlapRemovalRefiner());\n    configuration.refiners.push(new ForwardDateRefiner());\n    configuration.refiners.push(new UnlikelyFormatFilter(strictMode));\n    return configuration;\n}\n"],"mappings":"AAEA,OAAOA,0BAA0B,MAAM,iDAA+C;AACtF,OAAOC,4BAA4B,MAAM,mDAAiD;AAC1F,OAAOC,qBAAqB,MAAM,4CAA0C;AAC5E,OAAOC,kBAAkB,MAAM,yCAAuC;AACtE,OAAOC,oBAAoB,MAAM,2CAAyC;AAC1E,OAAOC,eAAe,MAAM,qCAAmC;AAC/D,OAAOC,4BAA4B,MAAM,mDAAiD;AAE1F,OAAM,SAAUC,0BAA0BA,CAACC,aAA4B,EAAoB;EAAA,IAAlBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACvFF,aAAa,CAACK,OAAO,CAACC,OAAO,CAAC,IAAIT,eAAe,EAAE,CAAC;EAEpDG,aAAa,CAACO,QAAQ,CAACD,OAAO,CAAC,IAAIR,4BAA4B,EAAE,CAAC;EAClEE,aAAa,CAACO,QAAQ,CAACD,OAAO,CAAC,IAAIb,4BAA4B,EAAE,CAAC;EAClEO,aAAa,CAACO,QAAQ,CAACD,OAAO,CAAC,IAAIZ,qBAAqB,EAAE,CAAC;EAI3DM,aAAa,CAACO,QAAQ,CAACC,IAAI,CAAC,IAAIhB,0BAA0B,EAAE,CAAC;EAC7DQ,aAAa,CAACO,QAAQ,CAACC,IAAI,CAAC,IAAId,qBAAqB,EAAE,CAAC;EACxDM,aAAa,CAACO,QAAQ,CAACC,IAAI,CAAC,IAAIb,kBAAkB,EAAE,CAAC;EACrDK,aAAa,CAACO,QAAQ,CAACC,IAAI,CAAC,IAAIZ,oBAAoB,CAACK,UAAU,CAAC,CAAC;EACjE,OAAOD,aAAa;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}