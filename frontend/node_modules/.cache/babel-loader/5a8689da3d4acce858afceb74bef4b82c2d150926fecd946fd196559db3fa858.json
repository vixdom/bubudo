{"ast":null,"code":"export var Meridiem;\n(function (Meridiem) {\n  Meridiem[Meridiem[\"AM\"] = 0] = \"AM\";\n  Meridiem[Meridiem[\"PM\"] = 1] = \"PM\";\n})(Meridiem || (Meridiem = {}));\nexport var Weekday;\n(function (Weekday) {\n  Weekday[Weekday[\"SUNDAY\"] = 0] = \"SUNDAY\";\n  Weekday[Weekday[\"MONDAY\"] = 1] = \"MONDAY\";\n  Weekday[Weekday[\"TUESDAY\"] = 2] = \"TUESDAY\";\n  Weekday[Weekday[\"WEDNESDAY\"] = 3] = \"WEDNESDAY\";\n  Weekday[Weekday[\"THURSDAY\"] = 4] = \"THURSDAY\";\n  Weekday[Weekday[\"FRIDAY\"] = 5] = \"FRIDAY\";\n  Weekday[Weekday[\"SATURDAY\"] = 6] = \"SATURDAY\";\n})(Weekday || (Weekday = {}));\nexport var Month;\n(function (Month) {\n  Month[Month[\"JANUARY\"] = 1] = \"JANUARY\";\n  Month[Month[\"FEBRUARY\"] = 2] = \"FEBRUARY\";\n  Month[Month[\"MARCH\"] = 3] = \"MARCH\";\n  Month[Month[\"APRIL\"] = 4] = \"APRIL\";\n  Month[Month[\"MAY\"] = 5] = \"MAY\";\n  Month[Month[\"JUNE\"] = 6] = \"JUNE\";\n  Month[Month[\"JULY\"] = 7] = \"JULY\";\n  Month[Month[\"AUGUST\"] = 8] = \"AUGUST\";\n  Month[Month[\"SEPTEMBER\"] = 9] = \"SEPTEMBER\";\n  Month[Month[\"OCTOBER\"] = 10] = \"OCTOBER\";\n  Month[Month[\"NOVEMBER\"] = 11] = \"NOVEMBER\";\n  Month[Month[\"DECEMBER\"] = 12] = \"DECEMBER\";\n})(Month || (Month = {}));","map":{"version":3,"names":["Meridiem","Weekday","Month"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/types.ts"],"sourcesContent":["import { DebugConsume, DebugHandler } from \"./debugging\";\n\nexport interface ParsingOption {\n    /**\n     * To parse only forward dates (the results should be after the reference date).\n     * This effects date/time implication (e.g. weekday or time mentioning)\n     */\n    forwardDate?: boolean;\n\n    /**\n     * Additional timezone keywords for the parsers to recognize.\n     * Any value provided will override the default handling of that value.\n     */\n    timezones?: TimezoneAbbrMap;\n\n    /**\n     * Internal debug event handler.\n     * @internal\n     */\n    debug?: DebugHandler | DebugConsume;\n}\n\n/**\n * Some timezone abbreviations are ambiguous in that they refer to different offsets\n * depending on the time of year â€” daylight savings time (DST), or non-DST. This interface\n * allows defining such timezones\n */\nexport interface AmbiguousTimezoneMap {\n    timezoneOffsetDuringDst: number;\n    timezoneOffsetNonDst: number;\n    /**\n     * Return the start date of DST for the given year.\n     * timezone.ts contains helper methods for common such rules.\n     */\n    dstStart: (year: number) => Date;\n    /**\n     * Return the end date of DST for the given year.\n     * timezone.ts contains helper methods for common such rules.\n     */\n    dstEnd: (year: number) => Date;\n}\n\n/**\n * A map describing how timezone abbreviations should map to time offsets.\n * Supports both unambigous mappings abbreviation => offset,\n * and ambiguous mappings, where the offset will depend on whether the\n * time in question is during daylight savings time or not.\n */\nexport type TimezoneAbbrMap = { [key: string]: number | AmbiguousTimezoneMap };\n\nexport interface ParsingReference {\n    /**\n     * Reference date. The instant (JavaScript Date object) when the input is written or mention.\n     * This effect date/time implication (e.g. weekday or time mentioning).\n     * (default = now)\n     */\n    instant?: Date;\n\n    /**\n     * Reference timezone. The timezone where the input is written or mention.\n     * Date/time implication will account the difference between input timezone and the current system timezone.\n     * (default = current timezone)\n     */\n    timezone?: string | number;\n}\n\n/**\n * Parsed result or final output.\n * Each result object represents a date/time (or date/time-range) mentioning in the input.\n */\nexport interface ParsedResult {\n    readonly refDate: Date;\n    readonly index: number;\n    readonly text: string;\n\n    readonly start: ParsedComponents;\n    readonly end?: ParsedComponents;\n\n    /**\n     * @return a javascript date object created from the `result.start`.\n     */\n    date(): Date;\n\n    /**\n     * @return debugging tags combined of the `result.start` and `result.end`.\n     */\n    tags(): Set<string>;\n}\n\n/**\n * A collection of parsed date/time components (e.g. day, hour, minute, ..., etc).\n *\n * Each parsed component has three different levels of certainty.\n * - *Certain* (or *Known*): The component is directly mentioned and parsed.\n * - *Implied*: The component is not directly mentioned, but implied by other parsed information.\n * - *Unknown*: Completely no mention of the component.\n */\nexport interface ParsedComponents {\n    /**\n     * Check the component certainly if the component is *Certain* (or *Known*)\n     */\n    isCertain(component: Component): boolean;\n\n    /**\n     * Get the component value for either *Certain* or *Implied* value.\n     */\n    get(component: Component): number | null;\n\n    /**\n     * @return a javascript date object.\n     */\n    date(): Date;\n\n    /**\n     * @return debugging tags of the parsed component.\n     */\n    tags(): Set<string>;\n}\n\nexport type Component =\n    | \"year\"\n    | \"month\"\n    | \"day\"\n    | \"weekday\"\n    | \"hour\"\n    | \"minute\"\n    | \"second\"\n    | \"millisecond\"\n    | \"meridiem\"\n    | \"timezoneOffset\";\n\nexport enum Meridiem {\n    AM = 0,\n    PM = 1,\n}\n\nexport enum Weekday {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6,\n}\n\nexport enum Month {\n    JANUARY = 1,\n    FEBRUARY = 2,\n    MARCH = 3,\n    APRIL = 4,\n    MAY = 5,\n    JUNE = 6,\n    JULY = 7,\n    AUGUST = 8,\n    SEPTEMBER = 9,\n    OCTOBER = 10,\n    NOVEMBER = 11,\n    DECEMBER = 12,\n}\n"],"mappings":"AAmIA,WAAYA,QAGX;AAHD,WAAYA,QAAQ;EAChBA,QAAA,CAAAA,QAAA,kBAAM;EACNA,QAAA,CAAAA,QAAA,kBAAM;AACV,CAAC,EAHWA,QAAQ,KAARA,QAAQ;AAKpB,WAAYC,OAQX;AARD,WAAYA,OAAO;EACfA,OAAA,CAAAA,OAAA,0BAAU;EACVA,OAAA,CAAAA,OAAA,0BAAU;EACVA,OAAA,CAAAA,OAAA,4BAAW;EACXA,OAAA,CAAAA,OAAA,gCAAa;EACbA,OAAA,CAAAA,OAAA,8BAAY;EACZA,OAAA,CAAAA,OAAA,0BAAU;EACVA,OAAA,CAAAA,OAAA,8BAAY;AAChB,CAAC,EARWA,OAAO,KAAPA,OAAO;AAUnB,WAAYC,KAaX;AAbD,WAAYA,KAAK;EACbA,KAAA,CAAAA,KAAA,4BAAW;EACXA,KAAA,CAAAA,KAAA,8BAAY;EACZA,KAAA,CAAAA,KAAA,wBAAS;EACTA,KAAA,CAAAA,KAAA,wBAAS;EACTA,KAAA,CAAAA,KAAA,oBAAO;EACPA,KAAA,CAAAA,KAAA,sBAAQ;EACRA,KAAA,CAAAA,KAAA,sBAAQ;EACRA,KAAA,CAAAA,KAAA,0BAAU;EACVA,KAAA,CAAAA,KAAA,gCAAa;EACbA,KAAA,CAAAA,KAAA,6BAAY;EACZA,KAAA,CAAAA,KAAA,+BAAa;EACbA,KAAA,CAAAA,KAAA,+BAAa;AACjB,CAAC,EAbWA,KAAK,KAALA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}