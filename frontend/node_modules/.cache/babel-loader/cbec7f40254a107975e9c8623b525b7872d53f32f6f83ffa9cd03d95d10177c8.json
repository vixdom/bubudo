{"ast":null,"code":"var _jsxFileName = \"/Users/mvikr/Projects/TaskApp/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Typography, Box, Button, Snackbar, Alert, ThemeProvider, CssBaseline, Tabs, Tab } from '@mui/material';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\nimport AuthHeader from './components/AuthHeader';\nimport { fetchUserTasks, upsertUserTasks } from './services/supabaseTasksService';\nimport theme from './theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// App version: increment by 0.01 for each change\nconst APP_VERSION = '1.01'; // Updated for My Rewards tab + versioning\n\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [promptSelection, setPromptSelection] = useState('A');\n  const [user, setUser] = useState(null);\n  const [mergeNotice, setMergeNotice] = useState(false);\n  const [tab, setTab] = useState(0); // 0: My Tasks, 1: My Accomplishments\n\n  const handleTabChange = (_event, newValue) => {\n    setTab(newValue);\n  };\n  const incompleteTasks = tasks.filter(t => !t.completed);\n  const completedTasks = tasks.filter(t => t.completed);\n\n  // Load tasks from localStorage on initial mount (if not logged in)\n  useEffect(() => {\n    if (!user) {\n      try {\n        const storedTasks = localStorage.getItem('tasks');\n        if (storedTasks) {\n          const parsedTasks = JSON.parse(storedTasks);\n          // Convert dueDate strings back to Date objects\n          const tasksWithDates = parsedTasks.map(task => ({\n            ...task,\n            dueDate: task.dueDate ? new Date(task.dueDate) : null\n          }));\n          setTasks(tasksWithDates);\n          console.log('Tasks loaded from localStorage');\n        }\n      } catch (error) {\n        console.error('Failed to load tasks from localStorage:', error);\n      }\n    }\n  }, [user]); // Only run when user changes\n\n  // Save tasks to localStorage only if not logged in\n  useEffect(() => {\n    if (!user) {\n      try {\n        // Convert Date objects to ISO strings before saving\n        const tasksToStore = tasks.map(task => ({\n          ...task,\n          dueDate: task.dueDate ? task.dueDate.toISOString() : null\n        }));\n        localStorage.setItem('tasks', JSON.stringify(tasksToStore));\n      } catch (error) {\n        console.error('Failed to save tasks to localStorage:', error);\n      }\n    }\n  }, [tasks, user]);\n\n  // On login: sync/merge local tasks to Supabase, then clear local\n  useEffect(() => {\n    const doSync = async () => {\n      if (user && user.id) {\n        // 1. Fetch cloud tasks\n        let cloudTasks = [];\n        try {\n          cloudTasks = await fetchUserTasks(user.id);\n        } catch (err) {\n          console.error('Failed to fetch cloud tasks:', err);\n        }\n        // 2. Load local tasks\n        let localTasks = [];\n        try {\n          const stored = localStorage.getItem('tasks');\n          if (stored) {\n            localTasks = JSON.parse(stored).map(task => ({\n              ...task,\n              dueDate: task.dueDate ? new Date(task.dueDate) : null\n            }));\n          }\n        } catch {}\n        // 3. Merge: find local tasks not in cloud by ID\n        const cloudIds = new Set(cloudTasks.map(t => t.id));\n        const newLocalTasks = localTasks.filter(t => !cloudIds.has(t.id));\n        let mergedTasks = [...cloudTasks, ...newLocalTasks];\n        if (newLocalTasks.length > 0) {\n          // 4. Upload merged tasks to Supabase\n          try {\n            await upsertUserTasks(user.id, mergedTasks);\n            setMergeNotice(true);\n          } catch (err) {\n            console.error('Failed to upload merged tasks:', err);\n          }\n        }\n        // 5. Clear local storage and use cloud\n        localStorage.removeItem('tasks');\n        setTasks(mergedTasks);\n      }\n    };\n    doSync();\n    // eslint-disable-next-line\n  }, [user]);\n\n  // Updated to accept task data object\n  const addTask = async taskData => {\n    // Do not generate a fake id for Supabase\n    const newTaskForSupabase = {\n      ...taskData,\n      completed: false,\n      subTasks: taskData.subTasks.map(st => {\n        var _st$completed;\n        return {\n          ...st,\n          completed: (_st$completed = st.completed) !== null && _st$completed !== void 0 ? _st$completed : false\n        };\n      })\n    };\n    // Locally, temporarily assign a random id for optimistic UI (will be replaced on sync)\n    const tempId = Date.now().toString() + Math.random().toString(36).substring(2, 9);\n    const newTaskForLocal = {\n      ...newTaskForSupabase,\n      id: tempId\n    };\n    const updatedTasks = [...tasks, newTaskForLocal];\n    setTasks(updatedTasks);\n    if (user && user.id) {\n      try {\n        // upsertUserTasks should not send the temp id, so filter it out before sending\n        const tasksForSupabase = updatedTasks.map(({\n          id,\n          ...rest\n        }) => rest);\n        await upsertUserTasks(user.id, tasksForSupabase);\n      } catch (err) {\n        console.error('Failed to sync new task to Supabase:', err);\n      }\n    }\n  };\n\n  // Handler to toggle main task and its subtasks\n  const handleToggleTask = async taskId => {\n    const updated = tasks.map(task => {\n      if (task.id === taskId) {\n        const newCompletedStatus = !task.completed;\n        return {\n          ...task,\n          completed: newCompletedStatus,\n          subTasks: task.subTasks.map(sub => ({\n            ...sub,\n            completed: newCompletedStatus\n          }))\n        };\n      }\n      return task;\n    });\n    setTasks(updated);\n    if (user && user.id) {\n      try {\n        await upsertUserTasks(user.id, updated);\n      } catch (err) {\n        console.error('Failed to sync toggle to Supabase:', err);\n      }\n    }\n  };\n\n  // Handler to toggle a single subtask and update parent task if needed\n  const handleToggleSubTask = async (taskId, subTaskId) => {\n    const updated = tasks.map(task => {\n      if (task.id === taskId) {\n        let allSubTasksCompleted = true;\n        const updatedSubTasks = task.subTasks.map(sub => {\n          if (sub.id === subTaskId) {\n            const newSubCompletedStatus = !sub.completed;\n            if (!newSubCompletedStatus) allSubTasksCompleted = false;\n            return {\n              ...sub,\n              completed: newSubCompletedStatus\n            };\n          } else {\n            if (!sub.completed) allSubTasksCompleted = false;\n          }\n          return sub;\n        });\n        return {\n          ...task,\n          subTasks: updatedSubTasks,\n          completed: allSubTasksCompleted\n        };\n      }\n      return task;\n    });\n    setTasks(updated);\n    if (user && user.id) {\n      try {\n        await upsertUserTasks(user.id, updated);\n      } catch (err) {\n        console.error('Failed to sync subtask toggle to Supabase:', err);\n      }\n    }\n  };\n\n  // Function to toggle prompt\n  const togglePrompt = () => {\n    setPromptSelection(prev => prev === 'A' ? 'B' : 'A');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AuthHeader, {\n      onAuthChange: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      sx: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'absolute',\n          top: 16,\n          right: 24,\n          zIndex: 10,\n          display: 'flex',\n          alignItems: 'center',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: 4\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            height: \"20\",\n            viewBox: \"0 0 24 24\",\n            width: \"20\",\n            fill: \"#FFA000\",\n            style: {\n              marginRight: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M0 0h24v24H0z\",\n              fill: \"none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 138\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 175\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"text.secondary\",\n            sx: {\n              fontWeight: 600\n            },\n            children: \"My Rewards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"text.secondary\",\n          sx: {\n            ml: 2\n          },\n          children: [\"v\", APP_VERSION]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          my: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: togglePrompt,\n            children: [\"Using Prompt: \", promptSelection, \" (Click to Switch)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddTaskForm, {\n          onAddTask: addTask,\n          currentPrompt: promptSelection,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            borderBottom: 1,\n            borderColor: 'divider',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Tabs, {\n            value: tab,\n            onChange: handleTabChange,\n            variant: \"fullWidth\",\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              label: \"To Do\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"My Accomplishments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), tab === 0 &&\n        /*#__PURE__*/\n        // To Do: show only incomplete tasks\n        _jsxDEV(TaskList, {\n          tasks: incompleteTasks,\n          onToggleTask: handleToggleTask,\n          onToggleSubTask: handleToggleSubTask,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), tab === 1 &&\n        /*#__PURE__*/\n        // My Accomplishments: show only completed tasks\n        _jsxDEV(TaskList, {\n          tasks: completedTasks,\n          onToggleTask: handleToggleTask,\n          onToggleSubTask: handleToggleSubTask,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: mergeNotice,\n      autoHideDuration: 4000,\n      onClose: () => setMergeNotice(false),\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setMergeNotice(false),\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: \"Local tasks have been uploaded and merged with your account!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"c/Y74eSwCd5NKDnLq9BDWJzdSME=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Box","Button","Snackbar","Alert","ThemeProvider","CssBaseline","Tabs","Tab","TaskList","AddTaskForm","AuthHeader","fetchUserTasks","upsertUserTasks","theme","jsxDEV","_jsxDEV","APP_VERSION","App","_s","tasks","setTasks","promptSelection","setPromptSelection","user","setUser","mergeNotice","setMergeNotice","tab","setTab","handleTabChange","_event","newValue","incompleteTasks","filter","t","completed","completedTasks","storedTasks","localStorage","getItem","parsedTasks","JSON","parse","tasksWithDates","map","task","dueDate","Date","console","log","error","tasksToStore","toISOString","setItem","stringify","doSync","id","cloudTasks","err","localTasks","stored","cloudIds","Set","newLocalTasks","has","mergedTasks","length","removeItem","addTask","taskData","newTaskForSupabase","subTasks","st","_st$completed","tempId","now","toString","Math","random","substring","newTaskForLocal","updatedTasks","tasksForSupabase","rest","handleToggleTask","taskId","updated","newCompletedStatus","sub","handleToggleSubTask","subTaskId","allSubTasksCompleted","updatedSubTasks","newSubCompletedStatus","togglePrompt","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","onAuthChange","maxWidth","sx","position","top","right","zIndex","display","alignItems","gap","style","xmlns","height","viewBox","width","fill","marginRight","d","variant","color","fontWeight","ml","my","justifyContent","mb","onClick","onAddTask","currentPrompt","borderBottom","borderColor","value","onChange","label","onToggleTask","onToggleSubTask","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","_c","$RefreshReg$"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Typography, Box, Button, Snackbar, Alert, ThemeProvider, CssBaseline, Tabs, Tab } from '@mui/material';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\nimport AuthHeader from './components/AuthHeader';\nimport { TaskWithSubTasks, SubTask, PromptSelection } from './services/geminiService';\nimport { fetchUserTasks, upsertUserTasks } from './services/supabaseTasksService';\nimport theme from './theme';\nimport { createTheme } from '@mui/material/styles';\nimport Popover from '@mui/material/Popover';\n\n// App version: increment by 0.01 for each change\nconst APP_VERSION = '1.01'; // Updated for My Rewards tab + versioning\n\nexport interface Task { // Base Task interface (for potential future use without subtasks)\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState<TaskWithSubTasks[]>([]);\n  const [promptSelection, setPromptSelection] = useState<PromptSelection>('A');\n  const [user, setUser] = useState<any>(null);\n  const [mergeNotice, setMergeNotice] = useState(false);\n  const [tab, setTab] = useState(0); // 0: My Tasks, 1: My Accomplishments\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setTab(newValue);\n  };\n\n  const incompleteTasks = tasks.filter(t => !t.completed);\n  const completedTasks = tasks.filter(t => t.completed);\n\n  // Load tasks from localStorage on initial mount (if not logged in)\n  useEffect(() => {\n    if (!user) {\n      try {\n        const storedTasks = localStorage.getItem('tasks');\n        if (storedTasks) {\n          const parsedTasks: TaskWithSubTasks[] = JSON.parse(storedTasks);\n          // Convert dueDate strings back to Date objects\n          const tasksWithDates = parsedTasks.map(task => ({\n            ...task,\n            dueDate: task.dueDate ? new Date(task.dueDate) : null\n          }));\n          setTasks(tasksWithDates);\n          console.log('Tasks loaded from localStorage');\n        }\n      } catch (error) {\n        console.error('Failed to load tasks from localStorage:', error);\n      }\n    }\n  }, [user]); // Only run when user changes\n\n  // Save tasks to localStorage only if not logged in\n  useEffect(() => {\n    if (!user) {\n      try {\n        // Convert Date objects to ISO strings before saving\n        const tasksToStore = tasks.map(task => ({\n          ...task,\n          dueDate: task.dueDate ? task.dueDate.toISOString() : null\n        }));\n        localStorage.setItem('tasks', JSON.stringify(tasksToStore));\n      } catch (error) {\n        console.error('Failed to save tasks to localStorage:', error);\n      }\n    }\n  }, [tasks, user]);\n\n  // On login: sync/merge local tasks to Supabase, then clear local\n  useEffect(() => {\n    const doSync = async () => {\n      if (user && user.id) {\n        // 1. Fetch cloud tasks\n        let cloudTasks: TaskWithSubTasks[] = [];\n        try {\n          cloudTasks = await fetchUserTasks(user.id);\n        } catch (err) {\n          console.error('Failed to fetch cloud tasks:', err);\n        }\n        // 2. Load local tasks\n        let localTasks: TaskWithSubTasks[] = [];\n        try {\n          const stored = localStorage.getItem('tasks');\n          if (stored) {\n            localTasks = JSON.parse(stored).map((task: any) => ({\n              ...task,\n              dueDate: task.dueDate ? new Date(task.dueDate) : null\n            }));\n          }\n        } catch {}\n        // 3. Merge: find local tasks not in cloud by ID\n        const cloudIds = new Set(cloudTasks.map(t => t.id));\n        const newLocalTasks = localTasks.filter(t => !cloudIds.has(t.id));\n        let mergedTasks = [...cloudTasks, ...newLocalTasks];\n        if (newLocalTasks.length > 0) {\n          // 4. Upload merged tasks to Supabase\n          try {\n            await upsertUserTasks(user.id, mergedTasks);\n            setMergeNotice(true);\n          } catch (err) {\n            console.error('Failed to upload merged tasks:', err);\n          }\n        }\n        // 5. Clear local storage and use cloud\n        localStorage.removeItem('tasks');\n        setTasks(mergedTasks);\n      }\n    };\n    doSync();\n    // eslint-disable-next-line\n  }, [user]);\n\n  // Updated to accept task data object\n  const addTask = async (taskData: Omit<TaskWithSubTasks, 'id' | 'completed'>) => {\n    // Do not generate a fake id for Supabase\n    const newTaskForSupabase = {\n      ...taskData,\n      completed: false,\n      subTasks: taskData.subTasks.map(st => ({...st, completed: st.completed ?? false }))\n    };\n    // Locally, temporarily assign a random id for optimistic UI (will be replaced on sync)\n    const tempId = Date.now().toString() + Math.random().toString(36).substring(2, 9);\n    const newTaskForLocal: TaskWithSubTasks = {\n      ...newTaskForSupabase,\n      id: tempId,\n    };\n    const updatedTasks = [...tasks, newTaskForLocal];\n    setTasks(updatedTasks);\n    if (user && user.id) {\n      try {\n        // upsertUserTasks should not send the temp id, so filter it out before sending\n        const tasksForSupabase = updatedTasks.map(({id, ...rest}) => rest);\n        await upsertUserTasks(user.id, tasksForSupabase);\n      } catch (err) {\n        console.error('Failed to sync new task to Supabase:', err);\n      }\n    }\n  };\n\n  // Handler to toggle main task and its subtasks\n  const handleToggleTask = async (taskId: string) => {\n    const updated = tasks.map(task => {\n      if (task.id === taskId) {\n        const newCompletedStatus = !task.completed;\n        return {\n          ...task,\n          completed: newCompletedStatus,\n          subTasks: task.subTasks.map(sub => ({ ...sub, completed: newCompletedStatus }))\n        };\n      }\n      return task;\n    });\n    setTasks(updated);\n    if (user && user.id) {\n      try {\n        await upsertUserTasks(user.id, updated);\n      } catch (err) {\n        console.error('Failed to sync toggle to Supabase:', err);\n      }\n    }\n  };\n\n  // Handler to toggle a single subtask and update parent task if needed\n  const handleToggleSubTask = async (taskId: string, subTaskId: string | number) => {\n    const updated = tasks.map(task => {\n      if (task.id === taskId) {\n        let allSubTasksCompleted = true;\n        const updatedSubTasks = task.subTasks.map(sub => {\n          if (sub.id === subTaskId) {\n            const newSubCompletedStatus = !sub.completed;\n            if (!newSubCompletedStatus) allSubTasksCompleted = false;\n            return { ...sub, completed: newSubCompletedStatus };\n          } else {\n            if (!sub.completed) allSubTasksCompleted = false;\n          }\n          return sub;\n        });\n        return { ...task, subTasks: updatedSubTasks, completed: allSubTasksCompleted };\n      }\n      return task;\n    });\n    setTasks(updated);\n    if (user && user.id) {\n      try {\n        await upsertUserTasks(user.id, updated);\n      } catch (err) {\n        console.error('Failed to sync subtask toggle to Supabase:', err);\n      }\n    }\n  };\n\n  // Function to toggle prompt\n  const togglePrompt = () => {\n    setPromptSelection(prev => (prev === 'A' ? 'B' : 'A'));\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {/* Restore AuthHeader for Google login and user state sync */}\n      <AuthHeader onAuthChange={setUser} />\n      <Container maxWidth=\"md\" sx={{ position: 'relative' }}>\n        {/* Version number in top right */}\n        <Box sx={{ position: 'absolute', top: 16, right: 24, zIndex: 10, display: 'flex', alignItems: 'center', gap: 1 }}>\n          {/* Medal Icon and My Rewards */}\n          <span style={{ display: 'flex', alignItems: 'center', gap: 4 }}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 0 24 24\" width=\"20\" fill=\"#FFA000\" style={{ marginRight: 4 }}><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"/></svg>\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontWeight: 600 }}>My Rewards</Typography>\n          </span>\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: 2 }}>\n            v{APP_VERSION}\n          </Typography>\n        </Box>\n        <Box sx={{ my: 4 }}>\n          {/* Prompt Toggle Button */}\n          <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>\n            <Button variant=\"outlined\" onClick={togglePrompt}>\n              Using Prompt: {promptSelection} (Click to Switch)\n            </Button>\n          </Box>\n\n          <AddTaskForm onAddTask={addTask} currentPrompt={promptSelection} user={user} />\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n            <Tabs value={tab} onChange={handleTabChange} variant=\"fullWidth\">\n              <Tab label=\"To Do\" />\n              <Tab label=\"My Accomplishments\" />\n            </Tabs>\n          </Box>\n          {tab === 0 && (\n            // To Do: show only incomplete tasks\n            <TaskList tasks={incompleteTasks} onToggleTask={handleToggleTask} onToggleSubTask={handleToggleSubTask} user={user} />\n          )}\n          {tab === 1 && (\n            // My Accomplishments: show only completed tasks\n            <TaskList tasks={completedTasks} onToggleTask={handleToggleTask} onToggleSubTask={handleToggleSubTask} user={user} />\n          )}\n        </Box>\n      </Container>\n      <Snackbar open={mergeNotice} autoHideDuration={4000} onClose={() => setMergeNotice(false)} anchorOrigin={{vertical:'top',horizontal:'center'}}>\n        <Alert onClose={() => setMergeNotice(false)} severity=\"success\" sx={{ width: '100%' }}>\n          Local tasks have been uploaded and merged with your account!\n        </Alert>\n      </Snackbar>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}