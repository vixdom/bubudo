{"ast":null,"code":"import { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern.js\";\nimport { findMostLikelyADYear } from \"../../calculation/years.js\";\nexport const WEEKDAY_DICTIONARY = {\n  zondag: 0,\n  zon: 0,\n  \"zon.\": 0,\n  zo: 0,\n  \"zo.\": 0,\n  maandag: 1,\n  ma: 1,\n  \"ma.\": 1,\n  dinsdag: 2,\n  din: 2,\n  \"din.\": 2,\n  di: 2,\n  \"di.\": 2,\n  woensdag: 3,\n  woe: 3,\n  \"woe.\": 3,\n  wo: 3,\n  \"wo.\": 3,\n  donderdag: 4,\n  dond: 4,\n  \"dond.\": 4,\n  do: 4,\n  \"do.\": 4,\n  vrijdag: 5,\n  vrij: 5,\n  \"vrij.\": 5,\n  vr: 5,\n  \"vr.\": 5,\n  zaterdag: 6,\n  zat: 6,\n  \"zat.\": 6,\n  \"za\": 6,\n  \"za.\": 6\n};\nexport const MONTH_DICTIONARY = {\n  januari: 1,\n  jan: 1,\n  \"jan.\": 1,\n  februari: 2,\n  feb: 2,\n  \"feb.\": 2,\n  maart: 3,\n  mar: 3,\n  \"mar.\": 3,\n  mrt: 3,\n  \"mrt.\": 3,\n  april: 4,\n  apr: 4,\n  \"apr.\": 4,\n  mei: 5,\n  juni: 6,\n  jun: 6,\n  \"jun.\": 6,\n  juli: 7,\n  jul: 7,\n  \"jul.\": 7,\n  augustus: 8,\n  aug: 8,\n  \"aug.\": 8,\n  september: 9,\n  sep: 9,\n  \"sep.\": 9,\n  sept: 9,\n  \"sept.\": 9,\n  oktober: 10,\n  okt: 10,\n  \"okt.\": 10,\n  november: 11,\n  nov: 11,\n  \"nov.\": 11,\n  december: 12,\n  dec: 12,\n  \"dec.\": 12\n};\nexport const INTEGER_WORD_DICTIONARY = {\n  een: 1,\n  twee: 2,\n  drie: 3,\n  vier: 4,\n  vijf: 5,\n  zes: 6,\n  zeven: 7,\n  acht: 8,\n  negen: 9,\n  tien: 10,\n  elf: 11,\n  twaalf: 12\n};\nexport const ORDINAL_WORD_DICTIONARY = {\n  eerste: 1,\n  tweede: 2,\n  derde: 3,\n  vierde: 4,\n  vijfde: 5,\n  zesde: 6,\n  zevende: 7,\n  achtste: 8,\n  negende: 9,\n  tiende: 10,\n  elfde: 11,\n  twaalfde: 12,\n  dertiende: 13,\n  veertiende: 14,\n  vijftiende: 15,\n  zestiende: 16,\n  zeventiende: 17,\n  achttiende: 18,\n  negentiende: 19,\n  twintigste: 20,\n  \"eenentwintigste\": 21,\n  \"tweeëntwintigste\": 22,\n  \"drieentwintigste\": 23,\n  \"vierentwintigste\": 24,\n  \"vijfentwintigste\": 25,\n  \"zesentwintigste\": 26,\n  \"zevenentwintigste\": 27,\n  \"achtentwintig\": 28,\n  \"negenentwintig\": 29,\n  \"dertigste\": 30,\n  \"eenendertigste\": 31\n};\nexport const TIME_UNIT_DICTIONARY = {\n  sec: \"second\",\n  second: \"second\",\n  seconden: \"second\",\n  min: \"minute\",\n  mins: \"minute\",\n  minute: \"minute\",\n  minuut: \"minute\",\n  minuten: \"minute\",\n  minuutje: \"minute\",\n  h: \"hour\",\n  hr: \"hour\",\n  hrs: \"hour\",\n  uur: \"hour\",\n  u: \"hour\",\n  uren: \"hour\",\n  dag: \"d\",\n  dagen: \"d\",\n  week: \"week\",\n  weken: \"week\",\n  maand: \"month\",\n  maanden: \"month\",\n  jaar: \"year\",\n  jr: \"year\",\n  jaren: \"year\"\n};\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+[\\\\.,][0-9]+|halve?|half|paar)`;\nexport function parseNumberPattern(match) {\n  const num = match.toLowerCase();\n  if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n    return INTEGER_WORD_DICTIONARY[num];\n  } else if (num === \"paar\") {\n    return 2;\n  } else if (num === \"half\" || num.match(/halve?/)) {\n    return 0.5;\n  }\n  return parseFloat(num.replace(\",\", \".\"));\n}\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:ste|de)?)`;\nexport function parseOrdinalNumberPattern(match) {\n  let num = match.toLowerCase();\n  if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n    return ORDINAL_WORD_DICTIONARY[num];\n  }\n  num = num.replace(/(?:ste|de)$/i, \"\");\n  return parseInt(num);\n}\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s*(?:voor Christus|na Christus)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match) {\n  if (/voor Christus/i.test(match)) {\n    match = match.replace(/voor Christus/i, \"\");\n    return -parseInt(match);\n  }\n  if (/na Christus/i.test(match)) {\n    match = match.replace(/na Christus/i, \"\");\n    return parseInt(match);\n  }\n  const rawYearNumber = parseInt(match);\n  return findMostLikelyADYear(rawYearNumber);\n}\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:binnen|in)\\\\s*)?`, SINGLE_TIME_UNIT_PATTERN);\nexport function parseTimeUnits(timeunitText) {\n  const fragments = {};\n  let remainingText = timeunitText;\n  let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  while (match) {\n    collectDateTimeFragment(fragments, match);\n    remainingText = remainingText.substring(match[0].length);\n    match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  }\n  return fragments;\n}\nfunction collectDateTimeFragment(fragments, match) {\n  const num = parseNumberPattern(match[1]);\n  const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n  fragments[unit] = num;\n}","map":{"version":3,"names":["matchAnyPattern","repeatedTimeunitPattern","findMostLikelyADYear","WEEKDAY_DICTIONARY","zondag","zon","zo","maandag","ma","dinsdag","din","di","woensdag","woe","wo","donderdag","dond","do","vrijdag","vrij","vr","zaterdag","zat","MONTH_DICTIONARY","januari","jan","februari","feb","maart","mar","mrt","april","apr","mei","juni","jun","juli","jul","augustus","aug","september","sep","sept","oktober","okt","november","nov","december","dec","INTEGER_WORD_DICTIONARY","een","twee","drie","vier","vijf","zes","zeven","acht","negen","tien","elf","twaalf","ORDINAL_WORD_DICTIONARY","eerste","tweede","derde","vierde","vijfde","zesde","zevende","achtste","negende","tiende","elfde","twaalfde","dertiende","veertiende","vijftiende","zestiende","zeventiende","achttiende","negentiende","twintigste","TIME_UNIT_DICTIONARY","sec","second","seconden","min","mins","minute","minuut","minuten","minuutje","h","hr","hrs","uur","u","uren","dag","dagen","week","weken","maand","maanden","jaar","jr","jaren","NUMBER_PATTERN","parseNumberPattern","match","num","toLowerCase","undefined","parseFloat","replace","ORDINAL_NUMBER_PATTERN","parseOrdinalNumberPattern","parseInt","YEAR_PATTERN","parseYear","test","rawYearNumber","SINGLE_TIME_UNIT_PATTERN","SINGLE_TIME_UNIT_REGEX","RegExp","TIME_UNITS_PATTERN","parseTimeUnits","timeunitText","fragments","remainingText","exec","collectDateTimeFragment","substring","length","unit"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/constants.ts"],"sourcesContent":["import { OpUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    // Zondag\n    zondag: 0,\n    zon: 0,\n    \"zon.\": 0,\n    zo: 0,\n    \"zo.\": 0,\n    // Maandag\n    maandag: 1,\n    ma: 1,\n    \"ma.\": 1,\n    // Dinsdag\n    dinsdag: 2,\n    din: 2,\n    \"din.\": 2,\n    di: 2,\n    \"di.\": 2,\n    // Woensdag\n    woensdag: 3,\n    woe: 3,\n    \"woe.\": 3,\n    wo: 3,\n    \"wo.\": 3,\n    // Donderdag\n    donderdag: 4,\n    dond: 4,\n    \"dond.\": 4,\n    do: 4,\n    \"do.\": 4,\n    // Vrijdag\n    vrijdag: 5,\n    vrij: 5,\n    \"vrij.\": 5,\n    vr: 5,\n    \"vr.\": 5,\n    // Zaterdag\n    zaterdag: 6,\n    zat: 6,\n    \"zat.\": 6,\n    \"za\": 6,\n    \"za.\": 6,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    januari: 1,\n    jan: 1,\n    \"jan.\": 1,\n    februari: 2,\n    feb: 2,\n    \"feb.\": 2,\n    maart: 3,\n    mar: 3,\n    \"mar.\": 3,\n    mrt: 3,\n    \"mrt.\": 3,\n    april: 4,\n    apr: 4,\n    \"apr.\": 4,\n    mei: 5,\n    juni: 6,\n    jun: 6,\n    \"jun.\": 6,\n    juli: 7,\n    jul: 7,\n    \"jul.\": 7,\n    augustus: 8,\n    aug: 8,\n    \"aug.\": 8,\n    september: 9,\n    sep: 9,\n    \"sep.\": 9,\n    sept: 9,\n    \"sept.\": 9,\n    oktober: 10,\n    okt: 10,\n    \"okt.\": 10,\n    november: 11,\n    nov: 11,\n    \"nov.\": 11,\n    december: 12,\n    dec: 12,\n    \"dec.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    een: 1,\n    twee: 2,\n    drie: 3,\n    vier: 4,\n    vijf: 5,\n    zes: 6,\n    zeven: 7,\n    acht: 8,\n    negen: 9,\n    tien: 10,\n    elf: 11,\n    twaalf: 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    eerste: 1,\n    tweede: 2,\n    derde: 3,\n    vierde: 4,\n    vijfde: 5,\n    zesde: 6,\n    zevende: 7,\n    achtste: 8,\n    negende: 9,\n    tiende: 10,\n    elfde: 11,\n    twaalfde: 12,\n    dertiende: 13,\n    veertiende: 14,\n    vijftiende: 15,\n    zestiende: 16,\n    zeventiende: 17,\n    achttiende: 18,\n    negentiende: 19,\n    twintigste: 20,\n    \"eenentwintigste\": 21,\n    \"tweeëntwintigste\": 22,\n    \"drieentwintigste\": 23,\n    \"vierentwintigste\": 24,\n    \"vijfentwintigste\": 25,\n    \"zesentwintigste\": 26,\n    \"zevenentwintigste\": 27,\n    \"achtentwintig\": 28,\n    \"negenentwintig\": 29,\n    \"dertigste\": 30,\n    \"eenendertigste\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType } = {\n    sec: \"second\",\n    second: \"second\",\n    seconden: \"second\",\n    min: \"minute\",\n    mins: \"minute\",\n    minute: \"minute\",\n    minuut: \"minute\",\n    minuten: \"minute\",\n    minuutje: \"minute\",\n    h: \"hour\",\n    hr: \"hour\",\n    hrs: \"hour\",\n    uur: \"hour\",\n    u: \"hour\",\n    uren: \"hour\",\n    dag: \"d\",\n    dagen: \"d\",\n    week: \"week\",\n    weken: \"week\",\n    maand: \"month\",\n    maanden: \"month\",\n    jaar: \"year\",\n    jr: \"year\",\n    jaren: \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+[\\\\.,][0-9]+|halve?|half|paar)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"paar\") {\n        return 2;\n    } else if (num === \"half\" || num.match(/halve?/)) {\n        return 0.5;\n    }\n    // Replace \",\" with \".\" to support some European languages\n    return parseFloat(num.replace(\",\", \".\"));\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:ste|de)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n    num = num.replace(/(?:ste|de)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s*(?:voor Christus|na Christus)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match: string): number {\n    if (/voor Christus/i.test(match)) {\n        // Before Christ\n        match = match.replace(/voor Christus/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/na Christus/i.test(match)) {\n        match = match.replace(/na Christus/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:binnen|in)\\\\s*)?`, SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length);\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}