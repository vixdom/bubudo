{"ast":null,"code":"import { WEEKDAY_DICTIONARY } from \"../constants.js\";\nimport { matchAnyPattern } from \"../../../utils/pattern.js\";\nimport { createParsingComponentsAtWeekday } from \"../../../common/calculation/weekdays.js\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking.js\";\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\nexport default class RUWeekdayParser extends AbstractParserWithLeftRightBoundaryChecking {\n  innerPatternString(context) {\n    return `(?:(?:,|\\\\(|（)\\\\s*)?` + `(?:в\\\\s*?)?` + `(?:(эту|этот|прошлый|прошлую|следующий|следующую|следующего)\\\\s*)?` + `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` + `(?:\\\\s*(?:,|\\\\)|）))?` + `(?:\\\\s*на\\\\s*(этой|прошлой|следующей)\\\\s*неделе)?`;\n  }\n  innerExtract(context, match) {\n    const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n    const weekday = WEEKDAY_DICTIONARY[dayOfWeek];\n    const prefix = match[PREFIX_GROUP];\n    const postfix = match[POSTFIX_GROUP];\n    let modifierWord = prefix || postfix;\n    modifierWord = modifierWord || \"\";\n    modifierWord = modifierWord.toLowerCase();\n    let modifier = null;\n    if (modifierWord == \"прошлый\" || modifierWord == \"прошлую\" || modifierWord == \"прошлой\") {\n      modifier = \"last\";\n    } else if (modifierWord == \"следующий\" || modifierWord == \"следующую\" || modifierWord == \"следующей\" || modifierWord == \"следующего\") {\n      modifier = \"next\";\n    } else if (modifierWord == \"этот\" || modifierWord == \"эту\" || modifierWord == \"этой\") {\n      modifier = \"this\";\n    }\n    return createParsingComponentsAtWeekday(context.reference, weekday, modifier);\n  }\n}","map":{"version":3,"names":["WEEKDAY_DICTIONARY","matchAnyPattern","createParsingComponentsAtWeekday","AbstractParserWithLeftRightBoundaryChecking","PREFIX_GROUP","WEEKDAY_GROUP","POSTFIX_GROUP","RUWeekdayParser","innerPatternString","context","innerExtract","match","dayOfWeek","toLowerCase","weekday","prefix","postfix","modifierWord","modifier","reference"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ru/parsers/RUWeekdayParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { createParsingComponentsAtWeekday } from \"../../../common/calculation/weekdays\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking\";\n\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\n\nexport default class RUWeekdayParser extends AbstractParserWithLeftRightBoundaryChecking {\n    innerPatternString(context: ParsingContext): string {\n        return (\n            `(?:(?:,|\\\\(|（)\\\\s*)?` +\n            `(?:в\\\\s*?)?` +\n            `(?:(эту|этот|прошлый|прошлую|следующий|следующую|следующего)\\\\s*)?` +\n            `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n            `(?:\\\\s*(?:,|\\\\)|）))?` +\n            `(?:\\\\s*на\\\\s*(этой|прошлой|следующей)\\\\s*неделе)?`\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const weekday = WEEKDAY_DICTIONARY[dayOfWeek];\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[POSTFIX_GROUP];\n        let modifierWord = prefix || postfix;\n        modifierWord = modifierWord || \"\";\n        modifierWord = modifierWord.toLowerCase();\n\n        let modifier = null;\n        if (modifierWord == \"прошлый\" || modifierWord == \"прошлую\" || modifierWord == \"прошлой\") {\n            modifier = \"last\";\n        } else if (\n            modifierWord == \"следующий\" ||\n            modifierWord == \"следующую\" ||\n            modifierWord == \"следующей\" ||\n            modifierWord == \"следующего\"\n        ) {\n            modifier = \"next\";\n        } else if (modifierWord == \"этот\" || modifierWord == \"эту\" || modifierWord == \"этой\") {\n            modifier = \"this\";\n        }\n\n        return createParsingComponentsAtWeekday(context.reference, weekday, modifier);\n    }\n}\n"],"mappings":"AAEA,SAASA,kBAAkB,QAAQ,iBAAe;AAClD,SAASC,eAAe,QAAQ,2BAAyB;AACzD,SAASC,gCAAgC,QAAQ,yCAAuC;AACxF,SAASC,2CAA2C,QAAQ,6CAA2C;AAEvG,MAAMC,YAAY,GAAG,CAAC;AACtB,MAAMC,aAAa,GAAG,CAAC;AACvB,MAAMC,aAAa,GAAG,CAAC;AAEvB,eAAc,MAAOC,eAAgB,SAAQJ,2CAA2C;EACpFK,kBAAkBA,CAACC,OAAuB;IACtC,OACI,sBAAsB,GACtB,aAAa,GACb,oEAAoE,GACpE,IAAIR,eAAe,CAACD,kBAAkB,CAAC,GAAG,GAC1C,sBAAsB,GACtB,mDAAmD;EAE3D;EAEAU,YAAYA,CAACD,OAAuB,EAAEE,KAAuB;IACzD,MAAMC,SAAS,GAAGD,KAAK,CAACN,aAAa,CAAC,CAACQ,WAAW,EAAE;IACpD,MAAMC,OAAO,GAAGd,kBAAkB,CAACY,SAAS,CAAC;IAC7C,MAAMG,MAAM,GAAGJ,KAAK,CAACP,YAAY,CAAC;IAClC,MAAMY,OAAO,GAAGL,KAAK,CAACL,aAAa,CAAC;IACpC,IAAIW,YAAY,GAAGF,MAAM,IAAIC,OAAO;IACpCC,YAAY,GAAGA,YAAY,IAAI,EAAE;IACjCA,YAAY,GAAGA,YAAY,CAACJ,WAAW,EAAE;IAEzC,IAAIK,QAAQ,GAAG,IAAI;IACnB,IAAID,YAAY,IAAI,SAAS,IAAIA,YAAY,IAAI,SAAS,IAAIA,YAAY,IAAI,SAAS,EAAE;MACrFC,QAAQ,GAAG,MAAM;KACpB,MAAM,IACHD,YAAY,IAAI,WAAW,IAC3BA,YAAY,IAAI,WAAW,IAC3BA,YAAY,IAAI,WAAW,IAC3BA,YAAY,IAAI,YAAY,EAC9B;MACEC,QAAQ,GAAG,MAAM;KACpB,MAAM,IAAID,YAAY,IAAI,MAAM,IAAIA,YAAY,IAAI,KAAK,IAAIA,YAAY,IAAI,MAAM,EAAE;MAClFC,QAAQ,GAAG,MAAM;;IAGrB,OAAOhB,gCAAgC,CAACO,OAAO,CAACU,SAAS,EAAEL,OAAO,EAAEI,QAAQ,CAAC;EACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}