{"ast":null,"code":"var _jsxFileName = \"/Users/mvikr/Projects/TaskApp/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Typography, Box } from '@mui/material';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Updated to accept task data object\n  const addTask = taskData => {\n    const newTask = {\n      id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n      ...taskData,\n      completed: false,\n      // New tasks start as incomplete\n      // Ensure subtasks also start as incomplete if not already set (though geminiService adds this)\n      subTasks: taskData.subTasks.map(st => {\n        var _st$completed;\n        return {\n          ...st,\n          completed: (_st$completed = st.completed) !== null && _st$completed !== void 0 ? _st$completed : false\n        };\n      })\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // Handler to toggle main task and its subtasks\n  const handleToggleTask = taskId => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        const newCompletedStatus = !task.completed;\n        return {\n          ...task,\n          completed: newCompletedStatus,\n          subTasks: task.subTasks.map(sub => ({\n            ...sub,\n            completed: newCompletedStatus\n          }))\n        };\n      }\n      return task;\n    }));\n  };\n\n  // Handler to toggle a single subtask and update parent task if needed\n  const handleToggleSubTask = (taskId, subTaskId) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        let allSubTasksCompleted = true;\n        const updatedSubTasks = task.subTasks.map(sub => {\n          if (sub.id === subTaskId) {\n            const newSubCompletedStatus = !sub.completed;\n            if (!newSubCompletedStatus) allSubTasksCompleted = false; // If any is unchecked, parent is not complete\n            return {\n              ...sub,\n              completed: newSubCompletedStatus\n            };\n          } else {\n            if (!sub.completed) allSubTasksCompleted = false; // Check status of other subtasks\n          }\n          return sub;\n        });\n        // Ensure parent 'completed' reflects if ALL subtasks are complete *after* the toggle\n        return {\n          ...task,\n          subTasks: updatedSubTasks,\n          completed: allSubTasksCompleted\n        };\n      }\n      return task;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        my: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        align: \"center\",\n        children: \"Task App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddTaskForm, {\n        onAddTask: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: tasks,\n        onToggleTask: handleToggleTask,\n        onToggleSubTask: handleToggleSubTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"+34uIVDBalDkucWnJ7Aj1Xxb0MA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Container","Typography","Box","TaskList","AddTaskForm","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","addTask","taskData","newTask","id","Date","now","toString","Math","random","substring","completed","subTasks","map","st","_st$completed","handleToggleTask","taskId","task","newCompletedStatus","sub","handleToggleSubTask","subTaskId","allSubTasksCompleted","updatedSubTasks","newSubCompletedStatus","maxWidth","children","sx","my","variant","component","gutterBottom","align","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","onToggleTask","onToggleSubTask","_c","$RefreshReg$"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Container, Typography, Box } from '@mui/material';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\nimport { TaskWithSubTasks, SubTask } from './services/geminiService';\n\nexport interface Task { // Base Task interface (for potential future use without subtasks)\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState<TaskWithSubTasks[]>([]);\n\n  // Updated to accept task data object\n  const addTask = (taskData: Omit<TaskWithSubTasks, 'id' | 'completed'>) => {\n    const newTask: TaskWithSubTasks = {\n      id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n      ...taskData,\n      completed: false, // New tasks start as incomplete\n      // Ensure subtasks also start as incomplete if not already set (though geminiService adds this)\n      subTasks: taskData.subTasks.map(st => ({...st, completed: st.completed ?? false })) \n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // Handler to toggle main task and its subtasks\n  const handleToggleTask = (taskId: string) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        const newCompletedStatus = !task.completed;\n        return {\n          ...task,\n          completed: newCompletedStatus,\n          subTasks: task.subTasks.map(sub => ({ ...sub, completed: newCompletedStatus }))\n        };\n      }\n      return task;\n    }));\n  };\n\n  // Handler to toggle a single subtask and update parent task if needed\n  const handleToggleSubTask = (taskId: string, subTaskId: string) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        let allSubTasksCompleted = true;\n        const updatedSubTasks = task.subTasks.map(sub => {\n          if (sub.id === subTaskId) {\n            const newSubCompletedStatus = !sub.completed;\n            if (!newSubCompletedStatus) allSubTasksCompleted = false; // If any is unchecked, parent is not complete\n            return { ...sub, completed: newSubCompletedStatus };\n          } else {\n            if (!sub.completed) allSubTasksCompleted = false; // Check status of other subtasks\n          }\n          return sub;\n        });\n        // Ensure parent 'completed' reflects if ALL subtasks are complete *after* the toggle\n        return { ...task, subTasks: updatedSubTasks, completed: allSubTasksCompleted };\n      }\n      return task;\n    }));\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\">\n          Task App\n        </Typography>\n        <AddTaskForm onAddTask={addTask} />\n        <TaskList \n          tasks={tasks} \n          onToggleTask={handleToggleTask} \n          onToggleSubTask={handleToggleSubTask} \n        />\n      </Box>\n    </Container>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,UAAU,EAAEC,GAAG,QAAQ,eAAe;AAC1D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASnD,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAqB,EAAE,CAAC;;EAE1D;EACA,MAAMY,OAAO,GAAIC,QAAoD,IAAK;IACxE,MAAMC,OAAyB,GAAG;MAChCC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACF,QAAQ,CAAC,EAAE,CAAC,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MACtE,GAAGR,QAAQ;MACXS,SAAS,EAAE,KAAK;MAAE;MAClB;MACAC,QAAQ,EAAEV,QAAQ,CAACU,QAAQ,CAACC,GAAG,CAACC,EAAE;QAAA,IAAAC,aAAA;QAAA,OAAK;UAAC,GAAGD,EAAE;UAAEH,SAAS,GAAAI,aAAA,GAAED,EAAE,CAACH,SAAS,cAAAI,aAAA,cAAAA,aAAA,GAAI;QAAM,CAAC;MAAA,CAAC;IACpF,CAAC;IACDf,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEI,OAAO,CAAC,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMa,gBAAgB,GAAIC,MAAc,IAAK;IAC3CjB,QAAQ,CAACD,KAAK,CAACc,GAAG,CAACK,IAAI,IAAI;MACzB,IAAIA,IAAI,CAACd,EAAE,KAAKa,MAAM,EAAE;QACtB,MAAME,kBAAkB,GAAG,CAACD,IAAI,CAACP,SAAS;QAC1C,OAAO;UACL,GAAGO,IAAI;UACPP,SAAS,EAAEQ,kBAAkB;UAC7BP,QAAQ,EAAEM,IAAI,CAACN,QAAQ,CAACC,GAAG,CAACO,GAAG,KAAK;YAAE,GAAGA,GAAG;YAAET,SAAS,EAAEQ;UAAmB,CAAC,CAAC;QAChF,CAAC;MACH;MACA,OAAOD,IAAI;IACb,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMG,mBAAmB,GAAGA,CAACJ,MAAc,EAAEK,SAAiB,KAAK;IACjEtB,QAAQ,CAACD,KAAK,CAACc,GAAG,CAACK,IAAI,IAAI;MACzB,IAAIA,IAAI,CAACd,EAAE,KAAKa,MAAM,EAAE;QACtB,IAAIM,oBAAoB,GAAG,IAAI;QAC/B,MAAMC,eAAe,GAAGN,IAAI,CAACN,QAAQ,CAACC,GAAG,CAACO,GAAG,IAAI;UAC/C,IAAIA,GAAG,CAAChB,EAAE,KAAKkB,SAAS,EAAE;YACxB,MAAMG,qBAAqB,GAAG,CAACL,GAAG,CAACT,SAAS;YAC5C,IAAI,CAACc,qBAAqB,EAAEF,oBAAoB,GAAG,KAAK,CAAC,CAAC;YAC1D,OAAO;cAAE,GAAGH,GAAG;cAAET,SAAS,EAAEc;YAAsB,CAAC;UACrD,CAAC,MAAM;YACL,IAAI,CAACL,GAAG,CAACT,SAAS,EAAEY,oBAAoB,GAAG,KAAK,CAAC,CAAC;UACpD;UACA,OAAOH,GAAG;QACZ,CAAC,CAAC;QACF;QACA,OAAO;UAAE,GAAGF,IAAI;UAAEN,QAAQ,EAAEY,eAAe;UAAEb,SAAS,EAAEY;QAAqB,CAAC;MAChF;MACA,OAAOL,IAAI;IACb,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEtB,OAAA,CAACN,SAAS;IAACoC,QAAQ,EAAC,IAAI;IAAAC,QAAA,eACtB/B,OAAA,CAACJ,GAAG;MAACoC,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAF,QAAA,gBACjB/B,OAAA,CAACL,UAAU;QAACuC,OAAO,EAAC,IAAI;QAACC,SAAS,EAAC,IAAI;QAACC,YAAY;QAACC,KAAK,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAEpE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbzC,OAAA,CAACF,WAAW;QAAC4C,SAAS,EAAErC;MAAQ;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnCzC,OAAA,CAACH,QAAQ;QACPM,KAAK,EAAEA,KAAM;QACbwC,YAAY,EAAEvB,gBAAiB;QAC/BwB,eAAe,EAAEnB;MAAoB;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB,CAAC;AAACvC,EAAA,CAnEID,GAAa;AAAA4C,EAAA,GAAb5C,GAAa;AAqEnB,eAAeA,GAAG;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}