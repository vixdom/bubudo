{"ast":null,"code":"import { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern.js\";\nimport { findMostLikelyADYear } from \"../../calculation/years.js\";\nexport const WEEKDAY_DICTIONARY = {\n  \"sonntag\": 0,\n  \"so\": 0,\n  \"montag\": 1,\n  \"mo\": 1,\n  \"dienstag\": 2,\n  \"di\": 2,\n  \"mittwoch\": 3,\n  \"mi\": 3,\n  \"donnerstag\": 4,\n  \"do\": 4,\n  \"freitag\": 5,\n  \"fr\": 5,\n  \"samstag\": 6,\n  \"sa\": 6\n};\nexport const MONTH_DICTIONARY = {\n  \"januar\": 1,\n  \"jänner\": 1,\n  \"janner\": 1,\n  \"jan\": 1,\n  \"jan.\": 1,\n  \"februar\": 2,\n  \"feber\": 2,\n  \"feb\": 2,\n  \"feb.\": 2,\n  \"märz\": 3,\n  \"maerz\": 3,\n  \"mär\": 3,\n  \"mär.\": 3,\n  \"mrz\": 3,\n  \"mrz.\": 3,\n  \"april\": 4,\n  \"apr\": 4,\n  \"apr.\": 4,\n  \"mai\": 5,\n  \"juni\": 6,\n  \"jun\": 6,\n  \"jun.\": 6,\n  \"juli\": 7,\n  \"jul\": 7,\n  \"jul.\": 7,\n  \"august\": 8,\n  \"aug\": 8,\n  \"aug.\": 8,\n  \"september\": 9,\n  \"sep\": 9,\n  \"sep.\": 9,\n  \"sept\": 9,\n  \"sept.\": 9,\n  \"oktober\": 10,\n  \"okt\": 10,\n  \"okt.\": 10,\n  \"november\": 11,\n  \"nov\": 11,\n  \"nov.\": 11,\n  \"dezember\": 12,\n  \"dez\": 12,\n  \"dez.\": 12\n};\nexport const INTEGER_WORD_DICTIONARY = {\n  \"eins\": 1,\n  \"eine\": 1,\n  \"einem\": 1,\n  \"einen\": 1,\n  \"einer\": 1,\n  \"zwei\": 2,\n  \"drei\": 3,\n  \"vier\": 4,\n  \"fünf\": 5,\n  \"fuenf\": 5,\n  \"sechs\": 6,\n  \"sieben\": 7,\n  \"acht\": 8,\n  \"neun\": 9,\n  \"zehn\": 10,\n  \"elf\": 11,\n  \"zwölf\": 12,\n  \"zwoelf\": 12\n};\nexport const TIME_UNIT_DICTIONARY = {\n  sek: \"second\",\n  sekunde: \"second\",\n  sekunden: \"second\",\n  min: \"minute\",\n  minute: \"minute\",\n  minuten: \"minute\",\n  h: \"hour\",\n  std: \"hour\",\n  stunde: \"hour\",\n  stunden: \"hour\",\n  tag: \"d\",\n  tage: \"d\",\n  tagen: \"d\",\n  woche: \"week\",\n  wochen: \"week\",\n  monat: \"month\",\n  monate: \"month\",\n  monaten: \"month\",\n  monats: \"month\",\n  quartal: \"quarter\",\n  quartals: \"quarter\",\n  quartale: \"quarter\",\n  quartalen: \"quarter\",\n  a: \"year\",\n  j: \"year\",\n  jr: \"year\",\n  jahr: \"year\",\n  jahre: \"year\",\n  jahren: \"year\",\n  jahres: \"year\"\n};\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\\\.[0-9]+|halb?|halbe?|einigen?|wenigen?|mehreren?)`;\nexport function parseNumberPattern(match) {\n  const num = match.toLowerCase();\n  if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n    return INTEGER_WORD_DICTIONARY[num];\n  } else if (num === \"ein\" || num === \"einer\" || num === \"einem\" || num === \"einen\" || num === \"eine\") {\n    return 1;\n  } else if (num.match(/wenigen/)) {\n    return 2;\n  } else if (num.match(/halb/) || num.match(/halben/)) {\n    return 0.5;\n  } else if (num.match(/einigen/)) {\n    return 3;\n  } else if (num.match(/mehreren/)) {\n    return 7;\n  }\n  return parseFloat(num);\n}\nexport const YEAR_PATTERN = `(?:[0-9]{1,4}(?:\\\\s*[vn]\\\\.?\\\\s*(?:C(?:hr)?|(?:u\\\\.?|d\\\\.?(?:\\\\s*g\\\\.?)?)?\\\\s*Z)\\\\.?|\\\\s*(?:u\\\\.?|d\\\\.?(?:\\\\s*g\\\\.)?)\\\\s*Z\\\\.?)?)`;\nexport function parseYear(match) {\n  if (/v/i.test(match)) {\n    return -parseInt(match.replace(/[^0-9]+/gi, \"\"));\n  }\n  if (/n/i.test(match)) {\n    return parseInt(match.replace(/[^0-9]+/gi, \"\"));\n  }\n  if (/z/i.test(match)) {\n    return parseInt(match.replace(/[^0-9]+/gi, \"\"));\n  }\n  const rawYearNumber = parseInt(match);\n  return findMostLikelyADYear(rawYearNumber);\n}\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\"\", SINGLE_TIME_UNIT_PATTERN);\nexport function parseTimeUnits(timeunitText) {\n  const fragments = {};\n  let remainingText = timeunitText;\n  let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  while (match) {\n    collectDateTimeFragment(fragments, match);\n    remainingText = remainingText.substring(match[0].length);\n    match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  }\n  return fragments;\n}\nfunction collectDateTimeFragment(fragments, match) {\n  const num = parseNumberPattern(match[1]);\n  const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n  fragments[unit] = num;\n}","map":{"version":3,"names":["matchAnyPattern","repeatedTimeunitPattern","findMostLikelyADYear","WEEKDAY_DICTIONARY","MONTH_DICTIONARY","INTEGER_WORD_DICTIONARY","TIME_UNIT_DICTIONARY","sek","sekunde","sekunden","min","minute","minuten","h","std","stunde","stunden","tag","tage","tagen","woche","wochen","monat","monate","monaten","monats","quartal","quartals","quartale","quartalen","a","j","jr","jahr","jahre","jahren","jahres","NUMBER_PATTERN","parseNumberPattern","match","num","toLowerCase","undefined","parseFloat","YEAR_PATTERN","parseYear","test","parseInt","replace","rawYearNumber","SINGLE_TIME_UNIT_PATTERN","SINGLE_TIME_UNIT_REGEX","RegExp","TIME_UNITS_PATTERN","parseTimeUnits","timeunitText","fragments","remainingText","exec","collectDateTimeFragment","substring","length","unit"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/de/constants.ts"],"sourcesContent":["import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    \"sonntag\": 0,\n    \"so\": 0,\n    \"montag\": 1,\n    \"mo\": 1,\n    \"dienstag\": 2,\n    \"di\": 2,\n    \"mittwoch\": 3,\n    \"mi\": 3,\n    \"donnerstag\": 4,\n    \"do\": 4,\n    \"freitag\": 5,\n    \"fr\": 5,\n    \"samstag\": 6,\n    \"sa\": 6,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    \"januar\": 1,\n    \"jänner\": 1,\n    \"janner\": 1,\n    \"jan\": 1,\n    \"jan.\": 1,\n    \"februar\": 2,\n    \"feber\": 2,\n    \"feb\": 2,\n    \"feb.\": 2,\n    \"märz\": 3,\n    \"maerz\": 3,\n    \"mär\": 3,\n    \"mär.\": 3,\n    \"mrz\": 3,\n    \"mrz.\": 3,\n    \"april\": 4,\n    \"apr\": 4,\n    \"apr.\": 4,\n    \"mai\": 5,\n    \"juni\": 6,\n    \"jun\": 6,\n    \"jun.\": 6,\n    \"juli\": 7,\n    \"jul\": 7,\n    \"jul.\": 7,\n    \"august\": 8,\n    \"aug\": 8,\n    \"aug.\": 8,\n    \"september\": 9,\n    \"sep\": 9,\n    \"sep.\": 9,\n    \"sept\": 9,\n    \"sept.\": 9,\n    \"oktober\": 10,\n    \"okt\": 10,\n    \"okt.\": 10,\n    \"november\": 11,\n    \"nov\": 11,\n    \"nov.\": 11,\n    \"dezember\": 12,\n    \"dez\": 12,\n    \"dez.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    \"eins\": 1,\n    \"eine\": 1,\n    \"einem\": 1,\n    \"einen\": 1,\n    \"einer\": 1,\n    \"zwei\": 2,\n    \"drei\": 3,\n    \"vier\": 4,\n    \"fünf\": 5,\n    \"fuenf\": 5,\n    \"sechs\": 6,\n    \"sieben\": 7,\n    \"acht\": 8,\n    \"neun\": 9,\n    \"zehn\": 10,\n    \"elf\": 11,\n    \"zwölf\": 12,\n    \"zwoelf\": 12,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    sek: \"second\",\n    sekunde: \"second\",\n    sekunden: \"second\",\n    min: \"minute\",\n    minute: \"minute\",\n    minuten: \"minute\",\n    h: \"hour\",\n    std: \"hour\",\n    stunde: \"hour\",\n    stunden: \"hour\",\n    tag: \"d\",\n    tage: \"d\",\n    tagen: \"d\",\n    woche: \"week\",\n    wochen: \"week\",\n    monat: \"month\",\n    monate: \"month\",\n    monaten: \"month\",\n    monats: \"month\",\n    quartal: \"quarter\",\n    quartals: \"quarter\",\n    quartale: \"quarter\",\n    quartalen: \"quarter\",\n    a: \"year\",\n    j: \"year\",\n    jr: \"year\",\n    jahr: \"year\",\n    jahre: \"year\",\n    jahren: \"year\",\n    jahres: \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|halb?|halbe?|einigen?|wenigen?|mehreren?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"ein\" || num === \"einer\" || num === \"einem\" || num === \"einen\" || num === \"eine\") {\n        return 1;\n    } else if (num.match(/wenigen/)) {\n        return 2;\n    } else if (num.match(/halb/) || num.match(/halben/)) {\n        return 0.5;\n    } else if (num.match(/einigen/)) {\n        return 3;\n    } else if (num.match(/mehreren/)) {\n        return 7;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[0-9]{1,4}(?:\\\\s*[vn]\\\\.?\\\\s*(?:C(?:hr)?|(?:u\\\\.?|d\\\\.?(?:\\\\s*g\\\\.?)?)?\\\\s*Z)\\\\.?|\\\\s*(?:u\\\\.?|d\\\\.?(?:\\\\s*g\\\\.)?)\\\\s*Z\\\\.?)?)`;\nexport function parseYear(match: string): number {\n    if (/v/i.test(match)) {\n        // v.Chr.\n        return -parseInt(match.replace(/[^0-9]+/gi, \"\"));\n    }\n\n    if (/n/i.test(match)) {\n        // n.Chr.\n        return parseInt(match.replace(/[^0-9]+/gi, \"\"));\n    }\n\n    if (/z/i.test(match)) {\n        // n.Chr. as \"uZ\" or \"dgZ\"\n        return parseInt(match.replace(/[^0-9]+/gi, \"\"));\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\"\", SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length);\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}