{"ast":null,"code":"import { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern.js\";\nexport const WEEKDAY_DICTIONARY = {\n  \"domingo\": 0,\n  \"dom\": 0,\n  \"lunes\": 1,\n  \"lun\": 1,\n  \"martes\": 2,\n  \"mar\": 2,\n  \"miércoles\": 3,\n  \"miercoles\": 3,\n  \"mié\": 3,\n  \"mie\": 3,\n  \"jueves\": 4,\n  \"jue\": 4,\n  \"viernes\": 5,\n  \"vie\": 5,\n  \"sábado\": 6,\n  \"sabado\": 6,\n  \"sáb\": 6,\n  \"sab\": 6\n};\nexport const MONTH_DICTIONARY = {\n  \"enero\": 1,\n  \"ene\": 1,\n  \"ene.\": 1,\n  \"febrero\": 2,\n  \"feb\": 2,\n  \"feb.\": 2,\n  \"marzo\": 3,\n  \"mar\": 3,\n  \"mar.\": 3,\n  \"abril\": 4,\n  \"abr\": 4,\n  \"abr.\": 4,\n  \"mayo\": 5,\n  \"may\": 5,\n  \"may.\": 5,\n  \"junio\": 6,\n  \"jun\": 6,\n  \"jun.\": 6,\n  \"julio\": 7,\n  \"jul\": 7,\n  \"jul.\": 7,\n  \"agosto\": 8,\n  \"ago\": 8,\n  \"ago.\": 8,\n  \"septiembre\": 9,\n  \"setiembre\": 9,\n  \"sep\": 9,\n  \"sep.\": 9,\n  \"octubre\": 10,\n  \"oct\": 10,\n  \"oct.\": 10,\n  \"noviembre\": 11,\n  \"nov\": 11,\n  \"nov.\": 11,\n  \"diciembre\": 12,\n  \"dic\": 12,\n  \"dic.\": 12\n};\nexport const INTEGER_WORD_DICTIONARY = {\n  \"uno\": 1,\n  \"dos\": 2,\n  \"tres\": 3,\n  \"cuatro\": 4,\n  \"cinco\": 5,\n  \"seis\": 6,\n  \"siete\": 7,\n  \"ocho\": 8,\n  \"nueve\": 9,\n  \"diez\": 10,\n  \"once\": 11,\n  \"doce\": 12,\n  \"trece\": 13\n};\nexport const TIME_UNIT_DICTIONARY = {\n  \"sec\": \"second\",\n  \"segundo\": \"second\",\n  \"segundos\": \"second\",\n  \"min\": \"minute\",\n  \"mins\": \"minute\",\n  \"minuto\": \"minute\",\n  \"minutos\": \"minute\",\n  \"h\": \"hour\",\n  \"hr\": \"hour\",\n  \"hrs\": \"hour\",\n  \"hora\": \"hour\",\n  \"horas\": \"hour\",\n  \"día\": \"d\",\n  \"días\": \"d\",\n  \"semana\": \"week\",\n  \"semanas\": \"week\",\n  \"mes\": \"month\",\n  \"meses\": \"month\",\n  \"cuarto\": \"quarter\",\n  \"cuartos\": \"quarter\",\n  \"año\": \"year\",\n  \"años\": \"year\"\n};\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\\\.[0-9]+|un?|uno?|una?|algunos?|unos?|demi-?)`;\nexport function parseNumberPattern(match) {\n  const num = match.toLowerCase();\n  if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n    return INTEGER_WORD_DICTIONARY[num];\n  } else if (num === \"un\" || num === \"una\" || num === \"uno\") {\n    return 1;\n  } else if (num.match(/algunos?/)) {\n    return 3;\n  } else if (num.match(/unos?/)) {\n    return 3;\n  } else if (num.match(/media?/)) {\n    return 0.5;\n  }\n  return parseFloat(num);\n}\nexport const YEAR_PATTERN = \"[0-9]{1,4}(?![^\\\\s]\\\\d)(?:\\\\s*[a|d]\\\\.?\\\\s*c\\\\.?|\\\\s*a\\\\.?\\\\s*d\\\\.?)?\";\nexport function parseYear(match) {\n  if (match.match(/^[0-9]{1,4}$/)) {\n    let yearNumber = parseInt(match);\n    if (yearNumber < 100) {\n      if (yearNumber > 50) {\n        yearNumber = yearNumber + 1900;\n      } else {\n        yearNumber = yearNumber + 2000;\n      }\n    }\n    return yearNumber;\n  }\n  if (match.match(/a\\.?\\s*c\\.?/i)) {\n    match = match.replace(/a\\.?\\s*c\\.?/i, \"\");\n    return -parseInt(match);\n  }\n  return parseInt(match);\n}\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\"\", SINGLE_TIME_UNIT_PATTERN);\nexport function parseTimeUnits(timeunitText) {\n  const fragments = {};\n  let remainingText = timeunitText;\n  let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  while (match) {\n    collectDateTimeFragment(fragments, match);\n    remainingText = remainingText.substring(match[0].length);\n    match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  }\n  return fragments;\n}\nfunction collectDateTimeFragment(fragments, match) {\n  const num = parseNumberPattern(match[1]);\n  const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n  fragments[unit] = num;\n}","map":{"version":3,"names":["matchAnyPattern","repeatedTimeunitPattern","WEEKDAY_DICTIONARY","MONTH_DICTIONARY","INTEGER_WORD_DICTIONARY","TIME_UNIT_DICTIONARY","NUMBER_PATTERN","parseNumberPattern","match","num","toLowerCase","undefined","parseFloat","YEAR_PATTERN","parseYear","yearNumber","parseInt","replace","SINGLE_TIME_UNIT_PATTERN","SINGLE_TIME_UNIT_REGEX","RegExp","TIME_UNITS_PATTERN","parseTimeUnits","timeunitText","fragments","remainingText","exec","collectDateTimeFragment","substring","length","unit"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/es/constants.ts"],"sourcesContent":["import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    \"domingo\": 0,\n    \"dom\": 0,\n    \"lunes\": 1,\n    \"lun\": 1,\n    \"martes\": 2,\n    \"mar\": 2,\n    \"miércoles\": 3,\n    \"miercoles\": 3,\n    \"mié\": 3,\n    \"mie\": 3,\n    \"jueves\": 4,\n    \"jue\": 4,\n    \"viernes\": 5,\n    \"vie\": 5,\n    \"sábado\": 6,\n    \"sabado\": 6,\n    \"sáb\": 6,\n    \"sab\": 6,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    \"enero\": 1,\n    \"ene\": 1,\n    \"ene.\": 1,\n    \"febrero\": 2,\n    \"feb\": 2,\n    \"feb.\": 2,\n    \"marzo\": 3,\n    \"mar\": 3,\n    \"mar.\": 3,\n    \"abril\": 4,\n    \"abr\": 4,\n    \"abr.\": 4,\n    \"mayo\": 5,\n    \"may\": 5,\n    \"may.\": 5,\n    \"junio\": 6,\n    \"jun\": 6,\n    \"jun.\": 6,\n    \"julio\": 7,\n    \"jul\": 7,\n    \"jul.\": 7,\n    \"agosto\": 8,\n    \"ago\": 8,\n    \"ago.\": 8,\n    \"septiembre\": 9,\n    \"setiembre\": 9,\n    \"sep\": 9,\n    \"sep.\": 9,\n    \"octubre\": 10,\n    \"oct\": 10,\n    \"oct.\": 10,\n    \"noviembre\": 11,\n    \"nov\": 11,\n    \"nov.\": 11,\n    \"diciembre\": 12,\n    \"dic\": 12,\n    \"dic.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    \"uno\": 1,\n    \"dos\": 2,\n    \"tres\": 3,\n    \"cuatro\": 4,\n    \"cinco\": 5,\n    \"seis\": 6,\n    \"siete\": 7,\n    \"ocho\": 8,\n    \"nueve\": 9,\n    \"diez\": 10,\n    \"once\": 11,\n    \"doce\": 12,\n    \"trece\": 13,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    \"sec\": \"second\",\n    \"segundo\": \"second\",\n    \"segundos\": \"second\",\n    \"min\": \"minute\",\n    \"mins\": \"minute\",\n    \"minuto\": \"minute\",\n    \"minutos\": \"minute\",\n    \"h\": \"hour\",\n    \"hr\": \"hour\",\n    \"hrs\": \"hour\",\n    \"hora\": \"hour\",\n    \"horas\": \"hour\",\n    \"día\": \"d\",\n    \"días\": \"d\",\n    \"semana\": \"week\",\n    \"semanas\": \"week\",\n    \"mes\": \"month\",\n    \"meses\": \"month\",\n    \"cuarto\": \"quarter\",\n    \"cuartos\": \"quarter\",\n    \"año\": \"year\",\n    \"años\": \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|un?|uno?|una?|algunos?|unos?|demi-?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"un\" || num === \"una\" || num === \"uno\") {\n        return 1;\n    } else if (num.match(/algunos?/)) {\n        return 3;\n    } else if (num.match(/unos?/)) {\n        return 3;\n    } else if (num.match(/media?/)) {\n        return 0.5;\n    }\n\n    return parseFloat(num);\n}\n//-----------------------------\n// 88 p. Chr. n.\n// 234 AC\nexport const YEAR_PATTERN = \"[0-9]{1,4}(?![^\\\\s]\\\\d)(?:\\\\s*[a|d]\\\\.?\\\\s*c\\\\.?|\\\\s*a\\\\.?\\\\s*d\\\\.?)?\";\nexport function parseYear(match: string): number {\n    if (match.match(/^[0-9]{1,4}$/)) {\n        let yearNumber = parseInt(match);\n        if (yearNumber < 100) {\n            if (yearNumber > 50) {\n                yearNumber = yearNumber + 1900;\n            } else {\n                yearNumber = yearNumber + 2000;\n            }\n        }\n        return yearNumber;\n    }\n\n    if (match.match(/a\\.?\\s*c\\.?/i)) {\n        match = match.replace(/a\\.?\\s*c\\.?/i, \"\");\n        return -parseInt(match);\n    }\n\n    return parseInt(match);\n}\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\"\", SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): { [c in OpUnitType | QUnitType]?: number } {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length);\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments as { [c in OpUnitType | QUnitType]?: number };\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n"],"mappings":"AACA,SAASA,eAAe,EAAEC,uBAAuB,QAAQ,wBAAsB;AAE/E,OAAO,MAAMC,kBAAkB,GAA+B;EAC1D,SAAS,EAAE,CAAC;EACZ,KAAK,EAAE,CAAC;EACR,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,QAAQ,EAAE,CAAC;EACX,KAAK,EAAE,CAAC;EACR,WAAW,EAAE,CAAC;EACd,WAAW,EAAE,CAAC;EACd,KAAK,EAAE,CAAC;EACR,KAAK,EAAE,CAAC;EACR,QAAQ,EAAE,CAAC;EACX,KAAK,EAAE,CAAC;EACR,SAAS,EAAE,CAAC;EACZ,KAAK,EAAE,CAAC;EACR,QAAQ,EAAE,CAAC;EACX,QAAQ,EAAE,CAAC;EACX,KAAK,EAAE,CAAC;EACR,KAAK,EAAE;CACV;AAED,OAAO,MAAMC,gBAAgB,GAA+B;EACxD,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,SAAS,EAAE,CAAC;EACZ,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,MAAM,EAAE,CAAC;EACT,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,QAAQ,EAAE,CAAC;EACX,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,YAAY,EAAE,CAAC;EACf,WAAW,EAAE,CAAC;EACd,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,SAAS,EAAE,EAAE;EACb,KAAK,EAAE,EAAE;EACT,MAAM,EAAE,EAAE;EACV,WAAW,EAAE,EAAE;EACf,KAAK,EAAE,EAAE;EACT,MAAM,EAAE,EAAE;EACV,WAAW,EAAE,EAAE;EACf,KAAK,EAAE,EAAE;EACT,MAAM,EAAE;CACX;AAED,OAAO,MAAMC,uBAAuB,GAA+B;EAC/D,KAAK,EAAE,CAAC;EACR,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,QAAQ,EAAE,CAAC;EACX,OAAO,EAAE,CAAC;EACV,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,MAAM,EAAE,EAAE;EACV,MAAM,EAAE,EAAE;EACV,MAAM,EAAE,EAAE;EACV,OAAO,EAAE;CACZ;AAED,OAAO,MAAMC,oBAAoB,GAA+C;EAC5E,KAAK,EAAE,QAAQ;EACf,SAAS,EAAE,QAAQ;EACnB,UAAU,EAAE,QAAQ;EACpB,KAAK,EAAE,QAAQ;EACf,MAAM,EAAE,QAAQ;EAChB,QAAQ,EAAE,QAAQ;EAClB,SAAS,EAAE,QAAQ;EACnB,GAAG,EAAE,MAAM;EACX,IAAI,EAAE,MAAM;EACZ,KAAK,EAAE,MAAM;EACb,MAAM,EAAE,MAAM;EACd,OAAO,EAAE,MAAM;EACf,KAAK,EAAE,GAAG;EACV,MAAM,EAAE,GAAG;EACX,QAAQ,EAAE,MAAM;EAChB,SAAS,EAAE,MAAM;EACjB,KAAK,EAAE,OAAO;EACd,OAAO,EAAE,OAAO;EAChB,QAAQ,EAAE,SAAS;EACnB,SAAS,EAAE,SAAS;EACpB,KAAK,EAAE,MAAM;EACb,MAAM,EAAE;CACX;AAID,OAAO,MAAMC,cAAc,GAAG,MAAMN,eAAe,CAC/CI,uBAAuB,CAC1B,8DAA8D;AAE/D,OAAM,SAAUG,kBAAkBA,CAACC,KAAa;EAC5C,MAAMC,GAAG,GAAGD,KAAK,CAACE,WAAW,EAAE;EAC/B,IAAIN,uBAAuB,CAACK,GAAG,CAAC,KAAKE,SAAS,EAAE;IAC5C,OAAOP,uBAAuB,CAACK,GAAG,CAAC;GACtC,MAAM,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,IAAIA,GAAG,KAAK,KAAK,EAAE;IACvD,OAAO,CAAC;GACX,MAAM,IAAIA,GAAG,CAACD,KAAK,CAAC,UAAU,CAAC,EAAE;IAC9B,OAAO,CAAC;GACX,MAAM,IAAIC,GAAG,CAACD,KAAK,CAAC,OAAO,CAAC,EAAE;IAC3B,OAAO,CAAC;GACX,MAAM,IAAIC,GAAG,CAACD,KAAK,CAAC,QAAQ,CAAC,EAAE;IAC5B,OAAO,GAAG;;EAGd,OAAOI,UAAU,CAACH,GAAG,CAAC;AAC1B;AAIA,OAAO,MAAMI,YAAY,GAAG,uEAAuE;AACnG,OAAM,SAAUC,SAASA,CAACN,KAAa;EACnC,IAAIA,KAAK,CAACA,KAAK,CAAC,cAAc,CAAC,EAAE;IAC7B,IAAIO,UAAU,GAAGC,QAAQ,CAACR,KAAK,CAAC;IAChC,IAAIO,UAAU,GAAG,GAAG,EAAE;MAClB,IAAIA,UAAU,GAAG,EAAE,EAAE;QACjBA,UAAU,GAAGA,UAAU,GAAG,IAAI;OACjC,MAAM;QACHA,UAAU,GAAGA,UAAU,GAAG,IAAI;;;IAGtC,OAAOA,UAAU;;EAGrB,IAAIP,KAAK,CAACA,KAAK,CAAC,cAAc,CAAC,EAAE;IAC7BA,KAAK,GAAGA,KAAK,CAACS,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;IACzC,OAAO,CAACD,QAAQ,CAACR,KAAK,CAAC;;EAG3B,OAAOQ,QAAQ,CAACR,KAAK,CAAC;AAC1B;AAEA,MAAMU,wBAAwB,GAAG,IAAIZ,cAAc,aAAaN,eAAe,CAACK,oBAAoB,CAAC,WAAW;AAChH,MAAMc,sBAAsB,GAAG,IAAIC,MAAM,CAACF,wBAAwB,EAAE,GAAG,CAAC;AAExE,OAAO,MAAMG,kBAAkB,GAAGpB,uBAAuB,CAAC,EAAE,EAAEiB,wBAAwB,CAAC;AAEvF,OAAM,SAAUI,cAAcA,CAACC,YAAY;EACvC,MAAMC,SAAS,GAAG,EAAE;EACpB,IAAIC,aAAa,GAAGF,YAAY;EAChC,IAAIf,KAAK,GAAGW,sBAAsB,CAACO,IAAI,CAACD,aAAa,CAAC;EACtD,OAAOjB,KAAK,EAAE;IACVmB,uBAAuB,CAACH,SAAS,EAAEhB,KAAK,CAAC;IACzCiB,aAAa,GAAGA,aAAa,CAACG,SAAS,CAACpB,KAAK,CAAC,CAAC,CAAC,CAACqB,MAAM,CAAC;IACxDrB,KAAK,GAAGW,sBAAsB,CAACO,IAAI,CAACD,aAAa,CAAC;;EAEtD,OAAOD,SAAuD;AAClE;AAEA,SAASG,uBAAuBA,CAACH,SAAS,EAAEhB,KAAK;EAC7C,MAAMC,GAAG,GAAGF,kBAAkB,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMsB,IAAI,GAAGzB,oBAAoB,CAACG,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE,CAAC;EACzDc,SAAS,CAACM,IAAI,CAAC,GAAGrB,GAAG;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}