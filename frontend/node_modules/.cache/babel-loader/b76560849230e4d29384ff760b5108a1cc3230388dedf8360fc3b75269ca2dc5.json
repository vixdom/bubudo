{"ast":null,"code":"var _jsxFileName = \"/Users/mvikr/Projects/TaskApp/frontend/src/components/TaskList.tsx\";\nimport React from 'react';\nimport { List, ListItem, ListItemText, ListItemIcon, Checkbox, Paper } from '@mui/material';\nimport { formatDate } from '../utils/timeUtils';\nimport SubtaskList from './SubtaskList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  tasks,\n  onToggleTask,\n  onToggleSubTask\n}) => {\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 2,\n    sx: {\n      mt: 3,\n      p: 2\n    },\n    children: tasks.length === 0 ? /*#__PURE__*/_jsxDEV(ListItem, {\n      children: /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: \"No tasks yet. Add one above!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(List, {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 2,\n        sx: {\n          mb: 2,\n          p: 2,\n          opacity: task.completed ? 0.6 : 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: task.completed,\n              onChange: () => onToggleTask(task.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: task.title,\n            primaryTypographyProps: {\n              variant: 'h6',\n              sx: {\n                textDecoration: task.completed ? 'line-through' : 'none'\n              }\n            },\n            secondary: `${formatDate(task.dueDate)}`,\n            secondaryTypographyProps: {\n              variant: 'caption'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this), task.subTasks && task.subTasks.length > 0 && /*#__PURE__*/_jsxDEV(SubtaskList, {\n          subtasks: task.subTasks,\n          onToggleSubTask: subTaskId => onToggleSubTask(task.id, subTaskId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","List","ListItem","ListItemText","ListItemIcon","Checkbox","Paper","formatDate","SubtaskList","jsxDEV","_jsxDEV","TaskList","tasks","onToggleTask","onToggleSubTask","elevation","sx","mt","p","children","length","primary","fileName","_jsxFileName","lineNumber","columnNumber","map","task","mb","opacity","completed","checked","onChange","id","title","primaryTypographyProps","variant","textDecoration","secondary","dueDate","secondaryTypographyProps","subTasks","subtasks","subTaskId","_c","$RefreshReg$"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/components/TaskList.tsx"],"sourcesContent":["import React from 'react';\nimport { List, ListItem, ListItemText, ListItemIcon, Checkbox, Paper, Typography, Box } from '@mui/material';\nimport { TaskWithSubTasks } from '../services/geminiService'; \nimport { formatDate } from '../utils/timeUtils';\nimport SubtaskList from './SubtaskList'; \n\ninterface TaskListProps {\n  tasks: TaskWithSubTasks[];\n  onToggleTask: (taskId: string) => void;\n  onToggleSubTask: (taskId: string, subTaskId: string | number) => void; \n  user?: any;\n}\n\n\nconst TaskList: React.FC<TaskListProps> = ({ tasks, onToggleTask, onToggleSubTask }) => {\n  return (\n    <Paper elevation={2} sx={{ mt: 3, p: 2 }}>\n      {tasks.length === 0 ? (\n        <ListItem>\n          <ListItemText primary=\"No tasks yet. Add one above!\" />\n        </ListItem>\n      ) : (\n        <List>\n          {tasks.map((task) => (\n            <Paper key={task.id} elevation={2} sx={{ mb: 2, p: 2, opacity: task.completed ? 0.6 : 1 }}>\n              <ListItem>\n                <ListItemIcon>\n                  <Checkbox \n                    checked={task.completed} \n                    onChange={() => onToggleTask(task.id)} \n                  />\n                </ListItemIcon>\n                <ListItemText \n                  primary={task.title} \n                  primaryTypographyProps={{\n                    variant: 'h6', \n                    sx: { textDecoration: task.completed ? 'line-through' : 'none' } \n                  }}\n                  secondary={\n                    `${formatDate(task.dueDate)}` \n                  }\n                  secondaryTypographyProps={{ variant: 'caption' }}\n                />\n              </ListItem>\n              {task.subTasks && task.subTasks.length > 0 && (\n                <SubtaskList \n                  subtasks={task.subTasks} \n                  onToggleSubTask={(subTaskId) => onToggleSubTask(task.id, subTaskId)} \n                />\n              )}\n            </Paper>\n          ))}\n        </List>\n      )}\n    </Paper>\n  );\n};\n\nexport default TaskList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}