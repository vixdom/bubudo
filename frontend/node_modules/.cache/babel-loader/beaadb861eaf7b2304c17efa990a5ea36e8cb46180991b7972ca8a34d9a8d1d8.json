{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { Meridiem } from \"../../../types.js\";\nimport { assignSimilarDate, assignTheNextDay } from \"../../../utils/dayjs.js\";\nimport dayjs from \"dayjs\";\nconst DATE_GROUP = 1;\nconst TIME_OF_DAY_GROUP = 2;\nexport default class NLCasualDateTimeParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern(context) {\n    return /(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\\W|$)/i;\n  }\n  innerExtract(context, match) {\n    const dateText = match[DATE_GROUP].toLowerCase();\n    const timeText = match[TIME_OF_DAY_GROUP].toLowerCase();\n    const component = context.createParsingComponents();\n    const targetDate = dayjs(context.refDate);\n    switch (dateText) {\n      case \"gisteren\":\n        assignSimilarDate(component, targetDate.add(-1, \"day\"));\n        break;\n      case \"van\":\n        assignSimilarDate(component, targetDate);\n        break;\n      case \"morgen\":\n        assignTheNextDay(component, targetDate);\n        break;\n    }\n    switch (timeText) {\n      case \"ochtend\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 6);\n        break;\n      case \"middag\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 12);\n        break;\n      case \"namiddag\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 15);\n        break;\n      case \"avond\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 20);\n        break;\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","Meridiem","assignSimilarDate","assignTheNextDay","dayjs","DATE_GROUP","TIME_OF_DAY_GROUP","NLCasualDateTimeParser","innerPattern","context","innerExtract","match","dateText","toLowerCase","timeText","component","createParsingComponents","targetDate","refDate","add","imply","AM","PM"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/parsers/NLCasualDateTimeParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { Meridiem } from \"../../../types\";\nimport { assignSimilarDate, assignTheNextDay } from \"../../../utils/dayjs\";\nimport dayjs from \"dayjs\";\n\n/*\n * Find combined words\n * - morgenochtend\n * - morgenmiddag\n * - morgennamiddag\n * - morgenavond\n * - morgennacht\n * - vanochtend\n * - vanmiddag\n * - vannamiddag\n * - vanavond\n * - vannacht\n * - gisterenochtend\n * - gisterenmiddag\n * - gisterennamiddag\n * - gisterenavond\n * - gisterennacht\n * */\n\nconst DATE_GROUP = 1;\nconst TIME_OF_DAY_GROUP = 2;\n\nexport default class NLCasualDateTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const dateText = match[DATE_GROUP].toLowerCase();\n        const timeText = match[TIME_OF_DAY_GROUP].toLowerCase();\n        const component = context.createParsingComponents();\n        const targetDate = dayjs(context.refDate);\n\n        switch (dateText) {\n            case \"gisteren\":\n                assignSimilarDate(component, targetDate.add(-1, \"day\"));\n                break;\n            case \"van\":\n                assignSimilarDate(component, targetDate);\n                break;\n            case \"morgen\":\n                assignTheNextDay(component, targetDate);\n                break;\n        }\n\n        switch (timeText) {\n            case \"ochtend\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n            case \"middag\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n            case \"namiddag\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"avond\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 20);\n                break;\n        }\n\n        return component;\n    }\n}\n"],"mappings":"AAEA,SAASA,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,yBAAuB;AAC3E,OAAOC,KAAK,MAAM,OAAO;AAqBzB,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,iBAAiB,GAAG,CAAC;AAE3B,eAAc,MAAOC,sBAAuB,SAAQP,sCAAsC;EACtFQ,YAAYA,CAACC,OAAuB;IAChC,OAAO,qEAAqE;EAChF;EAEAC,YAAYA,CAACD,OAAuB,EAAEE,KAAuB;IACzD,MAAMC,QAAQ,GAAGD,KAAK,CAACN,UAAU,CAAC,CAACQ,WAAW,EAAE;IAChD,MAAMC,QAAQ,GAAGH,KAAK,CAACL,iBAAiB,CAAC,CAACO,WAAW,EAAE;IACvD,MAAME,SAAS,GAAGN,OAAO,CAACO,uBAAuB,EAAE;IACnD,MAAMC,UAAU,GAAGb,KAAK,CAACK,OAAO,CAACS,OAAO,CAAC;IAEzC,QAAQN,QAAQ;MACZ,KAAK,UAAU;QACXV,iBAAiB,CAACa,SAAS,EAAEE,UAAU,CAACE,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACvD;MACJ,KAAK,KAAK;QACNjB,iBAAiB,CAACa,SAAS,EAAEE,UAAU,CAAC;QACxC;MACJ,KAAK,QAAQ;QACTd,gBAAgB,CAACY,SAAS,EAAEE,UAAU,CAAC;QACvC;;IAGR,QAAQH,QAAQ;MACZ,KAAK,SAAS;QACVC,SAAS,CAACK,KAAK,CAAC,UAAU,EAAEnB,QAAQ,CAACoB,EAAE,CAAC;QACxCN,SAAS,CAACK,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1B;MACJ,KAAK,QAAQ;QACTL,SAAS,CAACK,KAAK,CAAC,UAAU,EAAEnB,QAAQ,CAACoB,EAAE,CAAC;QACxCN,SAAS,CAACK,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MACJ,KAAK,UAAU;QACXL,SAAS,CAACK,KAAK,CAAC,UAAU,EAAEnB,QAAQ,CAACqB,EAAE,CAAC;QACxCP,SAAS,CAACK,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MAEJ,KAAK,OAAO;QACRL,SAAS,CAACK,KAAK,CAAC,UAAU,EAAEnB,QAAQ,CAACqB,EAAE,CAAC;QACxCP,SAAS,CAACK,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;;IAGR,OAAOL,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}