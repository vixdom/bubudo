{"ast":null,"code":"import ExtractTimezoneOffsetRefiner from \"../../../common/refiners/ExtractTimezoneOffsetRefiner.js\";\nimport { includeCommonConfiguration } from \"../../../configurations.js\";\nimport { Chrono } from \"../../../chrono.js\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../../results.js\";\nimport { Meridiem, Weekday } from \"../../../types.js\";\nimport ZHHansCasualDateParser from \"./parsers/ZHHansCasualDateParser.js\";\nimport ZHHansDateParser from \"./parsers/ZHHansDateParser.js\";\nimport ZHHansDeadlineFormatParser from \"./parsers/ZHHansDeadlineFormatParser.js\";\nimport ZHHansRelationWeekdayParser from \"./parsers/ZHHansRelationWeekdayParser.js\";\nimport ZHHansTimeExpressionParser from \"./parsers/ZHHansTimeExpressionParser.js\";\nimport ZHHansWeekdayParser from \"./parsers/ZHHansWeekdayParser.js\";\nimport ZHHansMergeDateRangeRefiner from \"./refiners/ZHHansMergeDateRangeRefiner.js\";\nimport ZHHansMergeDateTimeRefiner from \"./refiners/ZHHansMergeDateTimeRefiner.js\";\nexport { Chrono, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Meridiem, Weekday };\nexport const hans = new Chrono(createCasualConfiguration());\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration());\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration() {\n  const option = createConfiguration();\n  option.parsers.unshift(new ZHHansCasualDateParser());\n  return option;\n}\nexport function createConfiguration() {\n  const configuration = includeCommonConfiguration({\n    parsers: [new ZHHansDateParser(), new ZHHansRelationWeekdayParser(), new ZHHansWeekdayParser(), new ZHHansTimeExpressionParser(), new ZHHansDeadlineFormatParser()],\n    refiners: [new ZHHansMergeDateRangeRefiner(), new ZHHansMergeDateTimeRefiner()]\n  });\n  configuration.refiners = configuration.refiners.filter(refiner => !(refiner instanceof ExtractTimezoneOffsetRefiner));\n  return configuration;\n}","map":{"version":3,"names":["ExtractTimezoneOffsetRefiner","includeCommonConfiguration","Chrono","ParsingResult","ParsingComponents","ReferenceWithTimezone","Meridiem","Weekday","ZHHansCasualDateParser","ZHHansDateParser","ZHHansDeadlineFormatParser","ZHHansRelationWeekdayParser","ZHHansTimeExpressionParser","ZHHansWeekdayParser","ZHHansMergeDateRangeRefiner","ZHHansMergeDateTimeRefiner","hans","createCasualConfiguration","casual","strict","createConfiguration","parse","text","ref","option","parseDate","parsers","unshift","configuration","refiners","filter","refiner"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/zh/hans/index.ts"],"sourcesContent":["/**\n * Chrono components for zh support\n */\n\nimport ExtractTimezoneOffsetRefiner from \"../../../common/refiners/ExtractTimezoneOffsetRefiner\";\nimport { includeCommonConfiguration } from \"../../../configurations\";\nimport { Chrono, Configuration, Parser, Refiner } from \"../../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../../types\";\nimport ZHHansCasualDateParser from \"./parsers/ZHHansCasualDateParser\";\nimport ZHHansDateParser from \"./parsers/ZHHansDateParser\";\nimport ZHHansDeadlineFormatParser from \"./parsers/ZHHansDeadlineFormatParser\";\nimport ZHHansRelationWeekdayParser from \"./parsers/ZHHansRelationWeekdayParser\";\nimport ZHHansTimeExpressionParser from \"./parsers/ZHHansTimeExpressionParser\";\nimport ZHHansWeekdayParser from \"./parsers/ZHHansWeekdayParser\";\nimport ZHHansMergeDateRangeRefiner from \"./refiners/ZHHansMergeDateRangeRefiner\";\nimport ZHHansMergeDateTimeRefiner from \"./refiners/ZHHansMergeDateTimeRefiner\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n// Shortcuts\nexport const hans = new Chrono(createCasualConfiguration());\n\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration());\n\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(): Configuration {\n    const option = createConfiguration();\n    option.parsers.unshift(new ZHHansCasualDateParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(): Configuration {\n    const configuration = includeCommonConfiguration({\n        parsers: [\n            new ZHHansDateParser(),\n            new ZHHansRelationWeekdayParser(),\n            new ZHHansWeekdayParser(),\n            new ZHHansTimeExpressionParser(),\n            new ZHHansDeadlineFormatParser(),\n        ],\n        refiners: [new ZHHansMergeDateRangeRefiner(), new ZHHansMergeDateTimeRefiner()],\n    });\n\n    // REMOVE ExtractTimezoneOffsetRefiner\n    configuration.refiners = configuration.refiners.filter(\n        (refiner) => !(refiner instanceof ExtractTimezoneOffsetRefiner)\n    );\n\n    return configuration;\n}\n"],"mappings":"AAIA,OAAOA,4BAA4B,MAAM,0DAAwD;AACjG,SAASC,0BAA0B,QAAQ,4BAA0B;AACrE,SAASC,MAAM,QAAwC,oBAAkB;AACzE,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB,QAAQ,qBAAmB;AAC3F,SAAmEC,QAAQ,EAAEC,OAAO,QAAQ,mBAAiB;AAC7G,OAAOC,sBAAsB,MAAM,qCAAmC;AACtE,OAAOC,gBAAgB,MAAM,+BAA6B;AAC1D,OAAOC,0BAA0B,MAAM,yCAAuC;AAC9E,OAAOC,2BAA2B,MAAM,0CAAwC;AAChF,OAAOC,0BAA0B,MAAM,yCAAuC;AAC9E,OAAOC,mBAAmB,MAAM,kCAAgC;AAChE,OAAOC,2BAA2B,MAAM,2CAAyC;AACjF,OAAOC,0BAA0B,MAAM,0CAAwC;AAE/E,SAASb,MAAM,EAAmBC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB;AACzF,SAAmEC,QAAQ,EAAEC,OAAO;AAGpF,OAAO,MAAMS,IAAI,GAAG,IAAId,MAAM,CAACe,yBAAyB,EAAE,CAAC;AAE3D,OAAO,MAAMC,MAAM,GAAG,IAAIhB,MAAM,CAACe,yBAAyB,EAAE,CAAC;AAC7D,OAAO,MAAME,MAAM,GAAG,IAAIjB,MAAM,CAACkB,mBAAmB,EAAE,CAAC;AAEvD,OAAM,SAAUC,KAAKA,CAACC,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACrF,OAAON,MAAM,CAACG,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC1C;AAEA,OAAM,SAAUC,SAASA,CAACH,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACzF,OAAON,MAAM,CAACO,SAAS,CAACH,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC9C;AAKA,OAAM,SAAUP,yBAAyBA,CAAA;EACrC,MAAMO,MAAM,GAAGJ,mBAAmB,EAAE;EACpCI,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,IAAInB,sBAAsB,EAAE,CAAC;EACpD,OAAOgB,MAAM;AACjB;AAKA,OAAM,SAAUJ,mBAAmBA,CAAA;EAC/B,MAAMQ,aAAa,GAAG3B,0BAA0B,CAAC;IAC7CyB,OAAO,EAAE,CACL,IAAIjB,gBAAgB,EAAE,EACtB,IAAIE,2BAA2B,EAAE,EACjC,IAAIE,mBAAmB,EAAE,EACzB,IAAID,0BAA0B,EAAE,EAChC,IAAIF,0BAA0B,EAAE,CACnC;IACDmB,QAAQ,EAAE,CAAC,IAAIf,2BAA2B,EAAE,EAAE,IAAIC,0BAA0B,EAAE;GACjF,CAAC;EAGFa,aAAa,CAACC,QAAQ,GAAGD,aAAa,CAACC,QAAQ,CAACC,MAAM,CACjDC,OAAO,IAAK,EAAEA,OAAO,YAAY/B,4BAA4B,CAAC,CAClE;EAED,OAAO4B,aAAa;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}