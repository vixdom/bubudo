{"ast":null,"code":"import { Meridiem } from \"../../../types.js\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser.js\";\nimport { REGEX_PARTS } from \"../constants.js\";\nexport default class UKTimeExpressionParser extends AbstractTimeExpressionParser {\n  constructor(strictMode) {\n    super(strictMode);\n  }\n  patternFlags() {\n    return REGEX_PARTS.flags;\n  }\n  primaryPatternLeftBoundary() {\n    return `(^|\\\\s|T|(?:[^\\\\p{L}\\\\p{N}_]))`;\n  }\n  followingPhase() {\n    return `\\\\s*(?:\\\\-|\\\\–|\\\\~|\\\\〜|до|і|по|\\\\?)\\\\s*`;\n  }\n  primaryPrefix() {\n    return `(?:(?:в|у|о|об|з|із|від)\\\\s*)??`;\n  }\n  primarySuffix() {\n    return `(?:\\\\s*(?:ранку|вечора|по обіді|після обіду))?(?!\\\\/)${REGEX_PARTS.rightBoundary}`;\n  }\n  extractPrimaryTimeComponents(context, match) {\n    const components = super.extractPrimaryTimeComponents(context, match);\n    if (components) {\n      if (match[0].endsWith(\"вечора\")) {\n        const hour = components.get(\"hour\");\n        if (hour >= 6 && hour < 12) {\n          components.assign(\"hour\", components.get(\"hour\") + 12);\n          components.assign(\"meridiem\", Meridiem.PM);\n        } else if (hour < 6) {\n          components.assign(\"meridiem\", Meridiem.AM);\n        }\n      }\n      if (match[0].endsWith(\"по обіді\") || match[0].endsWith(\"після обіду\")) {\n        components.assign(\"meridiem\", Meridiem.PM);\n        const hour = components.get(\"hour\");\n        if (hour >= 0 && hour <= 6) {\n          components.assign(\"hour\", components.get(\"hour\") + 12);\n        }\n      }\n      if (match[0].endsWith(\"ранку\")) {\n        components.assign(\"meridiem\", Meridiem.AM);\n        const hour = components.get(\"hour\");\n        if (hour < 12) {\n          components.assign(\"hour\", components.get(\"hour\"));\n        }\n      }\n    }\n    return components;\n  }\n}","map":{"version":3,"names":["Meridiem","AbstractTimeExpressionParser","REGEX_PARTS","UKTimeExpressionParser","constructor","strictMode","patternFlags","flags","primaryPatternLeftBoundary","followingPhase","primaryPrefix","primarySuffix","rightBoundary","extractPrimaryTimeComponents","context","match","components","endsWith","hour","get","assign","PM","AM"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/uk/parsers/UKTimeExpressionParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { Meridiem } from \"../../../types\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\nimport { REGEX_PARTS } from \"../constants\";\n\nexport default class UKTimeExpressionParser extends AbstractTimeExpressionParser {\n    constructor(strictMode) {\n        super(strictMode);\n    }\n\n    patternFlags(): string {\n        return REGEX_PARTS.flags;\n    }\n\n    primaryPatternLeftBoundary(): string {\n        return `(^|\\\\s|T|(?:[^\\\\p{L}\\\\p{N}_]))`;\n    }\n\n    followingPhase(): string {\n        return `\\\\s*(?:\\\\-|\\\\–|\\\\~|\\\\〜|до|і|по|\\\\?)\\\\s*`;\n    }\n\n    primaryPrefix(): string {\n        return `(?:(?:в|у|о|об|з|із|від)\\\\s*)??`;\n    }\n\n    primarySuffix(): string {\n        return `(?:\\\\s*(?:ранку|вечора|по обіді|після обіду))?(?!\\\\/)${REGEX_PARTS.rightBoundary}`;\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): null | ParsingComponents {\n        const components = super.extractPrimaryTimeComponents(context, match);\n        if (components) {\n            if (match[0].endsWith(\"вечора\")) {\n                const hour = components.get(\"hour\");\n                if (hour >= 6 && hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                    components.assign(\"meridiem\", Meridiem.PM);\n                } else if (hour < 6) {\n                    components.assign(\"meridiem\", Meridiem.AM);\n                }\n            }\n\n            if (match[0].endsWith(\"по обіді\") || match[0].endsWith(\"після обіду\")) {\n                components.assign(\"meridiem\", Meridiem.PM);\n                const hour = components.get(\"hour\");\n                if (hour >= 0 && hour <= 6) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                }\n            }\n\n            if (match[0].endsWith(\"ранку\")) {\n                components.assign(\"meridiem\", Meridiem.AM);\n                const hour = components.get(\"hour\");\n                if (hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\"));\n                }\n            }\n        }\n\n        return components;\n    }\n}\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,4BAA4B,QAAQ,yDAAuD;AACpG,SAASC,WAAW,QAAQ,iBAAe;AAE3C,eAAc,MAAOC,sBAAuB,SAAQF,4BAA4B;EAC5EG,YAAYC,UAAU;IAClB,KAAK,CAACA,UAAU,CAAC;EACrB;EAEAC,YAAYA,CAAA;IACR,OAAOJ,WAAW,CAACK,KAAK;EAC5B;EAEAC,0BAA0BA,CAAA;IACtB,OAAO,gCAAgC;EAC3C;EAEAC,cAAcA,CAAA;IACV,OAAO,yCAAyC;EACpD;EAEAC,aAAaA,CAAA;IACT,OAAO,iCAAiC;EAC5C;EAEAC,aAAaA,CAAA;IACT,OAAO,wDAAwDT,WAAW,CAACU,aAAa,EAAE;EAC9F;EAEAC,4BAA4BA,CAACC,OAAuB,EAAEC,KAAuB;IACzE,MAAMC,UAAU,GAAG,KAAK,CAACH,4BAA4B,CAACC,OAAO,EAAEC,KAAK,CAAC;IACrE,IAAIC,UAAU,EAAE;MACZ,IAAID,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC7B,MAAMC,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;QACnC,IAAID,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,EAAE,EAAE;UACxBF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;UACtDH,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEpB,QAAQ,CAACqB,EAAE,CAAC;SAC7C,MAAM,IAAIH,IAAI,GAAG,CAAC,EAAE;UACjBF,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEpB,QAAQ,CAACsB,EAAE,CAAC;;;MAIlD,IAAIP,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,UAAU,CAAC,IAAIF,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,aAAa,CAAC,EAAE;QACnED,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEpB,QAAQ,CAACqB,EAAE,CAAC;QAC1C,MAAMH,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;QACnC,IAAID,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,EAAE;UACxBF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;;;MAI9D,IAAIJ,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC5BD,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEpB,QAAQ,CAACsB,EAAE,CAAC;QAC1C,MAAMJ,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;QACnC,IAAID,IAAI,GAAG,EAAE,EAAE;UACXF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,CAAC;;;;IAK7D,OAAOH,UAAU;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}