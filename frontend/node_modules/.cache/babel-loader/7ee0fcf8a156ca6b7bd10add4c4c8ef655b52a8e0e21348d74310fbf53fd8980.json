{"ast":null,"code":"import { Meridiem } from \"../../../types.js\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser.js\";\nexport default class ENTimeExpressionParser extends AbstractTimeExpressionParser {\n  constructor(strictMode) {\n    super(strictMode);\n  }\n  followingPhase() {\n    return \"\\\\s*(?:\\\\-|\\\\–|\\\\~|\\\\〜|to|until|through|till|\\\\?)\\\\s*\";\n  }\n  primaryPrefix() {\n    return \"(?:(?:at|from)\\\\s*)??\";\n  }\n  primarySuffix() {\n    return \"(?:\\\\s*(?:o\\\\W*clock|at\\\\s*night|in\\\\s*the\\\\s*(?:morning|afternoon)))?(?!/)(?=\\\\W|$)\";\n  }\n  extractPrimaryTimeComponents(context, match) {\n    const components = super.extractPrimaryTimeComponents(context, match);\n    if (!components) {\n      return components;\n    }\n    if (match[0].endsWith(\"night\")) {\n      const hour = components.get(\"hour\");\n      if (hour >= 6 && hour < 12) {\n        components.assign(\"hour\", components.get(\"hour\") + 12);\n        components.assign(\"meridiem\", Meridiem.PM);\n      } else if (hour < 6) {\n        components.assign(\"meridiem\", Meridiem.AM);\n      }\n    }\n    if (match[0].endsWith(\"afternoon\")) {\n      components.assign(\"meridiem\", Meridiem.PM);\n      const hour = components.get(\"hour\");\n      if (hour >= 0 && hour <= 6) {\n        components.assign(\"hour\", components.get(\"hour\") + 12);\n      }\n    }\n    if (match[0].endsWith(\"morning\")) {\n      components.assign(\"meridiem\", Meridiem.AM);\n      const hour = components.get(\"hour\");\n      if (hour < 12) {\n        components.assign(\"hour\", components.get(\"hour\"));\n      }\n    }\n    return components.addTag(\"parser/ENTimeExpressionParser\");\n  }\n  extractFollowingTimeComponents(context, match, result) {\n    const followingComponents = super.extractFollowingTimeComponents(context, match, result);\n    if (followingComponents) {\n      followingComponents.addTag(\"parser/ENTimeExpressionParser\");\n    }\n    return followingComponents;\n  }\n}","map":{"version":3,"names":["Meridiem","AbstractTimeExpressionParser","ENTimeExpressionParser","constructor","strictMode","followingPhase","primaryPrefix","primarySuffix","extractPrimaryTimeComponents","context","match","components","endsWith","hour","get","assign","PM","AM","addTag","extractFollowingTimeComponents","result","followingComponents"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/en/parsers/ENTimeExpressionParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { Meridiem } from \"../../../types\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\n\nexport default class ENTimeExpressionParser extends AbstractTimeExpressionParser {\n    constructor(strictMode) {\n        super(strictMode);\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\–|\\\\~|\\\\〜|to|until|through|till|\\\\?)\\\\s*\";\n    }\n\n    primaryPrefix(): string {\n        return \"(?:(?:at|from)\\\\s*)??\";\n    }\n\n    primarySuffix(): string {\n        return \"(?:\\\\s*(?:o\\\\W*clock|at\\\\s*night|in\\\\s*the\\\\s*(?:morning|afternoon)))?(?!/)(?=\\\\W|$)\";\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): null | ParsingComponents {\n        const components = super.extractPrimaryTimeComponents(context, match);\n        if (!components) {\n            return components;\n        }\n\n        if (match[0].endsWith(\"night\")) {\n            const hour = components.get(\"hour\");\n            if (hour >= 6 && hour < 12) {\n                components.assign(\"hour\", components.get(\"hour\") + 12);\n                components.assign(\"meridiem\", Meridiem.PM);\n            } else if (hour < 6) {\n                components.assign(\"meridiem\", Meridiem.AM);\n            }\n        }\n\n        if (match[0].endsWith(\"afternoon\")) {\n            components.assign(\"meridiem\", Meridiem.PM);\n            const hour = components.get(\"hour\");\n            if (hour >= 0 && hour <= 6) {\n                components.assign(\"hour\", components.get(\"hour\") + 12);\n            }\n        }\n\n        if (match[0].endsWith(\"morning\")) {\n            components.assign(\"meridiem\", Meridiem.AM);\n            const hour = components.get(\"hour\");\n            if (hour < 12) {\n                components.assign(\"hour\", components.get(\"hour\"));\n            }\n        }\n\n        return components.addTag(\"parser/ENTimeExpressionParser\");\n    }\n\n    extractFollowingTimeComponents(\n        context: ParsingContext,\n        match: RegExpMatchArray,\n        result: ParsingResult\n    ): ParsingComponents | null {\n        const followingComponents = super.extractFollowingTimeComponents(context, match, result);\n        if (followingComponents) {\n            followingComponents.addTag(\"parser/ENTimeExpressionParser\");\n        }\n        return followingComponents;\n    }\n}\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,4BAA4B,QAAQ,yDAAuD;AAEpG,eAAc,MAAOC,sBAAuB,SAAQD,4BAA4B;EAC5EE,YAAYC,UAAU;IAClB,KAAK,CAACA,UAAU,CAAC;EACrB;EAEAC,cAAcA,CAAA;IACV,OAAO,uDAAuD;EAClE;EAEAC,aAAaA,CAAA;IACT,OAAO,uBAAuB;EAClC;EAEAC,aAAaA,CAAA;IACT,OAAO,sFAAsF;EACjG;EAEAC,4BAA4BA,CAACC,OAAuB,EAAEC,KAAuB;IACzE,MAAMC,UAAU,GAAG,KAAK,CAACH,4BAA4B,CAACC,OAAO,EAAEC,KAAK,CAAC;IACrE,IAAI,CAACC,UAAU,EAAE;MACb,OAAOA,UAAU;;IAGrB,IAAID,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC5B,MAAMC,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;MACnC,IAAID,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,EAAE,EAAE;QACxBF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QACtDH,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEf,QAAQ,CAACgB,EAAE,CAAC;OAC7C,MAAM,IAAIH,IAAI,GAAG,CAAC,EAAE;QACjBF,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEf,QAAQ,CAACiB,EAAE,CAAC;;;IAIlD,IAAIP,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE;MAChCD,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEf,QAAQ,CAACgB,EAAE,CAAC;MAC1C,MAAMH,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;MACnC,IAAID,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,EAAE;QACxBF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;;;IAI9D,IAAIJ,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;MAC9BD,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEf,QAAQ,CAACiB,EAAE,CAAC;MAC1C,MAAMJ,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;MACnC,IAAID,IAAI,GAAG,EAAE,EAAE;QACXF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,CAAC;;;IAIzD,OAAOH,UAAU,CAACO,MAAM,CAAC,+BAA+B,CAAC;EAC7D;EAEAC,8BAA8BA,CAC1BV,OAAuB,EACvBC,KAAuB,EACvBU,MAAqB;IAErB,MAAMC,mBAAmB,GAAG,KAAK,CAACF,8BAA8B,CAACV,OAAO,EAAEC,KAAK,EAAEU,MAAM,CAAC;IACxF,IAAIC,mBAAmB,EAAE;MACrBA,mBAAmB,CAACH,MAAM,CAAC,+BAA+B,CAAC;;IAE/D,OAAOG,mBAAmB;EAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}