{"ast":null,"code":"import { Filter } from \"../../../common/abstractRefiners.js\";\nexport default class ENUnlikelyFormatFilter extends Filter {\n  constructor() {\n    super();\n  }\n  isValid(context, result) {\n    const text = result.text.trim();\n    if (text === context.text.trim()) {\n      return true;\n    }\n    if (text.toLowerCase() === \"may\") {\n      const textBefore = context.text.substring(0, result.index).trim();\n      if (!textBefore.match(/\\b(in)$/i)) {\n        context.debug(() => {\n          console.log(`Removing unlikely result: ${result}`);\n        });\n        return false;\n      }\n    }\n    if (text.toLowerCase().endsWith(\"the second\")) {\n      const textAfter = context.text.substring(result.index + result.text.length).trim();\n      if (textAfter.length > 0) {\n        context.debug(() => {\n          console.log(`Removing unlikely result: ${result}`);\n        });\n      }\n      return false;\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["Filter","ENUnlikelyFormatFilter","constructor","isValid","context","result","text","trim","toLowerCase","textBefore","substring","index","match","debug","console","log","endsWith","textAfter","length"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/en/refiners/ENUnlikelyFormatFilter.ts"],"sourcesContent":["import { Filter } from \"../../../common/abstractRefiners\";\nimport { ParsingResult } from \"../../../results\";\n\nexport default class ENUnlikelyFormatFilter extends Filter {\n    constructor() {\n        super();\n    }\n\n    isValid(context, result: ParsingResult): boolean {\n        const text = result.text.trim();\n\n        // If the result is consists of the whole text (e.g. \"2024\", \"May\", etc),\n        // then it is unlikely to be a date.\n        if (text === context.text.trim()) {\n            return true;\n        }\n\n        // In English, the word \"may\" is a month name, but it is also a modal verb.\n        // Check if the text before \"may\" follows some allowed patterns.\n        if (text.toLowerCase() === \"may\") {\n            const textBefore = context.text.substring(0, result.index).trim();\n            if (!textBefore.match(/\\b(in)$/i)) {\n                context.debug(() => {\n                    console.log(`Removing unlikely result: ${result}`);\n                });\n\n                return false;\n            }\n        }\n\n        // In English, \"the second\" could refer to the ordinal number or timeunit.\n        if (text.toLowerCase().endsWith(\"the second\")) {\n            const textAfter = context.text.substring(result.index + result.text.length).trim();\n            if (textAfter.length > 0) {\n                context.debug(() => {\n                    console.log(`Removing unlikely result: ${result}`);\n                });\n            }\n            return false;\n        }\n\n        return true;\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,qCAAmC;AAG1D,eAAc,MAAOC,sBAAuB,SAAQD,MAAM;EACtDE,YAAA;IACI,KAAK,EAAE;EACX;EAEAC,OAAOA,CAACC,OAAO,EAAEC,MAAqB;IAClC,MAAMC,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACC,IAAI,EAAE;IAI/B,IAAID,IAAI,KAAKF,OAAO,CAACE,IAAI,CAACC,IAAI,EAAE,EAAE;MAC9B,OAAO,IAAI;;IAKf,IAAID,IAAI,CAACE,WAAW,EAAE,KAAK,KAAK,EAAE;MAC9B,MAAMC,UAAU,GAAGL,OAAO,CAACE,IAAI,CAACI,SAAS,CAAC,CAAC,EAAEL,MAAM,CAACM,KAAK,CAAC,CAACJ,IAAI,EAAE;MACjE,IAAI,CAACE,UAAU,CAACG,KAAK,CAAC,UAAU,CAAC,EAAE;QAC/BR,OAAO,CAACS,KAAK,CAAC,MAAK;UACfC,OAAO,CAACC,GAAG,CAAC,6BAA6BV,MAAM,EAAE,CAAC;QACtD,CAAC,CAAC;QAEF,OAAO,KAAK;;;IAKpB,IAAIC,IAAI,CAACE,WAAW,EAAE,CAACQ,QAAQ,CAAC,YAAY,CAAC,EAAE;MAC3C,MAAMC,SAAS,GAAGb,OAAO,CAACE,IAAI,CAACI,SAAS,CAACL,MAAM,CAACM,KAAK,GAAGN,MAAM,CAACC,IAAI,CAACY,MAAM,CAAC,CAACX,IAAI,EAAE;MAClF,IAAIU,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;QACtBd,OAAO,CAACS,KAAK,CAAC,MAAK;UACfC,OAAO,CAACC,GAAG,CAAC,6BAA6BV,MAAM,EAAE,CAAC;QACtD,CAAC,CAAC;;MAEN,OAAO,KAAK;;IAGhB,OAAO,IAAI;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}