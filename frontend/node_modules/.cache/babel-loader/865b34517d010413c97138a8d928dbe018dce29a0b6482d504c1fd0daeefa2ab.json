{"ast":null,"code":"import { Meridiem } from \"../../../types.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport dayjs from \"dayjs\";\nimport { assignTheNextDay } from \"../../../utils/dayjs.js\";\nconst DAY_GROUP = 1;\nconst MOMENT_GROUP = 2;\nexport default class NLCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return /(deze)?\\s*(namiddag|avond|middernacht|ochtend|middag|'s middags|'s avonds|'s ochtends)(?=\\W|$)/i;\n  }\n  innerExtract(context, match) {\n    const targetDate = dayjs(context.refDate);\n    const component = context.createParsingComponents();\n    if (match[DAY_GROUP] === \"deze\") {\n      component.assign(\"day\", context.refDate.getDate());\n      component.assign(\"month\", context.refDate.getMonth() + 1);\n      component.assign(\"year\", context.refDate.getFullYear());\n    }\n    switch (match[MOMENT_GROUP].toLowerCase()) {\n      case \"namiddag\":\n      case \"'s namiddags\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 15);\n        break;\n      case \"avond\":\n      case \"'s avonds'\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 20);\n        break;\n      case \"middernacht\":\n        assignTheNextDay(component, targetDate);\n        component.imply(\"hour\", 0);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        break;\n      case \"ochtend\":\n      case \"'s ochtends\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 6);\n        break;\n      case \"middag\":\n      case \"'s middags\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 12);\n        break;\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["Meridiem","AbstractParserWithWordBoundaryChecking","dayjs","assignTheNextDay","DAY_GROUP","MOMENT_GROUP","NLCasualTimeParser","innerPattern","innerExtract","context","match","targetDate","refDate","component","createParsingComponents","assign","getDate","getMonth","getFullYear","toLowerCase","imply","PM","AM"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/parsers/NLCasualTimeParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { Meridiem } from \"../../../types\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport dayjs from \"dayjs\";\nimport { assignTheNextDay } from \"../../../utils/dayjs\";\n\nconst DAY_GROUP = 1;\nconst MOMENT_GROUP = 2;\n\nexport default class NLCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return /(deze)?\\s*(namiddag|avond|middernacht|ochtend|middag|'s middags|'s avonds|'s ochtends)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const targetDate = dayjs(context.refDate);\n        const component = context.createParsingComponents();\n\n        if (match[DAY_GROUP] === \"deze\") {\n            component.assign(\"day\", context.refDate.getDate());\n            component.assign(\"month\", context.refDate.getMonth() + 1);\n            component.assign(\"year\", context.refDate.getFullYear());\n        }\n\n        switch (match[MOMENT_GROUP].toLowerCase()) {\n            case \"namiddag\":\n            case \"'s namiddags\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"avond\":\n            case \"'s avonds'\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 20);\n                break;\n\n            case \"middernacht\":\n                assignTheNextDay(component, targetDate);\n                component.imply(\"hour\", 0);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                break;\n\n            case \"ochtend\":\n            case \"'s ochtends\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n\n            case \"middag\":\n            case \"'s middags\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n        }\n\n        return component;\n    }\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,yBAAuB;AAExD,MAAMC,SAAS,GAAG,CAAC;AACnB,MAAMC,YAAY,GAAG,CAAC;AAEtB,eAAc,MAAOC,kBAAmB,SAAQL,sCAAsC;EAClFM,YAAYA,CAAA;IACR,OAAO,iGAAiG;EAC5G;EAEAC,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,UAAU,GAAGT,KAAK,CAACO,OAAO,CAACG,OAAO,CAAC;IACzC,MAAMC,SAAS,GAAGJ,OAAO,CAACK,uBAAuB,EAAE;IAEnD,IAAIJ,KAAK,CAACN,SAAS,CAAC,KAAK,MAAM,EAAE;MAC7BS,SAAS,CAACE,MAAM,CAAC,KAAK,EAAEN,OAAO,CAACG,OAAO,CAACI,OAAO,EAAE,CAAC;MAClDH,SAAS,CAACE,MAAM,CAAC,OAAO,EAAEN,OAAO,CAACG,OAAO,CAACK,QAAQ,EAAE,GAAG,CAAC,CAAC;MACzDJ,SAAS,CAACE,MAAM,CAAC,MAAM,EAAEN,OAAO,CAACG,OAAO,CAACM,WAAW,EAAE,CAAC;;IAG3D,QAAQR,KAAK,CAACL,YAAY,CAAC,CAACc,WAAW,EAAE;MACrC,KAAK,UAAU;MACf,KAAK,cAAc;QACfN,SAAS,CAACO,KAAK,CAAC,UAAU,EAAEpB,QAAQ,CAACqB,EAAE,CAAC;QACxCR,SAAS,CAACO,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MAEJ,KAAK,OAAO;MACZ,KAAK,YAAY;QACbP,SAAS,CAACO,KAAK,CAAC,UAAU,EAAEpB,QAAQ,CAACqB,EAAE,CAAC;QACxCR,SAAS,CAACO,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MAEJ,KAAK,aAAa;QACdjB,gBAAgB,CAACU,SAAS,EAAEF,UAAU,CAAC;QACvCE,SAAS,CAACO,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1BP,SAAS,CAACO,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5BP,SAAS,CAACO,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5B;MAEJ,KAAK,SAAS;MACd,KAAK,aAAa;QACdP,SAAS,CAACO,KAAK,CAAC,UAAU,EAAEpB,QAAQ,CAACsB,EAAE,CAAC;QACxCT,SAAS,CAACO,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1B;MAEJ,KAAK,QAAQ;MACb,KAAK,YAAY;QACbP,SAAS,CAACO,KAAK,CAAC,UAAU,EAAEpB,QAAQ,CAACsB,EAAE,CAAC;QACxCT,SAAS,CAACO,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;;IAGR,OAAOP,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}