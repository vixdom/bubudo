{"ast":null,"code":"import { TIME_UNITS_PATTERN, parseTimeUnits } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits.js\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking.js\";\nexport default class RUTimeUnitCasualRelativeFormatParser extends AbstractParserWithLeftRightBoundaryChecking {\n  innerPatternString(context) {\n    return `(эти|последние|прошлые|следующие|после|спустя|через|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})`;\n  }\n  innerExtract(context, match) {\n    const prefix = match[1].toLowerCase();\n    let timeUnits = parseTimeUnits(match[2]);\n    switch (prefix) {\n      case \"последние\":\n      case \"прошлые\":\n      case \"-\":\n        timeUnits = reverseTimeUnits(timeUnits);\n        break;\n    }\n    return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n  }\n}","map":{"version":3,"names":["TIME_UNITS_PATTERN","parseTimeUnits","ParsingComponents","reverseTimeUnits","AbstractParserWithLeftRightBoundaryChecking","RUTimeUnitCasualRelativeFormatParser","innerPatternString","context","innerExtract","match","prefix","toLowerCase","timeUnits","createRelativeFromReference","reference"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ru/parsers/RUTimeUnitCasualRelativeFormatParser.ts"],"sourcesContent":["import { TIME_UNITS_PATTERN, parseTimeUnits, REGEX_PARTS } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking\";\n\nexport default class RUTimeUnitCasualRelativeFormatParser extends AbstractParserWithLeftRightBoundaryChecking {\n    innerPatternString(context: ParsingContext): string {\n        return `(эти|последние|прошлые|следующие|после|спустя|через|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})`;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const prefix = match[1].toLowerCase();\n        let timeUnits = parseTimeUnits(match[2]);\n        switch (prefix) {\n            case \"последние\":\n            case \"прошлые\":\n            case \"-\":\n                timeUnits = reverseTimeUnits(timeUnits);\n                break;\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,cAAc,QAAqB,iBAAe;AAE/E,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,SAASC,gBAAgB,QAAQ,6BAA2B;AAC5D,SAASC,2CAA2C,QAAQ,6CAA2C;AAEvG,eAAc,MAAOC,oCAAqC,SAAQD,2CAA2C;EACzGE,kBAAkBA,CAACC,OAAuB;IACtC,OAAO,kEAAkEP,kBAAkB,GAAG;EAClG;EAEAQ,YAAYA,CAACD,OAAuB,EAAEE,KAAuB;IACzD,MAAMC,MAAM,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE;IACrC,IAAIC,SAAS,GAAGX,cAAc,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQC,MAAM;MACV,KAAK,WAAW;MAChB,KAAK,SAAS;MACd,KAAK,GAAG;QACJE,SAAS,GAAGT,gBAAgB,CAACS,SAAS,CAAC;QACvC;;IAGR,OAAOV,iBAAiB,CAACW,2BAA2B,CAACN,OAAO,CAACO,SAAS,EAAEF,SAAS,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}