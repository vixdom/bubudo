{"ast":null,"code":"import quarterOfYear from \"dayjs/plugin/quarterOfYear.js\";\nimport dayjs from \"dayjs\";\nimport { assignSimilarDate, assignSimilarTime, implySimilarTime } from \"./utils/dayjs.js\";\nimport { toTimezoneOffset } from \"./timezone.js\";\ndayjs.extend(quarterOfYear);\nexport class ReferenceWithTimezone {\n  constructor(input) {\n    input = input ?? new Date();\n    if (input instanceof Date) {\n      this.instant = input;\n      this.timezoneOffset = null;\n    } else {\n      this.instant = input.instant ?? new Date();\n      this.timezoneOffset = toTimezoneOffset(input.timezone, this.instant);\n    }\n  }\n  getDateWithAdjustedTimezone() {\n    const date = new Date(this.instant);\n    if (this.timezoneOffset !== null) {\n      date.setMinutes(date.getMinutes() - this.getSystemTimezoneAdjustmentMinute(this.instant));\n    }\n    return date;\n  }\n  getSystemTimezoneAdjustmentMinute(date, overrideTimezoneOffset) {\n    if (!date || date.getTime() < 0) {\n      date = new Date();\n    }\n    const currentTimezoneOffset = -date.getTimezoneOffset();\n    const targetTimezoneOffset = overrideTimezoneOffset ?? this.timezoneOffset ?? currentTimezoneOffset;\n    return currentTimezoneOffset - targetTimezoneOffset;\n  }\n  getTimezoneOffset() {\n    return this.timezoneOffset ?? -this.instant.getTimezoneOffset();\n  }\n}\nexport class ParsingComponents {\n  constructor(reference, knownComponents) {\n    this._tags = new Set();\n    this.reference = reference;\n    this.knownValues = {};\n    this.impliedValues = {};\n    if (knownComponents) {\n      for (const key in knownComponents) {\n        this.knownValues[key] = knownComponents[key];\n      }\n    }\n    const refDayJs = reference.getDateWithAdjustedTimezone();\n    this.imply(\"day\", refDayJs.getDate());\n    this.imply(\"month\", refDayJs.getMonth() + 1);\n    this.imply(\"year\", refDayJs.getFullYear());\n    this.imply(\"hour\", 12);\n    this.imply(\"minute\", 0);\n    this.imply(\"second\", 0);\n    this.imply(\"millisecond\", 0);\n  }\n  get(component) {\n    if (component in this.knownValues) {\n      return this.knownValues[component];\n    }\n    if (component in this.impliedValues) {\n      return this.impliedValues[component];\n    }\n    return null;\n  }\n  isCertain(component) {\n    return component in this.knownValues;\n  }\n  getCertainComponents() {\n    return Object.keys(this.knownValues);\n  }\n  imply(component, value) {\n    if (component in this.knownValues) {\n      return this;\n    }\n    this.impliedValues[component] = value;\n    return this;\n  }\n  assign(component, value) {\n    this.knownValues[component] = value;\n    delete this.impliedValues[component];\n    return this;\n  }\n  delete(component) {\n    delete this.knownValues[component];\n    delete this.impliedValues[component];\n  }\n  clone() {\n    const component = new ParsingComponents(this.reference);\n    component.knownValues = {};\n    component.impliedValues = {};\n    for (const key in this.knownValues) {\n      component.knownValues[key] = this.knownValues[key];\n    }\n    for (const key in this.impliedValues) {\n      component.impliedValues[key] = this.impliedValues[key];\n    }\n    return component;\n  }\n  isOnlyDate() {\n    return !this.isCertain(\"hour\") && !this.isCertain(\"minute\") && !this.isCertain(\"second\");\n  }\n  isOnlyTime() {\n    return !this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\") && !this.isCertain(\"year\");\n  }\n  isOnlyWeekdayComponent() {\n    return this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n  }\n  isDateWithUnknownYear() {\n    return this.isCertain(\"month\") && !this.isCertain(\"year\");\n  }\n  isValidDate() {\n    const date = this.dateWithoutTimezoneAdjustment();\n    if (date.getFullYear() !== this.get(\"year\")) return false;\n    if (date.getMonth() !== this.get(\"month\") - 1) return false;\n    if (date.getDate() !== this.get(\"day\")) return false;\n    if (this.get(\"hour\") != null && date.getHours() != this.get(\"hour\")) return false;\n    if (this.get(\"minute\") != null && date.getMinutes() != this.get(\"minute\")) return false;\n    return true;\n  }\n  toString() {\n    return `[ParsingComponents {\n            tags: ${JSON.stringify(Array.from(this._tags).sort())}, \n            knownValues: ${JSON.stringify(this.knownValues)}, \n            impliedValues: ${JSON.stringify(this.impliedValues)}}, \n            reference: ${JSON.stringify(this.reference)}]`;\n  }\n  dayjs() {\n    return dayjs(this.dateWithoutTimezoneAdjustment());\n  }\n  date() {\n    const date = this.dateWithoutTimezoneAdjustment();\n    const timezoneAdjustment = this.reference.getSystemTimezoneAdjustmentMinute(date, this.get(\"timezoneOffset\"));\n    return new Date(date.getTime() + timezoneAdjustment * 60000);\n  }\n  addTag(tag) {\n    this._tags.add(tag);\n    return this;\n  }\n  addTags(tags) {\n    for (const tag of tags) {\n      this._tags.add(tag);\n    }\n    return this;\n  }\n  tags() {\n    return new Set(this._tags);\n  }\n  dateWithoutTimezoneAdjustment() {\n    const date = new Date(this.get(\"year\"), this.get(\"month\") - 1, this.get(\"day\"), this.get(\"hour\"), this.get(\"minute\"), this.get(\"second\"), this.get(\"millisecond\"));\n    date.setFullYear(this.get(\"year\"));\n    return date;\n  }\n  static createRelativeFromReference(reference, fragments) {\n    let date = dayjs(reference.getDateWithAdjustedTimezone());\n    for (const key in fragments) {\n      date = date.add(fragments[key], key);\n    }\n    const components = new ParsingComponents(reference);\n    components.addTag(\"result/relativeDate\");\n    if (fragments[\"hour\"] || fragments[\"minute\"] || fragments[\"second\"]) {\n      components.addTag(\"result/relativeDateAndTime\");\n      assignSimilarTime(components, date);\n      assignSimilarDate(components, date);\n      components.assign(\"timezoneOffset\", reference.getTimezoneOffset());\n    } else {\n      implySimilarTime(components, date);\n      components.imply(\"timezoneOffset\", reference.getTimezoneOffset());\n      if (fragments[\"d\"]) {\n        components.assign(\"day\", date.date());\n        components.assign(\"month\", date.month() + 1);\n        components.assign(\"year\", date.year());\n      } else if (fragments[\"week\"]) {\n        components.assign(\"day\", date.date());\n        components.assign(\"month\", date.month() + 1);\n        components.assign(\"year\", date.year());\n        components.imply(\"weekday\", date.day());\n      } else {\n        components.imply(\"day\", date.date());\n        if (fragments[\"month\"]) {\n          components.assign(\"month\", date.month() + 1);\n          components.assign(\"year\", date.year());\n        } else {\n          components.imply(\"month\", date.month() + 1);\n          if (fragments[\"year\"]) {\n            components.assign(\"year\", date.year());\n          } else {\n            components.imply(\"year\", date.year());\n          }\n        }\n      }\n    }\n    return components;\n  }\n}\nexport class ParsingResult {\n  constructor(reference, index, text, start, end) {\n    this.reference = reference;\n    this.refDate = reference.instant;\n    this.index = index;\n    this.text = text;\n    this.start = start || new ParsingComponents(reference);\n    this.end = end;\n  }\n  clone() {\n    const result = new ParsingResult(this.reference, this.index, this.text);\n    result.start = this.start ? this.start.clone() : null;\n    result.end = this.end ? this.end.clone() : null;\n    return result;\n  }\n  date() {\n    return this.start.date();\n  }\n  addTag(tag) {\n    this.start.addTag(tag);\n    if (this.end) {\n      this.end.addTag(tag);\n    }\n    return this;\n  }\n  addTags(tags) {\n    this.start.addTags(tags);\n    if (this.end) {\n      this.end.addTags(tags);\n    }\n    return this;\n  }\n  tags() {\n    const combinedTags = new Set(this.start.tags());\n    if (this.end) {\n      for (const tag of this.end.tags()) {\n        combinedTags.add(tag);\n      }\n    }\n    return combinedTags;\n  }\n  toString() {\n    const tags = Array.from(this.tags()).sort();\n    return `[ParsingResult {index: ${this.index}, text: '${this.text}', tags: ${JSON.stringify(tags)} ...}]`;\n  }\n}","map":{"version":3,"names":["quarterOfYear","dayjs","assignSimilarDate","assignSimilarTime","implySimilarTime","toTimezoneOffset","extend","ReferenceWithTimezone","constructor","input","Date","instant","timezoneOffset","timezone","getDateWithAdjustedTimezone","date","setMinutes","getMinutes","getSystemTimezoneAdjustmentMinute","overrideTimezoneOffset","getTime","currentTimezoneOffset","getTimezoneOffset","targetTimezoneOffset","ParsingComponents","reference","knownComponents","_tags","Set","knownValues","impliedValues","key","refDayJs","imply","getDate","getMonth","getFullYear","get","component","isCertain","getCertainComponents","Object","keys","value","assign","delete","clone","isOnlyDate","isOnlyTime","isOnlyWeekdayComponent","isDateWithUnknownYear","isValidDate","dateWithoutTimezoneAdjustment","getHours","toString","JSON","stringify","Array","from","sort","timezoneAdjustment","addTag","tag","add","addTags","tags","setFullYear","createRelativeFromReference","fragments","components","month","year","day","ParsingResult","index","text","start","end","refDate","result","combinedTags"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/results.ts"],"sourcesContent":["import { Component, ParsedComponents, ParsedResult, ParsingReference } from \"./types\";\n\nimport quarterOfYear from \"dayjs/plugin/quarterOfYear\";\nimport dayjs, { QUnitType } from \"dayjs\";\nimport { assignSimilarDate, assignSimilarTime, implySimilarTime } from \"./utils/dayjs\";\nimport { toTimezoneOffset } from \"./timezone\";\ndayjs.extend(quarterOfYear);\n\nexport class ReferenceWithTimezone {\n    readonly instant: Date;\n    readonly timezoneOffset?: number | null;\n\n    constructor(input?: ParsingReference | Date) {\n        input = input ?? new Date();\n        if (input instanceof Date) {\n            this.instant = input;\n            this.timezoneOffset = null;\n        } else {\n            this.instant = input.instant ?? new Date();\n            this.timezoneOffset = toTimezoneOffset(input.timezone, this.instant);\n        }\n    }\n\n    /**\n     * Returns a JS date (system timezone) with the { year, month, day, hour, minute, second } equal to the reference.\n     * The output's instant is NOT the reference's instant when the reference's and system's timezone are different.\n     */\n    getDateWithAdjustedTimezone() {\n        const date = new Date(this.instant);\n        if (this.timezoneOffset !== null) {\n            date.setMinutes(date.getMinutes() - this.getSystemTimezoneAdjustmentMinute(this.instant));\n        }\n        return date;\n    }\n\n    /**\n     * Returns the number minutes difference between the JS date's timezone and the reference timezone.\n     * @param date\n     * @param overrideTimezoneOffset\n     */\n    getSystemTimezoneAdjustmentMinute(date?: Date, overrideTimezoneOffset?: number): number {\n        if (!date || date.getTime() < 0) {\n            // Javascript date timezone calculation got effect when the time epoch < 0\n            // e.g. new Date('Tue Feb 02 1300 00:00:00 GMT+0900 (JST)') => Tue Feb 02 1300 00:18:59 GMT+0918 (JST)\n            date = new Date();\n        }\n\n        const currentTimezoneOffset = -date.getTimezoneOffset();\n        const targetTimezoneOffset = overrideTimezoneOffset ?? this.timezoneOffset ?? currentTimezoneOffset;\n        return currentTimezoneOffset - targetTimezoneOffset;\n    }\n\n    getTimezoneOffset(): number {\n        return this.timezoneOffset ?? -this.instant.getTimezoneOffset();\n    }\n}\n\nexport class ParsingComponents implements ParsedComponents {\n    private knownValues: { [c in Component]?: number };\n    private impliedValues: { [c in Component]?: number };\n    private reference: ReferenceWithTimezone;\n    private _tags = new Set<string>();\n\n    constructor(reference: ReferenceWithTimezone, knownComponents?: { [c in Component]?: number }) {\n        this.reference = reference;\n        this.knownValues = {};\n        this.impliedValues = {};\n        if (knownComponents) {\n            for (const key in knownComponents) {\n                this.knownValues[key as Component] = knownComponents[key as Component];\n            }\n        }\n\n        const refDayJs = reference.getDateWithAdjustedTimezone();\n        this.imply(\"day\", refDayJs.getDate());\n        this.imply(\"month\", refDayJs.getMonth() + 1);\n        this.imply(\"year\", refDayJs.getFullYear());\n        this.imply(\"hour\", 12);\n        this.imply(\"minute\", 0);\n        this.imply(\"second\", 0);\n        this.imply(\"millisecond\", 0);\n    }\n\n    get(component: Component): number | null {\n        if (component in this.knownValues) {\n            return this.knownValues[component];\n        }\n\n        if (component in this.impliedValues) {\n            return this.impliedValues[component];\n        }\n\n        return null;\n    }\n\n    isCertain(component: Component): boolean {\n        return component in this.knownValues;\n    }\n\n    getCertainComponents(): Array<Component> {\n        return Object.keys(this.knownValues) as Array<Component>;\n    }\n\n    imply(component: Component, value: number): ParsingComponents {\n        if (component in this.knownValues) {\n            return this;\n        }\n        this.impliedValues[component] = value;\n        return this;\n    }\n\n    assign(component: Component, value: number): ParsingComponents {\n        this.knownValues[component] = value;\n        delete this.impliedValues[component];\n        return this;\n    }\n\n    delete(component: Component) {\n        delete this.knownValues[component];\n        delete this.impliedValues[component];\n    }\n\n    clone(): ParsingComponents {\n        const component = new ParsingComponents(this.reference);\n        component.knownValues = {};\n        component.impliedValues = {};\n\n        for (const key in this.knownValues) {\n            component.knownValues[key as Component] = this.knownValues[key as Component];\n        }\n\n        for (const key in this.impliedValues) {\n            component.impliedValues[key as Component] = this.impliedValues[key as Component];\n        }\n\n        return component;\n    }\n\n    isOnlyDate(): boolean {\n        return !this.isCertain(\"hour\") && !this.isCertain(\"minute\") && !this.isCertain(\"second\");\n    }\n\n    isOnlyTime(): boolean {\n        return (\n            !this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\") && !this.isCertain(\"year\")\n        );\n    }\n\n    isOnlyWeekdayComponent(): boolean {\n        return this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n    }\n\n    isDateWithUnknownYear(): boolean {\n        return this.isCertain(\"month\") && !this.isCertain(\"year\");\n    }\n\n    isValidDate(): boolean {\n        const date = this.dateWithoutTimezoneAdjustment();\n\n        if (date.getFullYear() !== this.get(\"year\")) return false;\n        if (date.getMonth() !== this.get(\"month\") - 1) return false;\n        if (date.getDate() !== this.get(\"day\")) return false;\n        if (this.get(\"hour\") != null && date.getHours() != this.get(\"hour\")) return false;\n        if (this.get(\"minute\") != null && date.getMinutes() != this.get(\"minute\")) return false;\n\n        return true;\n    }\n\n    toString() {\n        return `[ParsingComponents {\n            tags: ${JSON.stringify(Array.from(this._tags).sort())}, \n            knownValues: ${JSON.stringify(this.knownValues)}, \n            impliedValues: ${JSON.stringify(this.impliedValues)}}, \n            reference: ${JSON.stringify(this.reference)}]`;\n    }\n\n    dayjs() {\n        return dayjs(this.dateWithoutTimezoneAdjustment());\n    }\n\n    date(): Date {\n        const date = this.dateWithoutTimezoneAdjustment();\n        const timezoneAdjustment = this.reference.getSystemTimezoneAdjustmentMinute(date, this.get(\"timezoneOffset\"));\n        return new Date(date.getTime() + timezoneAdjustment * 60000);\n    }\n\n    addTag(tag: string): ParsingComponents {\n        this._tags.add(tag);\n        return this;\n    }\n\n    addTags(tags: string[] | Set<string>): ParsingComponents {\n        for (const tag of tags) {\n            this._tags.add(tag);\n        }\n        return this;\n    }\n\n    tags(): Set<string> {\n        return new Set(this._tags);\n    }\n\n    private dateWithoutTimezoneAdjustment() {\n        const date = new Date(\n            this.get(\"year\"),\n            this.get(\"month\") - 1,\n            this.get(\"day\"),\n            this.get(\"hour\"),\n            this.get(\"minute\"),\n            this.get(\"second\"),\n            this.get(\"millisecond\")\n        );\n\n        date.setFullYear(this.get(\"year\"));\n        return date;\n    }\n\n    static createRelativeFromReference(\n        reference: ReferenceWithTimezone,\n        fragments: { [c in QUnitType]?: number }\n    ): ParsingComponents {\n        let date = dayjs(reference.getDateWithAdjustedTimezone());\n        for (const key in fragments) {\n            date = date.add(fragments[key as QUnitType], key as QUnitType);\n        }\n\n        const components = new ParsingComponents(reference);\n        components.addTag(\"result/relativeDate\");\n        if (fragments[\"hour\"] || fragments[\"minute\"] || fragments[\"second\"]) {\n            components.addTag(\"result/relativeDateAndTime\");\n            assignSimilarTime(components, date);\n            assignSimilarDate(components, date);\n            components.assign(\"timezoneOffset\", reference.getTimezoneOffset());\n        } else {\n            implySimilarTime(components, date);\n            components.imply(\"timezoneOffset\", reference.getTimezoneOffset());\n\n            if (fragments[\"d\"]) {\n                components.assign(\"day\", date.date());\n                components.assign(\"month\", date.month() + 1);\n                components.assign(\"year\", date.year());\n            } else if (fragments[\"week\"]) {\n                components.assign(\"day\", date.date());\n                components.assign(\"month\", date.month() + 1);\n                components.assign(\"year\", date.year());\n                components.imply(\"weekday\", date.day());\n            } else {\n                components.imply(\"day\", date.date());\n                if (fragments[\"month\"]) {\n                    components.assign(\"month\", date.month() + 1);\n                    components.assign(\"year\", date.year());\n                } else {\n                    components.imply(\"month\", date.month() + 1);\n                    if (fragments[\"year\"]) {\n                        components.assign(\"year\", date.year());\n                    } else {\n                        components.imply(\"year\", date.year());\n                    }\n                }\n            }\n        }\n\n        return components;\n    }\n}\n\nexport class ParsingResult implements ParsedResult {\n    refDate: Date;\n    index: number;\n    text: string;\n\n    reference: ReferenceWithTimezone;\n\n    start: ParsingComponents;\n    end?: ParsingComponents;\n\n    constructor(\n        reference: ReferenceWithTimezone,\n        index: number,\n        text: string,\n        start?: ParsingComponents,\n        end?: ParsingComponents\n    ) {\n        this.reference = reference;\n        this.refDate = reference.instant;\n        this.index = index;\n        this.text = text;\n        this.start = start || new ParsingComponents(reference);\n        this.end = end;\n    }\n\n    clone() {\n        const result = new ParsingResult(this.reference, this.index, this.text);\n        result.start = this.start ? this.start.clone() : null;\n        result.end = this.end ? this.end.clone() : null;\n        return result;\n    }\n\n    date(): Date {\n        return this.start.date();\n    }\n\n    addTag(tag: string): ParsingResult {\n        this.start.addTag(tag);\n        if (this.end) {\n            this.end.addTag(tag);\n        }\n        return this;\n    }\n\n    addTags(tags: string[] | Set<string>): ParsingResult {\n        this.start.addTags(tags);\n        if (this.end) {\n            this.end.addTags(tags);\n        }\n        return this;\n    }\n\n    tags(): Set<string> {\n        const combinedTags: Set<string> = new Set(this.start.tags());\n        if (this.end) {\n            for (const tag of this.end.tags()) {\n                combinedTags.add(tag);\n            }\n        }\n        return combinedTags;\n    }\n\n    toString() {\n        const tags = Array.from(this.tags()).sort();\n        return `[ParsingResult {index: ${this.index}, text: '${this.text}', tags: ${JSON.stringify(tags)} ...}]`;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}