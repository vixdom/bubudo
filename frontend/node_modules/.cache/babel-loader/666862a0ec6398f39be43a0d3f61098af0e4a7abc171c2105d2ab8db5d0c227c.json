{"ast":null,"code":"import { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern.js\";\nimport { findMostLikelyADYear } from \"../../calculation/years.js\";\nexport const WEEKDAY_DICTIONARY = {\n  sunday: 0,\n  sun: 0,\n  \"sun.\": 0,\n  monday: 1,\n  mon: 1,\n  \"mon.\": 1,\n  tuesday: 2,\n  tue: 2,\n  \"tue.\": 2,\n  wednesday: 3,\n  wed: 3,\n  \"wed.\": 3,\n  thursday: 4,\n  thurs: 4,\n  \"thurs.\": 4,\n  thur: 4,\n  \"thur.\": 4,\n  thu: 4,\n  \"thu.\": 4,\n  friday: 5,\n  fri: 5,\n  \"fri.\": 5,\n  saturday: 6,\n  sat: 6,\n  \"sat.\": 6\n};\nexport const FULL_MONTH_NAME_DICTIONARY = {\n  january: 1,\n  february: 2,\n  march: 3,\n  april: 4,\n  may: 5,\n  june: 6,\n  july: 7,\n  august: 8,\n  september: 9,\n  october: 10,\n  november: 11,\n  december: 12\n};\nexport const MONTH_DICTIONARY = {\n  ...FULL_MONTH_NAME_DICTIONARY,\n  jan: 1,\n  \"jan.\": 1,\n  feb: 2,\n  \"feb.\": 2,\n  mar: 3,\n  \"mar.\": 3,\n  apr: 4,\n  \"apr.\": 4,\n  jun: 6,\n  \"jun.\": 6,\n  jul: 7,\n  \"jul.\": 7,\n  aug: 8,\n  \"aug.\": 8,\n  sep: 9,\n  \"sep.\": 9,\n  sept: 9,\n  \"sept.\": 9,\n  oct: 10,\n  \"oct.\": 10,\n  nov: 11,\n  \"nov.\": 11,\n  dec: 12,\n  \"dec.\": 12\n};\nexport const INTEGER_WORD_DICTIONARY = {\n  one: 1,\n  two: 2,\n  three: 3,\n  four: 4,\n  five: 5,\n  six: 6,\n  seven: 7,\n  eight: 8,\n  nine: 9,\n  ten: 10,\n  eleven: 11,\n  twelve: 12\n};\nexport const ORDINAL_WORD_DICTIONARY = {\n  first: 1,\n  second: 2,\n  third: 3,\n  fourth: 4,\n  fifth: 5,\n  sixth: 6,\n  seventh: 7,\n  eighth: 8,\n  ninth: 9,\n  tenth: 10,\n  eleventh: 11,\n  twelfth: 12,\n  thirteenth: 13,\n  fourteenth: 14,\n  fifteenth: 15,\n  sixteenth: 16,\n  seventeenth: 17,\n  eighteenth: 18,\n  nineteenth: 19,\n  twentieth: 20,\n  \"twenty first\": 21,\n  \"twenty-first\": 21,\n  \"twenty second\": 22,\n  \"twenty-second\": 22,\n  \"twenty third\": 23,\n  \"twenty-third\": 23,\n  \"twenty fourth\": 24,\n  \"twenty-fourth\": 24,\n  \"twenty fifth\": 25,\n  \"twenty-fifth\": 25,\n  \"twenty sixth\": 26,\n  \"twenty-sixth\": 26,\n  \"twenty seventh\": 27,\n  \"twenty-seventh\": 27,\n  \"twenty eighth\": 28,\n  \"twenty-eighth\": 28,\n  \"twenty ninth\": 29,\n  \"twenty-ninth\": 29,\n  \"thirtieth\": 30,\n  \"thirty first\": 31,\n  \"thirty-first\": 31\n};\nexport const TIME_UNIT_DICTIONARY_NO_ABBR = {\n  second: \"second\",\n  seconds: \"second\",\n  minute: \"minute\",\n  minutes: \"minute\",\n  hour: \"hour\",\n  hours: \"hour\",\n  day: \"d\",\n  days: \"d\",\n  week: \"week\",\n  weeks: \"week\",\n  month: \"month\",\n  months: \"month\",\n  quarter: \"quarter\",\n  quarters: \"quarter\",\n  year: \"year\",\n  years: \"year\"\n};\nexport const TIME_UNIT_DICTIONARY = {\n  s: \"second\",\n  sec: \"second\",\n  second: \"second\",\n  seconds: \"second\",\n  m: \"minute\",\n  min: \"minute\",\n  mins: \"minute\",\n  minute: \"minute\",\n  minutes: \"minute\",\n  h: \"hour\",\n  hr: \"hour\",\n  hrs: \"hour\",\n  hour: \"hour\",\n  hours: \"hour\",\n  d: \"d\",\n  day: \"d\",\n  days: \"d\",\n  w: \"w\",\n  week: \"week\",\n  weeks: \"week\",\n  mo: \"month\",\n  mon: \"month\",\n  mos: \"month\",\n  month: \"month\",\n  months: \"month\",\n  qtr: \"quarter\",\n  quarter: \"quarter\",\n  quarters: \"quarter\",\n  y: \"year\",\n  yr: \"year\",\n  year: \"year\",\n  years: \"year\",\n  ...TIME_UNIT_DICTIONARY_NO_ABBR\n};\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\\\.[0-9]+|half(?:\\\\s{0,2}an?)?|an?\\\\b(?:\\\\s{0,2}few)?|few|several|the|a?\\\\s{0,2}couple\\\\s{0,2}(?:of)?)`;\nexport function parseNumberPattern(match) {\n  const num = match.toLowerCase();\n  if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n    return INTEGER_WORD_DICTIONARY[num];\n  } else if (num === \"a\" || num === \"an\" || num == \"the\") {\n    return 1;\n  } else if (num.match(/few/)) {\n    return 3;\n  } else if (num.match(/half/)) {\n    return 0.5;\n  } else if (num.match(/couple/)) {\n    return 2;\n  } else if (num.match(/several/)) {\n    return 7;\n  }\n  return parseFloat(num);\n}\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;\nexport function parseOrdinalNumberPattern(match) {\n  let num = match.toLowerCase();\n  if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n    return ORDINAL_WORD_DICTIONARY[num];\n  }\n  num = num.replace(/(?:st|nd|rd|th)$/i, \"\");\n  return parseInt(num);\n}\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9]|2[0-5])`;\nexport function parseYear(match) {\n  if (/BE/i.test(match)) {\n    match = match.replace(/BE/i, \"\");\n    return parseInt(match) - 543;\n  }\n  if (/BCE?/i.test(match)) {\n    match = match.replace(/BCE?/i, \"\");\n    return -parseInt(match);\n  }\n  if (/(AD|CE)/i.test(match)) {\n    match = match.replace(/(AD|CE)/i, \"\");\n    return parseInt(match);\n  }\n  const rawYearNumber = parseInt(match);\n  return findMostLikelyADYear(rawYearNumber);\n}\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\nconst SINGLE_TIME_UNIT_NO_ABBR_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY_NO_ABBR)})`;\nconst TIME_UNIT_CONNECTOR_PATTERN = `\\\\s{0,5},?(?:\\\\s*and)?\\\\s{0,5}`;\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:about|around)\\\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN, TIME_UNIT_CONNECTOR_PATTERN);\nexport const TIME_UNITS_NO_ABBR_PATTERN = repeatedTimeunitPattern(`(?:(?:about|around)\\\\s{0,3})?`, SINGLE_TIME_UNIT_NO_ABBR_PATTERN, TIME_UNIT_CONNECTOR_PATTERN);\nexport function parseTimeUnits(timeunitText) {\n  const fragments = {};\n  let remainingText = timeunitText;\n  let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  while (match) {\n    collectDateTimeFragment(fragments, match);\n    remainingText = remainingText.substring(match[0].length).trim();\n    match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  }\n  if (Object.keys(fragments).length == 0) {\n    return null;\n  }\n  return fragments;\n}\nfunction collectDateTimeFragment(fragments, match) {\n  if (match[0].match(/^[a-zA-Z]+$/)) {\n    return;\n  }\n  const num = parseNumberPattern(match[1]);\n  const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n  fragments[unit] = num;\n}","map":{"version":3,"names":["matchAnyPattern","repeatedTimeunitPattern","findMostLikelyADYear","WEEKDAY_DICTIONARY","sunday","sun","monday","mon","tuesday","tue","wednesday","wed","thursday","thurs","thur","thu","friday","fri","saturday","sat","FULL_MONTH_NAME_DICTIONARY","january","february","march","april","may","june","july","august","september","october","november","december","MONTH_DICTIONARY","jan","feb","mar","apr","jun","jul","aug","sep","sept","oct","nov","dec","INTEGER_WORD_DICTIONARY","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","ORDINAL_WORD_DICTIONARY","first","second","third","fourth","fifth","sixth","seventh","eighth","ninth","tenth","eleventh","twelfth","thirteenth","fourteenth","fifteenth","sixteenth","seventeenth","eighteenth","nineteenth","twentieth","TIME_UNIT_DICTIONARY_NO_ABBR","seconds","minute","minutes","hour","hours","day","days","week","weeks","month","months","quarter","quarters","year","years","TIME_UNIT_DICTIONARY","s","sec","m","min","mins","h","hr","hrs","d","w","mo","mos","qtr","y","yr","NUMBER_PATTERN","parseNumberPattern","match","num","toLowerCase","undefined","parseFloat","ORDINAL_NUMBER_PATTERN","parseOrdinalNumberPattern","replace","parseInt","YEAR_PATTERN","parseYear","test","rawYearNumber","SINGLE_TIME_UNIT_PATTERN","SINGLE_TIME_UNIT_REGEX","RegExp","SINGLE_TIME_UNIT_NO_ABBR_PATTERN","TIME_UNIT_CONNECTOR_PATTERN","TIME_UNITS_PATTERN","TIME_UNITS_NO_ABBR_PATTERN","parseTimeUnits","timeunitText","fragments","remainingText","exec","collectDateTimeFragment","substring","length","trim","Object","keys","unit"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/en/constants.ts"],"sourcesContent":["import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\nimport { Weekday } from \"../../types\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: Weekday } = {\n    sunday: 0,\n    sun: 0,\n    \"sun.\": 0,\n    monday: 1,\n    mon: 1,\n    \"mon.\": 1,\n    tuesday: 2,\n    tue: 2,\n    \"tue.\": 2,\n    wednesday: 3,\n    wed: 3,\n    \"wed.\": 3,\n    thursday: 4,\n    thurs: 4,\n    \"thurs.\": 4,\n    thur: 4,\n    \"thur.\": 4,\n    thu: 4,\n    \"thu.\": 4,\n    friday: 5,\n    fri: 5,\n    \"fri.\": 5,\n    saturday: 6,\n    sat: 6,\n    \"sat.\": 6,\n};\n\nexport const FULL_MONTH_NAME_DICTIONARY: { [word: string]: number } = {\n    january: 1,\n    february: 2,\n    march: 3,\n    april: 4,\n    may: 5,\n    june: 6,\n    july: 7,\n    august: 8,\n    september: 9,\n    october: 10,\n    november: 11,\n    december: 12,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    ...FULL_MONTH_NAME_DICTIONARY,\n    jan: 1,\n    \"jan.\": 1,\n    feb: 2,\n    \"feb.\": 2,\n    mar: 3,\n    \"mar.\": 3,\n    apr: 4,\n    \"apr.\": 4,\n    jun: 6,\n    \"jun.\": 6,\n    jul: 7,\n    \"jul.\": 7,\n    aug: 8,\n    \"aug.\": 8,\n    sep: 9,\n    \"sep.\": 9,\n    sept: 9,\n    \"sept.\": 9,\n    oct: 10,\n    \"oct.\": 10,\n    nov: 11,\n    \"nov.\": 11,\n    dec: 12,\n    \"dec.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9,\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19,\n    twentieth: 20,\n    \"twenty first\": 21,\n    \"twenty-first\": 21,\n    \"twenty second\": 22,\n    \"twenty-second\": 22,\n    \"twenty third\": 23,\n    \"twenty-third\": 23,\n    \"twenty fourth\": 24,\n    \"twenty-fourth\": 24,\n    \"twenty fifth\": 25,\n    \"twenty-fifth\": 25,\n    \"twenty sixth\": 26,\n    \"twenty-sixth\": 26,\n    \"twenty seventh\": 27,\n    \"twenty-seventh\": 27,\n    \"twenty eighth\": 28,\n    \"twenty-eighth\": 28,\n    \"twenty ninth\": 29,\n    \"twenty-ninth\": 29,\n    \"thirtieth\": 30,\n    \"thirty first\": 31,\n    \"thirty-first\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY_NO_ABBR: { [word: string]: OpUnitType | QUnitType } = {\n    second: \"second\",\n    seconds: \"second\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    hour: \"hour\",\n    hours: \"hour\",\n    day: \"d\",\n    days: \"d\",\n    week: \"week\",\n    weeks: \"week\",\n    month: \"month\",\n    months: \"month\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    year: \"year\",\n    years: \"year\",\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    s: \"second\",\n    sec: \"second\",\n    second: \"second\",\n    seconds: \"second\",\n    m: \"minute\",\n    min: \"minute\",\n    mins: \"minute\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    h: \"hour\",\n    hr: \"hour\",\n    hrs: \"hour\",\n    hour: \"hour\",\n    hours: \"hour\",\n    d: \"d\",\n    day: \"d\",\n    days: \"d\",\n    w: \"w\",\n    week: \"week\",\n    weeks: \"week\",\n    mo: \"month\",\n    mon: \"month\",\n    mos: \"month\",\n    month: \"month\",\n    months: \"month\",\n    qtr: \"quarter\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    y: \"year\",\n    yr: \"year\",\n    year: \"year\",\n    years: \"year\",\n    // Also, merge the entries from the full-name dictionary.\n    // We leave the duplicated entries for readability.\n    ...TIME_UNIT_DICTIONARY_NO_ABBR,\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|half(?:\\\\s{0,2}an?)?|an?\\\\b(?:\\\\s{0,2}few)?|few|several|the|a?\\\\s{0,2}couple\\\\s{0,2}(?:of)?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"a\" || num === \"an\" || num == \"the\") {\n        return 1;\n    } else if (num.match(/few/)) {\n        return 3;\n    } else if (num.match(/half/)) {\n        return 0.5;\n    } else if (num.match(/couple/)) {\n        return 2;\n    } else if (num.match(/several/)) {\n        return 7;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n\n    num = num.replace(/(?:st|nd|rd|th)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9]|2[0-5])`;\nexport function parseYear(match: string): number {\n    if (/BE/i.test(match)) {\n        // Buddhist Era\n        match = match.replace(/BE/i, \"\");\n        return parseInt(match) - 543;\n    }\n\n    if (/BCE?/i.test(match)) {\n        // Before Christ, Before Common Era\n        match = match.replace(/BCE?/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/(AD|CE)/i.test(match)) {\n        // Anno Domini, Common Era\n        match = match.replace(/(AD|CE)/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nconst SINGLE_TIME_UNIT_NO_ABBR_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(\n    TIME_UNIT_DICTIONARY_NO_ABBR\n)})`;\n\nconst TIME_UNIT_CONNECTOR_PATTERN = `\\\\s{0,5},?(?:\\\\s*and)?\\\\s{0,5}`;\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\n    `(?:(?:about|around)\\\\s{0,3})?`,\n    SINGLE_TIME_UNIT_PATTERN,\n    TIME_UNIT_CONNECTOR_PATTERN\n);\nexport const TIME_UNITS_NO_ABBR_PATTERN = repeatedTimeunitPattern(\n    `(?:(?:about|around)\\\\s{0,3})?`,\n    SINGLE_TIME_UNIT_NO_ABBR_PATTERN,\n    TIME_UNIT_CONNECTOR_PATTERN\n);\n\nexport function parseTimeUnits(timeunitText): null | TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length).trim();\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    if (Object.keys(fragments).length == 0) {\n        return null;\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    if (match[0].match(/^[a-zA-Z]+$/)) {\n        return;\n    }\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}