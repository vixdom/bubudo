{"ast":null,"code":"import { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern.js\";\nimport { findMostLikelyADYear } from \"../../calculation/years.js\";\nexport const REGEX_PARTS = {\n  leftBoundary: \"([^\\\\p{L}\\\\p{N}_]|^)\",\n  rightBoundary: \"(?=[^\\\\p{L}\\\\p{N}_]|$)\",\n  flags: \"iu\"\n};\nexport const WEEKDAY_DICTIONARY = {\n  воскресенье: 0,\n  воскресенья: 0,\n  вск: 0,\n  \"вск.\": 0,\n  понедельник: 1,\n  понедельника: 1,\n  пн: 1,\n  \"пн.\": 1,\n  вторник: 2,\n  вторника: 2,\n  вт: 2,\n  \"вт.\": 2,\n  среда: 3,\n  среды: 3,\n  среду: 3,\n  ср: 3,\n  \"ср.\": 3,\n  четверг: 4,\n  четверга: 4,\n  чт: 4,\n  \"чт.\": 4,\n  пятница: 5,\n  пятницу: 5,\n  пятницы: 5,\n  пт: 5,\n  \"пт.\": 5,\n  суббота: 6,\n  субботу: 6,\n  субботы: 6,\n  сб: 6,\n  \"сб.\": 6\n};\nexport const FULL_MONTH_NAME_DICTIONARY = {\n  январь: 1,\n  января: 1,\n  январе: 1,\n  февраль: 2,\n  февраля: 2,\n  феврале: 2,\n  март: 3,\n  марта: 3,\n  марте: 3,\n  апрель: 4,\n  апреля: 4,\n  апреле: 4,\n  май: 5,\n  мая: 5,\n  мае: 5,\n  июнь: 6,\n  июня: 6,\n  июне: 6,\n  июль: 7,\n  июля: 7,\n  июле: 7,\n  август: 8,\n  августа: 8,\n  августе: 8,\n  сентябрь: 9,\n  сентября: 9,\n  сентябре: 9,\n  октябрь: 10,\n  октября: 10,\n  октябре: 10,\n  ноябрь: 11,\n  ноября: 11,\n  ноябре: 11,\n  декабрь: 12,\n  декабря: 12,\n  декабре: 12\n};\nexport const MONTH_DICTIONARY = {\n  ...FULL_MONTH_NAME_DICTIONARY,\n  янв: 1,\n  \"янв.\": 1,\n  фев: 2,\n  \"фев.\": 2,\n  мар: 3,\n  \"мар.\": 3,\n  апр: 4,\n  \"апр.\": 4,\n  авг: 8,\n  \"авг.\": 8,\n  сен: 9,\n  \"сен.\": 9,\n  окт: 10,\n  \"окт.\": 10,\n  ноя: 11,\n  \"ноя.\": 11,\n  дек: 12,\n  \"дек.\": 12\n};\nexport const INTEGER_WORD_DICTIONARY = {\n  один: 1,\n  одна: 1,\n  одной: 1,\n  одну: 1,\n  две: 2,\n  два: 2,\n  двух: 2,\n  три: 3,\n  трех: 3,\n  трёх: 3,\n  четыре: 4,\n  четырех: 4,\n  четырёх: 4,\n  пять: 5,\n  пяти: 5,\n  шесть: 6,\n  шести: 6,\n  семь: 7,\n  семи: 7,\n  восемь: 8,\n  восьми: 8,\n  девять: 9,\n  девяти: 9,\n  десять: 10,\n  десяти: 10,\n  одиннадцать: 11,\n  одиннадцати: 11,\n  двенадцать: 12,\n  двенадцати: 12\n};\nexport const ORDINAL_WORD_DICTIONARY = {\n  первое: 1,\n  первого: 1,\n  второе: 2,\n  второго: 2,\n  третье: 3,\n  третьего: 3,\n  четвертое: 4,\n  четвертого: 4,\n  пятое: 5,\n  пятого: 5,\n  шестое: 6,\n  шестого: 6,\n  седьмое: 7,\n  седьмого: 7,\n  восьмое: 8,\n  восьмого: 8,\n  девятое: 9,\n  девятого: 9,\n  десятое: 10,\n  десятого: 10,\n  одиннадцатое: 11,\n  одиннадцатого: 11,\n  двенадцатое: 12,\n  двенадцатого: 12,\n  тринадцатое: 13,\n  тринадцатого: 13,\n  четырнадцатое: 14,\n  четырнадцатого: 14,\n  пятнадцатое: 15,\n  пятнадцатого: 15,\n  шестнадцатое: 16,\n  шестнадцатого: 16,\n  семнадцатое: 17,\n  семнадцатого: 17,\n  восемнадцатое: 18,\n  восемнадцатого: 18,\n  девятнадцатое: 19,\n  девятнадцатого: 19,\n  двадцатое: 20,\n  двадцатого: 20,\n  \"двадцать первое\": 21,\n  \"двадцать первого\": 21,\n  \"двадцать второе\": 22,\n  \"двадцать второго\": 22,\n  \"двадцать третье\": 23,\n  \"двадцать третьего\": 23,\n  \"двадцать четвертое\": 24,\n  \"двадцать четвертого\": 24,\n  \"двадцать пятое\": 25,\n  \"двадцать пятого\": 25,\n  \"двадцать шестое\": 26,\n  \"двадцать шестого\": 26,\n  \"двадцать седьмое\": 27,\n  \"двадцать седьмого\": 27,\n  \"двадцать восьмое\": 28,\n  \"двадцать восьмого\": 28,\n  \"двадцать девятое\": 29,\n  \"двадцать девятого\": 29,\n  \"тридцатое\": 30,\n  \"тридцатого\": 30,\n  \"тридцать первое\": 31,\n  \"тридцать первого\": 31\n};\nexport const TIME_UNIT_DICTIONARY = {\n  сек: \"second\",\n  секунда: \"second\",\n  секунд: \"second\",\n  секунды: \"second\",\n  секунду: \"second\",\n  секундочка: \"second\",\n  секундочки: \"second\",\n  секундочек: \"second\",\n  секундочку: \"second\",\n  мин: \"minute\",\n  минута: \"minute\",\n  минут: \"minute\",\n  минуты: \"minute\",\n  минуту: \"minute\",\n  минуток: \"minute\",\n  минутки: \"minute\",\n  минутку: \"minute\",\n  минуточек: \"minute\",\n  минуточки: \"minute\",\n  минуточку: \"minute\",\n  час: \"hour\",\n  часов: \"hour\",\n  часа: \"hour\",\n  часу: \"hour\",\n  часиков: \"hour\",\n  часика: \"hour\",\n  часике: \"hour\",\n  часик: \"hour\",\n  день: \"d\",\n  дня: \"d\",\n  дней: \"d\",\n  суток: \"d\",\n  сутки: \"d\",\n  неделя: \"week\",\n  неделе: \"week\",\n  недели: \"week\",\n  неделю: \"week\",\n  недель: \"week\",\n  недельке: \"week\",\n  недельки: \"week\",\n  неделек: \"week\",\n  месяц: \"month\",\n  месяце: \"month\",\n  месяцев: \"month\",\n  месяца: \"month\",\n  квартал: \"quarter\",\n  квартале: \"quarter\",\n  кварталов: \"quarter\",\n  год: \"year\",\n  года: \"year\",\n  году: \"year\",\n  годов: \"year\",\n  лет: \"year\",\n  годик: \"year\",\n  годика: \"year\",\n  годиков: \"year\"\n};\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\\\.[0-9]+|пол|несколько|пар(?:ы|у)|\\\\s{0,3})`;\nexport function parseNumberPattern(match) {\n  const num = match.toLowerCase();\n  if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n    return INTEGER_WORD_DICTIONARY[num];\n  }\n  if (num.match(/несколько/)) {\n    return 3;\n  } else if (num.match(/пол/)) {\n    return 0.5;\n  } else if (num.match(/пар/)) {\n    return 2;\n  } else if (num === \"\") {\n    return 1;\n  }\n  return parseFloat(num);\n}\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:го|ого|е|ое)?)`;\nexport function parseOrdinalNumberPattern(match) {\n  const num = match.toLowerCase();\n  if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n    return ORDINAL_WORD_DICTIONARY[num];\n  }\n  return parseInt(num);\n}\nconst year = \"(?:\\\\s+(?:году|года|год|г|г.))?\";\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}${year}\\\\s*(?:н.э.|до н.э.|н. э.|до н. э.)|[1-2][0-9]{3}${year}|[5-9][0-9]${year})`;\nexport function parseYear(match) {\n  if (/(год|года|г|г.)/i.test(match)) {\n    match = match.replace(/(год|года|г|г.)/i, \"\");\n  }\n  if (/(до н.э.|до н. э.)/i.test(match)) {\n    match = match.replace(/(до н.э.|до н. э.)/i, \"\");\n    return -parseInt(match);\n  }\n  if (/(н. э.|н.э.)/i.test(match)) {\n    match = match.replace(/(н. э.|н.э.)/i, \"\");\n    return parseInt(match);\n  }\n  const rawYearNumber = parseInt(match);\n  return findMostLikelyADYear(rawYearNumber);\n}\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:около|примерно)\\\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);\nexport function parseTimeUnits(timeunitText) {\n  const fragments = {};\n  let remainingText = timeunitText;\n  let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  while (match) {\n    collectDateTimeFragment(fragments, match);\n    remainingText = remainingText.substring(match[0].length).trim();\n    match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  }\n  return fragments;\n}\nfunction collectDateTimeFragment(fragments, match) {\n  const num = parseNumberPattern(match[1]);\n  const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n  fragments[unit] = num;\n}","map":{"version":3,"names":["matchAnyPattern","repeatedTimeunitPattern","findMostLikelyADYear","REGEX_PARTS","leftBoundary","rightBoundary","flags","WEEKDAY_DICTIONARY","воскресенье","воскресенья","вск","понедельник","понедельника","пн","вторник","вторника","вт","среда","среды","среду","ср","четверг","четверга","чт","пятница","пятницу","пятницы","пт","суббота","субботу","субботы","сб","FULL_MONTH_NAME_DICTIONARY","январь","января","январе","февраль","февраля","феврале","март","марта","марте","апрель","апреля","апреле","май","мая","мае","июнь","июня","июне","июль","июля","июле","август","августа","августе","сентябрь","сентября","сентябре","октябрь","октября","октябре","ноябрь","ноября","ноябре","декабрь","декабря","декабре","MONTH_DICTIONARY","янв","фев","мар","апр","авг","сен","окт","ноя","дек","INTEGER_WORD_DICTIONARY","один","одна","одной","одну","две","два","двух","три","трех","трёх","четыре","четырех","четырёх","пять","пяти","шесть","шести","семь","семи","восемь","восьми","девять","девяти","десять","десяти","одиннадцать","одиннадцати","двенадцать","двенадцати","ORDINAL_WORD_DICTIONARY","первое","первого","второе","второго","третье","третьего","четвертое","четвертого","пятое","пятого","шестое","шестого","седьмое","седьмого","восьмое","восьмого","девятое","девятого","десятое","десятого","одиннадцатое","одиннадцатого","двенадцатое","двенадцатого","тринадцатое","тринадцатого","четырнадцатое","четырнадцатого","пятнадцатое","пятнадцатого","шестнадцатое","шестнадцатого","семнадцатое","семнадцатого","восемнадцатое","восемнадцатого","девятнадцатое","девятнадцатого","двадцатое","двадцатого","TIME_UNIT_DICTIONARY","сек","секунда","секунд","секунды","секунду","секундочка","секундочки","секундочек","секундочку","мин","минута","минут","минуты","минуту","минуток","минутки","минутку","минуточек","минуточки","минуточку","час","часов","часа","часу","часиков","часика","часике","часик","день","дня","дней","суток","сутки","неделя","неделе","недели","неделю","недель","недельке","недельки","неделек","месяц","месяце","месяцев","месяца","квартал","квартале","кварталов","год","года","году","годов","лет","годик","годика","годиков","NUMBER_PATTERN","parseNumberPattern","match","num","toLowerCase","undefined","parseFloat","ORDINAL_NUMBER_PATTERN","parseOrdinalNumberPattern","parseInt","year","YEAR_PATTERN","parseYear","test","replace","rawYearNumber","SINGLE_TIME_UNIT_PATTERN","SINGLE_TIME_UNIT_REGEX","RegExp","TIME_UNITS_PATTERN","parseTimeUnits","timeunitText","fragments","remainingText","exec","collectDateTimeFragment","substring","length","trim","unit"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ru/constants.ts"],"sourcesContent":["import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\n\nexport const REGEX_PARTS = {\n    leftBoundary: \"([^\\\\p{L}\\\\p{N}_]|^)\",\n    rightBoundary: \"(?=[^\\\\p{L}\\\\p{N}_]|$)\",\n    flags: \"iu\",\n};\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    воскресенье: 0,\n    воскресенья: 0,\n    вск: 0,\n    \"вск.\": 0,\n    понедельник: 1,\n    понедельника: 1,\n    пн: 1,\n    \"пн.\": 1,\n    вторник: 2,\n    вторника: 2,\n    вт: 2,\n    \"вт.\": 2,\n    среда: 3,\n    среды: 3,\n    среду: 3,\n    ср: 3,\n    \"ср.\": 3,\n    четверг: 4,\n    четверга: 4,\n    чт: 4,\n    \"чт.\": 4,\n    пятница: 5,\n    пятницу: 5,\n    пятницы: 5,\n    пт: 5,\n    \"пт.\": 5,\n    суббота: 6,\n    субботу: 6,\n    субботы: 6,\n    сб: 6,\n    \"сб.\": 6,\n};\n\nexport const FULL_MONTH_NAME_DICTIONARY: { [word: string]: number } = {\n    январь: 1,\n    января: 1,\n    январе: 1,\n    февраль: 2,\n    февраля: 2,\n    феврале: 2,\n    март: 3,\n    марта: 3,\n    марте: 3,\n    апрель: 4,\n    апреля: 4,\n    апреле: 4,\n    май: 5,\n    мая: 5,\n    мае: 5,\n    июнь: 6,\n    июня: 6,\n    июне: 6,\n    июль: 7,\n    июля: 7,\n    июле: 7,\n    август: 8,\n    августа: 8,\n    августе: 8,\n    сентябрь: 9,\n    сентября: 9,\n    сентябре: 9,\n    октябрь: 10,\n    октября: 10,\n    октябре: 10,\n    ноябрь: 11,\n    ноября: 11,\n    ноябре: 11,\n    декабрь: 12,\n    декабря: 12,\n    декабре: 12,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    ...FULL_MONTH_NAME_DICTIONARY,\n    янв: 1,\n    \"янв.\": 1,\n    фев: 2,\n    \"фев.\": 2,\n    мар: 3,\n    \"мар.\": 3,\n    апр: 4,\n    \"апр.\": 4,\n    авг: 8,\n    \"авг.\": 8,\n    сен: 9,\n    \"сен.\": 9,\n    окт: 10,\n    \"окт.\": 10,\n    ноя: 11,\n    \"ноя.\": 11,\n    дек: 12,\n    \"дек.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    один: 1,\n    одна: 1,\n    одной: 1,\n    одну: 1,\n    две: 2,\n    два: 2,\n    двух: 2,\n    три: 3,\n    трех: 3,\n    трёх: 3,\n    четыре: 4,\n    четырех: 4,\n    четырёх: 4,\n    пять: 5,\n    пяти: 5,\n    шесть: 6,\n    шести: 6,\n    семь: 7,\n    семи: 7,\n    восемь: 8,\n    восьми: 8,\n    девять: 9,\n    девяти: 9,\n    десять: 10,\n    десяти: 10,\n    одиннадцать: 11,\n    одиннадцати: 11,\n    двенадцать: 12,\n    двенадцати: 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    первое: 1,\n    первого: 1,\n    второе: 2,\n    второго: 2,\n    третье: 3,\n    третьего: 3,\n    четвертое: 4,\n    четвертого: 4,\n    пятое: 5,\n    пятого: 5,\n    шестое: 6,\n    шестого: 6,\n    седьмое: 7,\n    седьмого: 7,\n    восьмое: 8,\n    восьмого: 8,\n    девятое: 9,\n    девятого: 9,\n    десятое: 10,\n    десятого: 10,\n    одиннадцатое: 11,\n    одиннадцатого: 11,\n    двенадцатое: 12,\n    двенадцатого: 12,\n    тринадцатое: 13,\n    тринадцатого: 13,\n    четырнадцатое: 14,\n    четырнадцатого: 14,\n    пятнадцатое: 15,\n    пятнадцатого: 15,\n    шестнадцатое: 16,\n    шестнадцатого: 16,\n    семнадцатое: 17,\n    семнадцатого: 17,\n    восемнадцатое: 18,\n    восемнадцатого: 18,\n    девятнадцатое: 19,\n    девятнадцатого: 19,\n    двадцатое: 20,\n    двадцатого: 20,\n    \"двадцать первое\": 21,\n    \"двадцать первого\": 21,\n    \"двадцать второе\": 22,\n    \"двадцать второго\": 22,\n    \"двадцать третье\": 23,\n    \"двадцать третьего\": 23,\n    \"двадцать четвертое\": 24,\n    \"двадцать четвертого\": 24,\n    \"двадцать пятое\": 25,\n    \"двадцать пятого\": 25,\n    \"двадцать шестое\": 26,\n    \"двадцать шестого\": 26,\n    \"двадцать седьмое\": 27,\n    \"двадцать седьмого\": 27,\n    \"двадцать восьмое\": 28,\n    \"двадцать восьмого\": 28,\n    \"двадцать девятое\": 29,\n    \"двадцать девятого\": 29,\n    \"тридцатое\": 30,\n    \"тридцатого\": 30,\n    \"тридцать первое\": 31,\n    \"тридцать первого\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    сек: \"second\",\n    секунда: \"second\",\n    секунд: \"second\",\n    секунды: \"second\",\n    секунду: \"second\",\n    секундочка: \"second\",\n    секундочки: \"second\",\n    секундочек: \"second\",\n    секундочку: \"second\",\n    мин: \"minute\",\n    минута: \"minute\",\n    минут: \"minute\",\n    минуты: \"minute\",\n    минуту: \"minute\",\n    минуток: \"minute\",\n    минутки: \"minute\",\n    минутку: \"minute\",\n    минуточек: \"minute\",\n    минуточки: \"minute\",\n    минуточку: \"minute\",\n    час: \"hour\",\n    часов: \"hour\",\n    часа: \"hour\",\n    часу: \"hour\",\n    часиков: \"hour\",\n    часика: \"hour\",\n    часике: \"hour\",\n    часик: \"hour\",\n    день: \"d\",\n    дня: \"d\",\n    дней: \"d\",\n    суток: \"d\",\n    сутки: \"d\",\n    неделя: \"week\",\n    неделе: \"week\",\n    недели: \"week\",\n    неделю: \"week\",\n    недель: \"week\",\n    недельке: \"week\",\n    недельки: \"week\",\n    неделек: \"week\",\n    месяц: \"month\",\n    месяце: \"month\",\n    месяцев: \"month\",\n    месяца: \"month\",\n    квартал: \"quarter\",\n    квартале: \"quarter\",\n    кварталов: \"quarter\",\n    год: \"year\",\n    года: \"year\",\n    году: \"year\",\n    годов: \"year\",\n    лет: \"year\",\n    годик: \"year\",\n    годика: \"year\",\n    годиков: \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|пол|несколько|пар(?:ы|у)|\\\\s{0,3})`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    }\n    if (num.match(/несколько/)) {\n        return 3;\n    } else if (num.match(/пол/)) {\n        return 0.5;\n    } else if (num.match(/пар/)) {\n        return 2;\n    } else if (num === \"\") {\n        return 1;\n    }\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:го|ого|е|ое)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n    return parseInt(num);\n}\n\n//-----------------------------\n\nconst year = \"(?:\\\\s+(?:году|года|год|г|г.))?\";\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}${year}\\\\s*(?:н.э.|до н.э.|н. э.|до н. э.)|[1-2][0-9]{3}${year}|[5-9][0-9]${year})`;\nexport function parseYear(match: string): number {\n    if (/(год|года|г|г.)/i.test(match)) {\n        match = match.replace(/(год|года|г|г.)/i, \"\");\n    }\n\n    if (/(до н.э.|до н. э.)/i.test(match)) {\n        //Before Common Era\n        match = match.replace(/(до н.э.|до н. э.)/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/(н. э.|н.э.)/i.test(match)) {\n        //Common Era\n        match = match.replace(/(н. э.|н.э.)/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:около|примерно)\\\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length).trim();\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}