{"ast":null,"code":"import { TIME_UNITS_PATTERN, parseTimeUnits } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits.js\";\nconst PATTERN = new RegExp(`(dit|deze|vorig|afgelopen|(?:aan)?komend|over|\\\\+|-)e?\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\nconst PREFIX_WORD_GROUP = 1;\nconst TIME_UNIT_WORD_GROUP = 2;\nexport default class NLTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const prefix = match[PREFIX_WORD_GROUP].toLowerCase();\n    let timeUnits = parseTimeUnits(match[TIME_UNIT_WORD_GROUP]);\n    switch (prefix) {\n      case \"vorig\":\n      case \"afgelopen\":\n      case \"-\":\n        timeUnits = reverseTimeUnits(timeUnits);\n        break;\n    }\n    return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n  }\n}","map":{"version":3,"names":["TIME_UNITS_PATTERN","parseTimeUnits","ParsingComponents","AbstractParserWithWordBoundaryChecking","reverseTimeUnits","PATTERN","RegExp","PREFIX_WORD_GROUP","TIME_UNIT_WORD_GROUP","NLTimeUnitCasualRelativeFormatParser","innerPattern","innerExtract","context","match","prefix","toLowerCase","timeUnits","createRelativeFromReference","reference"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/parsers/NLTimeUnitCasualRelativeFormatParser.ts"],"sourcesContent":["import { TIME_UNITS_PATTERN, parseTimeUnits } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(\n    `(dit|deze|vorig|afgelopen|(?:aan)?komend|over|\\\\+|-)e?\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst PREFIX_WORD_GROUP = 1;\nconst TIME_UNIT_WORD_GROUP = 2;\n\nexport default class NLTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const prefix = match[PREFIX_WORD_GROUP].toLowerCase();\n        let timeUnits = parseTimeUnits(match[TIME_UNIT_WORD_GROUP]);\n        switch (prefix) {\n            case \"vorig\":\n            case \"afgelopen\":\n            case \"-\":\n                timeUnits = reverseTimeUnits(timeUnits);\n                break;\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,cAAc,QAAQ,iBAAe;AAElE,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,gBAAgB,QAAQ,6BAA2B;AAE5D,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,8DAA8DN,kBAAkB,YAAY,EAC5F,GAAG,CACN;AAED,MAAMO,iBAAiB,GAAG,CAAC;AAC3B,MAAMC,oBAAoB,GAAG,CAAC;AAE9B,eAAc,MAAOC,oCAAqC,SAAQN,sCAAsC;EACpGO,YAAYA,CAAA;IACR,OAAOL,OAAO;EAClB;EAEAM,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,MAAM,GAAGD,KAAK,CAACN,iBAAiB,CAAC,CAACQ,WAAW,EAAE;IACrD,IAAIC,SAAS,GAAGf,cAAc,CAACY,KAAK,CAACL,oBAAoB,CAAC,CAAC;IAC3D,QAAQM,MAAM;MACV,KAAK,OAAO;MACZ,KAAK,WAAW;MAChB,KAAK,GAAG;QACJE,SAAS,GAAGZ,gBAAgB,CAACY,SAAS,CAAC;QACvC;;IAGR,OAAOd,iBAAiB,CAACe,2BAA2B,CAACL,OAAO,CAACM,SAAS,EAAEF,SAAS,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}