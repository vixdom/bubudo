{"ast":null,"code":"export default class OverlapRemovalRefiner {\n  refine(context, results) {\n    if (results.length < 2) {\n      return results;\n    }\n    const filteredResults = [];\n    let prevResult = results[0];\n    for (let i = 1; i < results.length; i++) {\n      const result = results[i];\n      if (result.index >= prevResult.index + prevResult.text.length) {\n        filteredResults.push(prevResult);\n        prevResult = result;\n        continue;\n      }\n      let kept = null;\n      let removed = null;\n      if (result.text.length > prevResult.text.length) {\n        kept = result;\n        removed = prevResult;\n      } else {\n        kept = prevResult;\n        removed = result;\n      }\n      context.debug(() => {\n        console.log(`${this.constructor.name} remove ${removed} by ${kept}`);\n      });\n      prevResult = kept;\n    }\n    if (prevResult != null) {\n      filteredResults.push(prevResult);\n    }\n    return filteredResults;\n  }\n}","map":{"version":3,"names":["OverlapRemovalRefiner","refine","context","results","length","filteredResults","prevResult","i","result","index","text","push","kept","removed","debug","console","log","constructor","name"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/common/refiners/OverlapRemovalRefiner.ts"],"sourcesContent":["/*\n  \n*/\n\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nexport default class OverlapRemovalRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (results.length < 2) {\n            return results;\n        }\n\n        const filteredResults = [];\n        let prevResult = results[0];\n        for (let i = 1; i < results.length; i++) {\n            const result = results[i];\n            if (result.index >= prevResult.index + prevResult.text.length) {\n                filteredResults.push(prevResult);\n                prevResult = result;\n                continue;\n            }\n\n            // If overlap, compare the length and discard the shorter one\n            let kept = null;\n            let removed = null;\n            if (result.text.length > prevResult.text.length) {\n                kept = result;\n                removed = prevResult;\n            } else {\n                kept = prevResult;\n                removed = result;\n            }\n            context.debug(() => {\n                console.log(`${this.constructor.name} remove ${removed} by ${kept}`);\n            });\n            prevResult = kept;\n        }\n\n        // The last one\n        if (prevResult != null) {\n            filteredResults.push(prevResult);\n        }\n\n        return filteredResults;\n    }\n}\n"],"mappings":"AAOA,eAAc,MAAOA,qBAAqB;EACtCC,MAAMA,CAACC,OAAuB,EAAEC,OAAwB;IACpD,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MACpB,OAAOD,OAAO;;IAGlB,MAAME,eAAe,GAAG,EAAE;IAC1B,IAAIC,UAAU,GAAGH,OAAO,CAAC,CAAC,CAAC;IAC3B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACC,MAAM,EAAEG,CAAC,EAAE,EAAE;MACrC,MAAMC,MAAM,GAAGL,OAAO,CAACI,CAAC,CAAC;MACzB,IAAIC,MAAM,CAACC,KAAK,IAAIH,UAAU,CAACG,KAAK,GAAGH,UAAU,CAACI,IAAI,CAACN,MAAM,EAAE;QAC3DC,eAAe,CAACM,IAAI,CAACL,UAAU,CAAC;QAChCA,UAAU,GAAGE,MAAM;QACnB;;MAIJ,IAAII,IAAI,GAAG,IAAI;MACf,IAAIC,OAAO,GAAG,IAAI;MAClB,IAAIL,MAAM,CAACE,IAAI,CAACN,MAAM,GAAGE,UAAU,CAACI,IAAI,CAACN,MAAM,EAAE;QAC7CQ,IAAI,GAAGJ,MAAM;QACbK,OAAO,GAAGP,UAAU;OACvB,MAAM;QACHM,IAAI,GAAGN,UAAU;QACjBO,OAAO,GAAGL,MAAM;;MAEpBN,OAAO,CAACY,KAAK,CAAC,MAAK;QACfC,OAAO,CAACC,GAAG,CAAC,GAAG,IAAI,CAACC,WAAW,CAACC,IAAI,WAAWL,OAAO,OAAOD,IAAI,EAAE,CAAC;MACxE,CAAC,CAAC;MACFN,UAAU,GAAGM,IAAI;;IAIrB,IAAIN,UAAU,IAAI,IAAI,EAAE;MACpBD,eAAe,CAACM,IAAI,CAACL,UAAU,CAAC;;IAGpC,OAAOD,eAAe;EAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}