{"ast":null,"code":"import { TIME_UNIT_DICTIONARY } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { matchAnyPattern } from \"../../../utils/pattern.js\";\nconst PATTERN = new RegExp(`(dit|deze|(?:aan)?komend|volgend|afgelopen|vorig)e?\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})(?=\\\\s*)` + \"(?=\\\\W|$)\", \"i\");\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\nexport default class NLRelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n    const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n    const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n    if (modifier == \"volgend\" || modifier == \"komend\" || modifier == \"aankomend\") {\n      const timeUnits = {};\n      timeUnits[timeunit] = 1;\n      return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n    if (modifier == \"afgelopen\" || modifier == \"vorig\") {\n      const timeUnits = {};\n      timeUnits[timeunit] = -1;\n      return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n    const components = context.createParsingComponents();\n    let date = dayjs(context.reference.instant);\n    if (unitWord.match(/week/i)) {\n      date = date.add(-date.get(\"d\"), \"d\");\n      components.imply(\"day\", date.date());\n      components.imply(\"month\", date.month() + 1);\n      components.imply(\"year\", date.year());\n    } else if (unitWord.match(/maand/i)) {\n      date = date.add(-date.date() + 1, \"d\");\n      components.imply(\"day\", date.date());\n      components.assign(\"year\", date.year());\n      components.assign(\"month\", date.month() + 1);\n    } else if (unitWord.match(/jaar/i)) {\n      date = date.add(-date.date() + 1, \"d\");\n      date = date.add(-date.month(), \"month\");\n      components.imply(\"day\", date.date());\n      components.imply(\"month\", date.month() + 1);\n      components.assign(\"year\", date.year());\n    }\n    return components;\n  }\n}","map":{"version":3,"names":["TIME_UNIT_DICTIONARY","ParsingComponents","dayjs","AbstractParserWithWordBoundaryChecking","matchAnyPattern","PATTERN","RegExp","MODIFIER_WORD_GROUP","RELATIVE_WORD_GROUP","NLRelativeDateFormatParser","innerPattern","innerExtract","context","match","modifier","toLowerCase","unitWord","timeunit","timeUnits","createRelativeFromReference","reference","components","createParsingComponents","date","instant","add","get","imply","month","year","assign"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/parsers/NLRelativeDateFormatParser.ts"],"sourcesContent":["import { TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nconst PATTERN = new RegExp(\n    `(dit|deze|(?:aan)?komend|volgend|afgelopen|vorig)e?\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})(?=\\\\s*)` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\n\nexport default class NLRelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n\n        if (modifier == \"volgend\" || modifier == \"komend\" || modifier == \"aankomend\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        if (modifier == \"afgelopen\" || modifier == \"vorig\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        const components = context.createParsingComponents();\n        let date = dayjs(context.reference.instant);\n\n        // This week\n        if (unitWord.match(/week/i)) {\n            date = date.add(-date.get(\"d\"), \"d\");\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.imply(\"year\", date.year());\n        }\n\n        // This month\n        else if (unitWord.match(/maand/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            components.imply(\"day\", date.date());\n            components.assign(\"year\", date.year());\n            components.assign(\"month\", date.month() + 1);\n        }\n\n        // This year\n        else if (unitWord.match(/jaar/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            date = date.add(-date.month(), \"month\");\n\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.assign(\"year\", date.year());\n        }\n\n        return components;\n    }\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,iBAAe;AAEpD,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,eAAe,QAAQ,2BAAyB;AAEzD,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,2DAA2DF,eAAe,CAACJ,oBAAoB,CAAC,WAAW,GACvG,WAAW,EACf,GAAG,CACN;AAED,MAAMO,mBAAmB,GAAG,CAAC;AAC7B,MAAMC,mBAAmB,GAAG,CAAC;AAE7B,eAAc,MAAOC,0BAA2B,SAAQN,sCAAsC;EAC1FO,YAAYA,CAAA;IACR,OAAOL,OAAO;EAClB;EAEAM,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,QAAQ,GAAGD,KAAK,CAACN,mBAAmB,CAAC,CAACQ,WAAW,EAAE;IACzD,MAAMC,QAAQ,GAAGH,KAAK,CAACL,mBAAmB,CAAC,CAACO,WAAW,EAAE;IACzD,MAAME,QAAQ,GAAGjB,oBAAoB,CAACgB,QAAQ,CAAC;IAE/C,IAAIF,QAAQ,IAAI,SAAS,IAAIA,QAAQ,IAAI,QAAQ,IAAIA,QAAQ,IAAI,WAAW,EAAE;MAC1E,MAAMI,SAAS,GAAG,EAAE;MACpBA,SAAS,CAACD,QAAQ,CAAC,GAAG,CAAC;MACvB,OAAOhB,iBAAiB,CAACkB,2BAA2B,CAACP,OAAO,CAACQ,SAAS,EAAEF,SAAS,CAAC;;IAGtF,IAAIJ,QAAQ,IAAI,WAAW,IAAIA,QAAQ,IAAI,OAAO,EAAE;MAChD,MAAMI,SAAS,GAAG,EAAE;MACpBA,SAAS,CAACD,QAAQ,CAAC,GAAG,CAAC,CAAC;MACxB,OAAOhB,iBAAiB,CAACkB,2BAA2B,CAACP,OAAO,CAACQ,SAAS,EAAEF,SAAS,CAAC;;IAGtF,MAAMG,UAAU,GAAGT,OAAO,CAACU,uBAAuB,EAAE;IACpD,IAAIC,IAAI,GAAGrB,KAAK,CAACU,OAAO,CAACQ,SAAS,CAACI,OAAO,CAAC;IAG3C,IAAIR,QAAQ,CAACH,KAAK,CAAC,OAAO,CAAC,EAAE;MACzBU,IAAI,GAAGA,IAAI,CAACE,GAAG,CAAC,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;MACpCL,UAAU,CAACM,KAAK,CAAC,KAAK,EAAEJ,IAAI,CAACA,IAAI,EAAE,CAAC;MACpCF,UAAU,CAACM,KAAK,CAAC,OAAO,EAAEJ,IAAI,CAACK,KAAK,EAAE,GAAG,CAAC,CAAC;MAC3CP,UAAU,CAACM,KAAK,CAAC,MAAM,EAAEJ,IAAI,CAACM,IAAI,EAAE,CAAC;KACxC,MAGI,IAAIb,QAAQ,CAACH,KAAK,CAAC,QAAQ,CAAC,EAAE;MAC/BU,IAAI,GAAGA,IAAI,CAACE,GAAG,CAAC,CAACF,IAAI,CAACA,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;MACtCF,UAAU,CAACM,KAAK,CAAC,KAAK,EAAEJ,IAAI,CAACA,IAAI,EAAE,CAAC;MACpCF,UAAU,CAACS,MAAM,CAAC,MAAM,EAAEP,IAAI,CAACM,IAAI,EAAE,CAAC;MACtCR,UAAU,CAACS,MAAM,CAAC,OAAO,EAAEP,IAAI,CAACK,KAAK,EAAE,GAAG,CAAC,CAAC;KAC/C,MAGI,IAAIZ,QAAQ,CAACH,KAAK,CAAC,OAAO,CAAC,EAAE;MAC9BU,IAAI,GAAGA,IAAI,CAACE,GAAG,CAAC,CAACF,IAAI,CAACA,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;MACtCA,IAAI,GAAGA,IAAI,CAACE,GAAG,CAAC,CAACF,IAAI,CAACK,KAAK,EAAE,EAAE,OAAO,CAAC;MAEvCP,UAAU,CAACM,KAAK,CAAC,KAAK,EAAEJ,IAAI,CAACA,IAAI,EAAE,CAAC;MACpCF,UAAU,CAACM,KAAK,CAAC,OAAO,EAAEJ,IAAI,CAACK,KAAK,EAAE,GAAG,CAAC,CAAC;MAC3CP,UAAU,CAACS,MAAM,CAAC,MAAM,EAAEP,IAAI,CAACM,IAAI,EAAE,CAAC;;IAG1C,OAAOR,UAAU;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}