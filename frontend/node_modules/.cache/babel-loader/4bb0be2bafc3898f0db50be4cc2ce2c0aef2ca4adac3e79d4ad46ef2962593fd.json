{"ast":null,"code":"import { MergingRefiner } from \"../abstractRefiners.js\";\nimport { mergeDateTimeResult } from \"../../calculation/mergingCalculation.js\";\nexport default class AbstractMergeDateTimeRefiner extends MergingRefiner {\n  shouldMergeResults(textBetween, currentResult, nextResult) {\n    return (currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime() || nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime()) && textBetween.match(this.patternBetween()) != null;\n  }\n  mergeResults(textBetween, currentResult, nextResult) {\n    const result = currentResult.start.isOnlyDate() ? mergeDateTimeResult(currentResult, nextResult) : mergeDateTimeResult(nextResult, currentResult);\n    result.index = currentResult.index;\n    result.text = currentResult.text + textBetween + nextResult.text;\n    return result;\n  }\n}","map":{"version":3,"names":["MergingRefiner","mergeDateTimeResult","AbstractMergeDateTimeRefiner","shouldMergeResults","textBetween","currentResult","nextResult","start","isOnlyDate","isOnlyTime","match","patternBetween","mergeResults","result","index","text"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/common/refiners/AbstractMergeDateTimeRefiner.ts"],"sourcesContent":["/*\n\n*/\n\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\nimport { mergeDateTimeResult } from \"../../calculation/mergingCalculation\";\n\nexport default abstract class AbstractMergeDateTimeRefiner extends MergingRefiner {\n    abstract patternBetween(): RegExp;\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        return (\n            ((currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime()) ||\n                (nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime())) &&\n            textBetween.match(this.patternBetween()) != null\n        );\n    }\n\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const result = currentResult.start.isOnlyDate()\n            ? mergeDateTimeResult(currentResult, nextResult)\n            : mergeDateTimeResult(nextResult, currentResult);\n\n        result.index = currentResult.index;\n        result.text = currentResult.text + textBetween + nextResult.text;\n        return result;\n    }\n}\n"],"mappings":"AAIA,SAASA,cAAc,QAAQ,wBAAsB;AAErD,SAASC,mBAAmB,QAAQ,yCAAuC;AAE3E,eAAc,MAAgBC,4BAA6B,SAAQF,cAAc;EAG7EG,kBAAkBA,CAACC,WAAmB,EAAEC,aAA4B,EAAEC,UAAyB;IAC3F,OACI,CAAED,aAAa,CAACE,KAAK,CAACC,UAAU,EAAE,IAAIF,UAAU,CAACC,KAAK,CAACE,UAAU,EAAE,IAC9DH,UAAU,CAACC,KAAK,CAACC,UAAU,EAAE,IAAIH,aAAa,CAACE,KAAK,CAACE,UAAU,EAAG,KACvEL,WAAW,CAACM,KAAK,CAAC,IAAI,CAACC,cAAc,EAAE,CAAC,IAAI,IAAI;EAExD;EAEAC,YAAYA,CAACR,WAAmB,EAAEC,aAA4B,EAAEC,UAAyB;IACrF,MAAMO,MAAM,GAAGR,aAAa,CAACE,KAAK,CAACC,UAAU,EAAE,GACzCP,mBAAmB,CAACI,aAAa,EAAEC,UAAU,CAAC,GAC9CL,mBAAmB,CAACK,UAAU,EAAED,aAAa,CAAC;IAEpDQ,MAAM,CAACC,KAAK,GAAGT,aAAa,CAACS,KAAK;IAClCD,MAAM,CAACE,IAAI,GAAGV,aAAa,CAACU,IAAI,GAAGX,WAAW,GAAGE,UAAU,CAACS,IAAI;IAChE,OAAOF,MAAM;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}