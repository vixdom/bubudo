{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport * as casualReferences from \"../../../common/casualReferences.js\";\nconst PATTERN = /(?:this)?\\s{0,3}(morning|afternoon|evening|night|midnight|midday|noon)(?=\\W|$)/i;\nexport default class ENCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    let component = null;\n    switch (match[1].toLowerCase()) {\n      case \"afternoon\":\n        component = casualReferences.afternoon(context.reference);\n        break;\n      case \"evening\":\n      case \"night\":\n        component = casualReferences.evening(context.reference);\n        break;\n      case \"midnight\":\n        component = casualReferences.midnight(context.reference);\n        break;\n      case \"morning\":\n        component = casualReferences.morning(context.reference);\n        break;\n      case \"noon\":\n      case \"midday\":\n        component = casualReferences.noon(context.reference);\n        break;\n    }\n    if (component) {\n      component.addTag(\"parser/ENCasualTimeParser\");\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","casualReferences","PATTERN","ENCasualTimeParser","innerPattern","innerExtract","context","match","component","toLowerCase","afternoon","reference","evening","midnight","morning","noon","addTag"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/en/parsers/ENCasualTimeParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport * as casualReferences from \"../../../common/casualReferences\";\n\nconst PATTERN = /(?:this)?\\s{0,3}(morning|afternoon|evening|night|midnight|midday|noon)(?=\\W|$)/i;\n\nexport default class ENCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        let component = null;\n        switch (match[1].toLowerCase()) {\n            case \"afternoon\":\n                component = casualReferences.afternoon(context.reference);\n                break;\n            case \"evening\":\n            case \"night\":\n                component = casualReferences.evening(context.reference);\n                break;\n            case \"midnight\":\n                component = casualReferences.midnight(context.reference);\n                break;\n            case \"morning\":\n                component = casualReferences.morning(context.reference);\n                break;\n            case \"noon\":\n            case \"midday\":\n                component = casualReferences.noon(context.reference);\n                break;\n        }\n        if (component) {\n            component.addTag(\"parser/ENCasualTimeParser\");\n        }\n        return component;\n    }\n}\n"],"mappings":"AACA,SAASA,sCAAsC,QAAQ,2DAAyD;AAChH,OAAO,KAAKC,gBAAgB,MAAM,qCAAmC;AAErE,MAAMC,OAAO,GAAG,iFAAiF;AAEjG,eAAc,MAAOC,kBAAmB,SAAQH,sCAAsC;EAClFI,YAAYA,CAAA;IACR,OAAOF,OAAO;EAClB;EACAG,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,IAAIC,SAAS,GAAG,IAAI;IACpB,QAAQD,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE;MAC1B,KAAK,WAAW;QACZD,SAAS,GAAGP,gBAAgB,CAACS,SAAS,CAACJ,OAAO,CAACK,SAAS,CAAC;QACzD;MACJ,KAAK,SAAS;MACd,KAAK,OAAO;QACRH,SAAS,GAAGP,gBAAgB,CAACW,OAAO,CAACN,OAAO,CAACK,SAAS,CAAC;QACvD;MACJ,KAAK,UAAU;QACXH,SAAS,GAAGP,gBAAgB,CAACY,QAAQ,CAACP,OAAO,CAACK,SAAS,CAAC;QACxD;MACJ,KAAK,SAAS;QACVH,SAAS,GAAGP,gBAAgB,CAACa,OAAO,CAACR,OAAO,CAACK,SAAS,CAAC;QACvD;MACJ,KAAK,MAAM;MACX,KAAK,QAAQ;QACTH,SAAS,GAAGP,gBAAgB,CAACc,IAAI,CAACT,OAAO,CAACK,SAAS,CAAC;QACpD;;IAER,IAAIH,SAAS,EAAE;MACXA,SAAS,CAACQ,MAAM,CAAC,2BAA2B,CAAC;;IAEjD,OAAOR,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}