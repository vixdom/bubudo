{"ast":null,"code":"// Helper function to parse estimated time strings into minutes\nexport function parseEstimatedTime(timeString){if(!timeString)return 0;// Remove approximate markers like '~'\nconst cleanedTime=timeString.replace('~','').trim();let totalMinutes=0;// Match patterns like \"X minutes\", \"Y hours\", \"X-Y hours/minutes\"\nconst hourMatch=cleanedTime.match(/(\\d+(\\.\\d+)?)-?(\\d+(\\.\\d+)?)?\\s+hours?/i);const minuteMatch=cleanedTime.match(/(\\d+)-?(\\d+)?\\s+minutes?/i);if(hourMatch){const lowerBound=parseFloat(hourMatch[1]);const upperBound=hourMatch[3]?parseFloat(hourMatch[3]):lowerBound;totalMinutes=(lowerBound+upperBound)/2*60;// Average if range\n}else if(minuteMatch){const lowerBound=parseInt(minuteMatch[1],10);const upperBound=minuteMatch[2]?parseInt(minuteMatch[2],10):lowerBound;totalMinutes=(lowerBound+upperBound)/2;// Average if range\n}return Math.round(totalMinutes);}// Helper function to format total minutes into a readable string\nexport function formatTotalTime(totalMinutes){if(totalMinutes===0)return'';// Don't display if no time estimated\nif(totalMinutes<60){return`~${totalMinutes} min`;}else{const hours=Math.floor(totalMinutes/60);const minutes=totalMinutes%60;if(minutes===0){return`~${hours} hr`;}else{// Simple rounding for display\nconst totalHours=Math.round(totalMinutes/60*10)/10;return`~${totalHours} hrs`;}}}// Helper function to format a Date object into a readable string\nexport function formatDate(date){if(!date)return'';return date.toLocaleDateString(undefined,{weekday:'short',year:'numeric',month:'short',day:'numeric'});}","map":{"version":3,"names":["parseEstimatedTime","timeString","cleanedTime","replace","trim","totalMinutes","hourMatch","match","minuteMatch","lowerBound","parseFloat","upperBound","parseInt","Math","round","formatTotalTime","hours","floor","minutes","totalHours","formatDate","date","toLocaleDateString","undefined","weekday","year","month","day"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/utils/timeUtils.ts"],"sourcesContent":["// Helper function to parse estimated time strings into minutes\nexport function parseEstimatedTime(timeString?: string): number {\n  if (!timeString) return 0;\n\n  // Remove approximate markers like '~'\n  const cleanedTime = timeString.replace('~', '').trim();\n\n  let totalMinutes = 0;\n\n  // Match patterns like \"X minutes\", \"Y hours\", \"X-Y hours/minutes\"\n  const hourMatch = cleanedTime.match(/(\\d+(\\.\\d+)?)-?(\\d+(\\.\\d+)?)?\\s+hours?/i);\n  const minuteMatch = cleanedTime.match(/(\\d+)-?(\\d+)?\\s+minutes?/i);\n\n  if (hourMatch) {\n    const lowerBound = parseFloat(hourMatch[1]);\n    const upperBound = hourMatch[3] ? parseFloat(hourMatch[3]) : lowerBound;\n    totalMinutes = ((lowerBound + upperBound) / 2) * 60; // Average if range\n  } else if (minuteMatch) {\n    const lowerBound = parseInt(minuteMatch[1], 10);\n    const upperBound = minuteMatch[2] ? parseInt(minuteMatch[2], 10) : lowerBound;\n    totalMinutes = (lowerBound + upperBound) / 2; // Average if range\n  }\n\n  return Math.round(totalMinutes);\n}\n\n// Helper function to format total minutes into a readable string\nexport function formatTotalTime(totalMinutes: number): string {\n  if (totalMinutes === 0) return ''; // Don't display if no time estimated\n  \n  if (totalMinutes < 60) {\n    return `~${totalMinutes} min`;\n  } else {\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    if (minutes === 0) {\n      return `~${hours} hr`;\n    } else {\n        // Simple rounding for display\n        const totalHours = Math.round((totalMinutes / 60) * 10) / 10; \n        return `~${totalHours} hrs`;\n    }\n  }\n}\n\n// Helper function to format a Date object into a readable string\nexport function formatDate(date: Date | null | undefined): string {\n  if (!date) return '';\n  return date.toLocaleDateString(undefined, { \n    weekday: 'short', \n    year: 'numeric', \n    month: 'short', \n    day: 'numeric' \n  });\n}\n"],"mappings":"AAAA;AACA,MAAO,SAAS,CAAAA,kBAAkBA,CAACC,UAAmB,CAAU,CAC9D,GAAI,CAACA,UAAU,CAAE,MAAO,EAAC,CAEzB;AACA,KAAM,CAAAC,WAAW,CAAGD,UAAU,CAACE,OAAO,CAAC,GAAG,CAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAEtD,GAAI,CAAAC,YAAY,CAAG,CAAC,CAEpB;AACA,KAAM,CAAAC,SAAS,CAAGJ,WAAW,CAACK,KAAK,CAAC,yCAAyC,CAAC,CAC9E,KAAM,CAAAC,WAAW,CAAGN,WAAW,CAACK,KAAK,CAAC,2BAA2B,CAAC,CAElE,GAAID,SAAS,CAAE,CACb,KAAM,CAAAG,UAAU,CAAGC,UAAU,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC,CAC3C,KAAM,CAAAK,UAAU,CAAGL,SAAS,CAAC,CAAC,CAAC,CAAGI,UAAU,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAGG,UAAU,CACvEJ,YAAY,CAAI,CAACI,UAAU,CAAGE,UAAU,EAAI,CAAC,CAAI,EAAE,CAAE;AACvD,CAAC,IAAM,IAAIH,WAAW,CAAE,CACtB,KAAM,CAAAC,UAAU,CAAGG,QAAQ,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,CAC/C,KAAM,CAAAG,UAAU,CAAGH,WAAW,CAAC,CAAC,CAAC,CAAGI,QAAQ,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,CAAGC,UAAU,CAC7EJ,YAAY,CAAG,CAACI,UAAU,CAAGE,UAAU,EAAI,CAAC,CAAE;AAChD,CAEA,MAAO,CAAAE,IAAI,CAACC,KAAK,CAACT,YAAY,CAAC,CACjC,CAEA;AACA,MAAO,SAAS,CAAAU,eAAeA,CAACV,YAAoB,CAAU,CAC5D,GAAIA,YAAY,GAAK,CAAC,CAAE,MAAO,EAAE,CAAE;AAEnC,GAAIA,YAAY,CAAG,EAAE,CAAE,CACrB,MAAO,IAAIA,YAAY,MAAM,CAC/B,CAAC,IAAM,CACL,KAAM,CAAAW,KAAK,CAAGH,IAAI,CAACI,KAAK,CAACZ,YAAY,CAAG,EAAE,CAAC,CAC3C,KAAM,CAAAa,OAAO,CAAGb,YAAY,CAAG,EAAE,CACjC,GAAIa,OAAO,GAAK,CAAC,CAAE,CACjB,MAAO,IAAIF,KAAK,KAAK,CACvB,CAAC,IAAM,CACH;AACA,KAAM,CAAAG,UAAU,CAAGN,IAAI,CAACC,KAAK,CAAET,YAAY,CAAG,EAAE,CAAI,EAAE,CAAC,CAAG,EAAE,CAC5D,MAAO,IAAIc,UAAU,MAAM,CAC/B,CACF,CACF,CAEA;AACA,MAAO,SAAS,CAAAC,UAAUA,CAACC,IAA6B,CAAU,CAChE,GAAI,CAACA,IAAI,CAAE,MAAO,EAAE,CACpB,MAAO,CAAAA,IAAI,CAACC,kBAAkB,CAACC,SAAS,CAAE,CACxCC,OAAO,CAAE,OAAO,CAChBC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,OAAO,CACdC,GAAG,CAAE,SACP,CAAC,CAAC,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}