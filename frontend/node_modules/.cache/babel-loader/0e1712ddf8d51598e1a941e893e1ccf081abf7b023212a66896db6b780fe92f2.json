{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Container,Typography,Box,Button,Snackbar,Alert,ThemeProvider,CssBaseline,Tabs,Tab}from'@mui/material';import TaskList from'./components/TaskList';import AddTaskForm from'./components/AddTaskForm';import AuthHeader from'./components/AuthHeader';import{fetchUserTasks,upsertUserTasks}from'./services/supabaseTasksService';import theme from'./theme';// App version: increment by 0.01 for each change\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const APP_VERSION='1.01';// Updated for My Rewards tab + versioning\nconst App=()=>{const[tasks,setTasks]=useState([]);const[promptSelection,setPromptSelection]=useState('A');const[user,setUser]=useState(null);const[mergeNotice,setMergeNotice]=useState(false);const[tab,setTab]=useState(0);// 0: My Tasks, 1: My Accomplishments\nconst handleTabChange=(_event,newValue)=>{setTab(newValue);};const incompleteTasks=tasks.filter(t=>!t.completed);const completedTasks=tasks.filter(t=>t.completed);// Load tasks from localStorage on initial mount (if not logged in)\nuseEffect(()=>{if(!user){try{const storedTasks=localStorage.getItem('tasks');if(storedTasks){const parsedTasks=JSON.parse(storedTasks);// Convert dueDate strings back to Date objects\nconst tasksWithDates=parsedTasks.map(task=>({...task,dueDate:task.dueDate?new Date(task.dueDate):null}));setTasks(tasksWithDates);console.log('Tasks loaded from localStorage');}}catch(error){console.error('Failed to load tasks from localStorage:',error);}}},[user]);// Only run when user changes\n// Save tasks to localStorage only if not logged in\nuseEffect(()=>{if(!user){try{// Convert Date objects to ISO strings before saving\nconst tasksToStore=tasks.map(task=>({...task,dueDate:task.dueDate?task.dueDate.toISOString():null}));localStorage.setItem('tasks',JSON.stringify(tasksToStore));}catch(error){console.error('Failed to save tasks to localStorage:',error);}}},[tasks,user]);// On login: sync/merge local tasks to Supabase, then clear local\nuseEffect(()=>{const doSync=async()=>{if(user&&user.id){// 1. Fetch cloud tasks\nlet cloudTasks=[];try{cloudTasks=await fetchUserTasks(user.id);}catch(err){console.error('Failed to fetch cloud tasks:',err);}// 2. Load local tasks\nlet localTasks=[];try{const stored=localStorage.getItem('tasks');if(stored){localTasks=JSON.parse(stored).map(task=>({...task,dueDate:task.dueDate?new Date(task.dueDate):null}));}}catch{}// 3. Merge: find local tasks not in cloud by ID\nconst cloudIds=new Set(cloudTasks.map(t=>t.id));const newLocalTasks=localTasks.filter(t=>!cloudIds.has(t.id));let mergedTasks=[...cloudTasks,...newLocalTasks];if(newLocalTasks.length>0){// 4. Upload merged tasks to Supabase\ntry{await upsertUserTasks(user.id,mergedTasks);setMergeNotice(true);}catch(err){console.error('Failed to upload merged tasks:',err);}}// 5. Clear local storage and use cloud\nlocalStorage.removeItem('tasks');setTasks(mergedTasks);}};doSync();// eslint-disable-next-line\n},[user]);// Updated to accept task data object\nconst addTask=async taskData=>{// Do not generate a fake id for Supabase\nconst newTaskForSupabase={...taskData,completed:false,subTasks:taskData.subTasks.map(st=>{var _st$completed;return{...st,completed:(_st$completed=st.completed)!==null&&_st$completed!==void 0?_st$completed:false};})};// Locally, temporarily assign a random id for optimistic UI (will be replaced on sync)\nconst tempId=Date.now().toString()+Math.random().toString(36).substring(2,9);const newTaskForLocal={...newTaskForSupabase,id:tempId};const updatedTasks=[...tasks,newTaskForLocal];setTasks(updatedTasks);if(user&&user.id){try{// upsertUserTasks should not send the temp id, so filter it out before sending\nconst tasksForSupabase=updatedTasks.map(_ref=>{let{id,...rest}=_ref;return rest;});await upsertUserTasks(user.id,tasksForSupabase);}catch(err){console.error('Failed to sync new task to Supabase:',err);}}};// Handler to toggle main task and its subtasks\nconst handleToggleTask=async taskId=>{const updated=tasks.map(task=>{if(task.id===taskId){const newCompletedStatus=!task.completed;return{...task,completed:newCompletedStatus,subTasks:task.subTasks.map(sub=>({...sub,completed:newCompletedStatus}))};}return task;});setTasks(updated);if(user&&user.id){try{await upsertUserTasks(user.id,updated);}catch(err){console.error('Failed to sync toggle to Supabase:',err);}}};// Handler to toggle a single subtask and update parent task if needed\nconst handleToggleSubTask=async(taskId,subTaskId)=>{const updated=tasks.map(task=>{if(task.id===taskId){let allSubTasksCompleted=true;const updatedSubTasks=task.subTasks.map(sub=>{if(sub.id===subTaskId){const newSubCompletedStatus=!sub.completed;if(!newSubCompletedStatus)allSubTasksCompleted=false;return{...sub,completed:newSubCompletedStatus};}else{if(!sub.completed)allSubTasksCompleted=false;}return sub;});return{...task,subTasks:updatedSubTasks,completed:allSubTasksCompleted};}return task;});setTasks(updated);if(user&&user.id){try{await upsertUserTasks(user.id,updated);}catch(err){console.error('Failed to sync subtask toggle to Supabase:',err);}}};// Function to toggle prompt\nconst togglePrompt=()=>{setPromptSelection(prev=>prev==='A'?'B':'A');};return/*#__PURE__*/_jsxs(ThemeProvider,{theme:theme,children:[/*#__PURE__*/_jsx(CssBaseline,{}),/*#__PURE__*/_jsx(AuthHeader,{onAuthChange:setUser}),/*#__PURE__*/_jsxs(Container,{maxWidth:\"md\",sx:{position:'relative'},children:[/*#__PURE__*/_jsx(Box,{sx:{position:'absolute',top:16,right:24,zIndex:10},children:/*#__PURE__*/_jsxs(Typography,{variant:\"caption\",color:\"text.secondary\",children:[\"v\",APP_VERSION]})}),/*#__PURE__*/_jsxs(Box,{sx:{my:4},children:[/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',mb:2},children:/*#__PURE__*/_jsxs(Button,{variant:\"outlined\",onClick:togglePrompt,children:[\"Using Prompt: \",promptSelection,\" (Click to Switch)\"]})}),/*#__PURE__*/_jsx(AddTaskForm,{onAddTask:addTask,currentPrompt:promptSelection,user:user}),/*#__PURE__*/_jsx(Box,{sx:{borderBottom:1,borderColor:'divider',mb:2},children:/*#__PURE__*/_jsxs(Tabs,{value:tab,onChange:handleTabChange,variant:\"fullWidth\",children:[/*#__PURE__*/_jsx(Tab,{label:\"My Tasks\"}),/*#__PURE__*/_jsx(Tab,{label:\"My Accomplishments\"}),/*#__PURE__*/_jsx(Tab,{label:\"My Rewards [coming soon]\"})]})}),tab===0&&/*#__PURE__*/_jsx(TaskList,{tasks:incompleteTasks,onToggleTask:handleToggleTask,onToggleSubTask:handleToggleSubTask,user:user}),tab===1&&/*#__PURE__*/_jsx(TaskList,{tasks:completedTasks,onToggleTask:handleToggleTask,onToggleSubTask:handleToggleSubTask,user:user}),tab===2&&/*#__PURE__*/_jsxs(Box,{sx:{p:4,textAlign:'center',color:'text.secondary'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,children:\"My Rewards\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",children:\"Rewards are coming soon! Stay tuned for future updates.\"})]})]})]}),/*#__PURE__*/_jsx(Snackbar,{open:mergeNotice,autoHideDuration:4000,onClose:()=>setMergeNotice(false),anchorOrigin:{vertical:'top',horizontal:'center'},children:/*#__PURE__*/_jsx(Alert,{onClose:()=>setMergeNotice(false),severity:\"success\",sx:{width:'100%'},children:\"Local tasks have been uploaded and merged with your account!\"})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Box","Button","Snackbar","Alert","ThemeProvider","CssBaseline","Tabs","Tab","TaskList","AddTaskForm","AuthHeader","fetchUserTasks","upsertUserTasks","theme","jsx","_jsx","jsxs","_jsxs","APP_VERSION","App","tasks","setTasks","promptSelection","setPromptSelection","user","setUser","mergeNotice","setMergeNotice","tab","setTab","handleTabChange","_event","newValue","incompleteTasks","filter","t","completed","completedTasks","storedTasks","localStorage","getItem","parsedTasks","JSON","parse","tasksWithDates","map","task","dueDate","Date","console","log","error","tasksToStore","toISOString","setItem","stringify","doSync","id","cloudTasks","err","localTasks","stored","cloudIds","Set","newLocalTasks","has","mergedTasks","length","removeItem","addTask","taskData","newTaskForSupabase","subTasks","st","_st$completed","tempId","now","toString","Math","random","substring","newTaskForLocal","updatedTasks","tasksForSupabase","_ref","rest","handleToggleTask","taskId","updated","newCompletedStatus","sub","handleToggleSubTask","subTaskId","allSubTasksCompleted","updatedSubTasks","newSubCompletedStatus","togglePrompt","prev","children","onAuthChange","maxWidth","sx","position","top","right","zIndex","variant","color","my","display","justifyContent","mb","onClick","onAddTask","currentPrompt","borderBottom","borderColor","value","onChange","label","onToggleTask","onToggleSubTask","p","textAlign","gutterBottom","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","width"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Typography, Box, Button, Snackbar, Alert, ThemeProvider, CssBaseline, Tabs, Tab } from '@mui/material';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\nimport AuthHeader from './components/AuthHeader';\nimport { TaskWithSubTasks, SubTask, PromptSelection } from './services/geminiService';\nimport { fetchUserTasks, upsertUserTasks } from './services/supabaseTasksService';\nimport theme from './theme';\n\n// App version: increment by 0.01 for each change\nconst APP_VERSION = '1.01'; // Updated for My Rewards tab + versioning\n\nexport interface Task { // Base Task interface (for potential future use without subtasks)\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState<TaskWithSubTasks[]>([]);\n  const [promptSelection, setPromptSelection] = useState<PromptSelection>('A');\n  const [user, setUser] = useState<any>(null);\n  const [mergeNotice, setMergeNotice] = useState(false);\n  const [tab, setTab] = useState(0); // 0: My Tasks, 1: My Accomplishments\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setTab(newValue);\n  };\n\n  const incompleteTasks = tasks.filter(t => !t.completed);\n  const completedTasks = tasks.filter(t => t.completed);\n\n  // Load tasks from localStorage on initial mount (if not logged in)\n  useEffect(() => {\n    if (!user) {\n      try {\n        const storedTasks = localStorage.getItem('tasks');\n        if (storedTasks) {\n          const parsedTasks: TaskWithSubTasks[] = JSON.parse(storedTasks);\n          // Convert dueDate strings back to Date objects\n          const tasksWithDates = parsedTasks.map(task => ({\n            ...task,\n            dueDate: task.dueDate ? new Date(task.dueDate) : null\n          }));\n          setTasks(tasksWithDates);\n          console.log('Tasks loaded from localStorage');\n        }\n      } catch (error) {\n        console.error('Failed to load tasks from localStorage:', error);\n      }\n    }\n  }, [user]); // Only run when user changes\n\n  // Save tasks to localStorage only if not logged in\n  useEffect(() => {\n    if (!user) {\n      try {\n        // Convert Date objects to ISO strings before saving\n        const tasksToStore = tasks.map(task => ({\n          ...task,\n          dueDate: task.dueDate ? task.dueDate.toISOString() : null\n        }));\n        localStorage.setItem('tasks', JSON.stringify(tasksToStore));\n      } catch (error) {\n        console.error('Failed to save tasks to localStorage:', error);\n      }\n    }\n  }, [tasks, user]);\n\n  // On login: sync/merge local tasks to Supabase, then clear local\n  useEffect(() => {\n    const doSync = async () => {\n      if (user && user.id) {\n        // 1. Fetch cloud tasks\n        let cloudTasks: TaskWithSubTasks[] = [];\n        try {\n          cloudTasks = await fetchUserTasks(user.id);\n        } catch (err) {\n          console.error('Failed to fetch cloud tasks:', err);\n        }\n        // 2. Load local tasks\n        let localTasks: TaskWithSubTasks[] = [];\n        try {\n          const stored = localStorage.getItem('tasks');\n          if (stored) {\n            localTasks = JSON.parse(stored).map((task: any) => ({\n              ...task,\n              dueDate: task.dueDate ? new Date(task.dueDate) : null\n            }));\n          }\n        } catch {}\n        // 3. Merge: find local tasks not in cloud by ID\n        const cloudIds = new Set(cloudTasks.map(t => t.id));\n        const newLocalTasks = localTasks.filter(t => !cloudIds.has(t.id));\n        let mergedTasks = [...cloudTasks, ...newLocalTasks];\n        if (newLocalTasks.length > 0) {\n          // 4. Upload merged tasks to Supabase\n          try {\n            await upsertUserTasks(user.id, mergedTasks);\n            setMergeNotice(true);\n          } catch (err) {\n            console.error('Failed to upload merged tasks:', err);\n          }\n        }\n        // 5. Clear local storage and use cloud\n        localStorage.removeItem('tasks');\n        setTasks(mergedTasks);\n      }\n    };\n    doSync();\n    // eslint-disable-next-line\n  }, [user]);\n\n  // Updated to accept task data object\n  const addTask = async (taskData: Omit<TaskWithSubTasks, 'id' | 'completed'>) => {\n    // Do not generate a fake id for Supabase\n    const newTaskForSupabase = {\n      ...taskData,\n      completed: false,\n      subTasks: taskData.subTasks.map(st => ({...st, completed: st.completed ?? false }))\n    };\n    // Locally, temporarily assign a random id for optimistic UI (will be replaced on sync)\n    const tempId = Date.now().toString() + Math.random().toString(36).substring(2, 9);\n    const newTaskForLocal: TaskWithSubTasks = {\n      ...newTaskForSupabase,\n      id: tempId,\n    };\n    const updatedTasks = [...tasks, newTaskForLocal];\n    setTasks(updatedTasks);\n    if (user && user.id) {\n      try {\n        // upsertUserTasks should not send the temp id, so filter it out before sending\n        const tasksForSupabase = updatedTasks.map(({id, ...rest}) => rest);\n        await upsertUserTasks(user.id, tasksForSupabase);\n      } catch (err) {\n        console.error('Failed to sync new task to Supabase:', err);\n      }\n    }\n  };\n\n  // Handler to toggle main task and its subtasks\n  const handleToggleTask = async (taskId: string) => {\n    const updated = tasks.map(task => {\n      if (task.id === taskId) {\n        const newCompletedStatus = !task.completed;\n        return {\n          ...task,\n          completed: newCompletedStatus,\n          subTasks: task.subTasks.map(sub => ({ ...sub, completed: newCompletedStatus }))\n        };\n      }\n      return task;\n    });\n    setTasks(updated);\n    if (user && user.id) {\n      try {\n        await upsertUserTasks(user.id, updated);\n      } catch (err) {\n        console.error('Failed to sync toggle to Supabase:', err);\n      }\n    }\n  };\n\n  // Handler to toggle a single subtask and update parent task if needed\n  const handleToggleSubTask = async (taskId: string, subTaskId: string | number) => {\n    const updated = tasks.map(task => {\n      if (task.id === taskId) {\n        let allSubTasksCompleted = true;\n        const updatedSubTasks = task.subTasks.map(sub => {\n          if (sub.id === subTaskId) {\n            const newSubCompletedStatus = !sub.completed;\n            if (!newSubCompletedStatus) allSubTasksCompleted = false;\n            return { ...sub, completed: newSubCompletedStatus };\n          } else {\n            if (!sub.completed) allSubTasksCompleted = false;\n          }\n          return sub;\n        });\n        return { ...task, subTasks: updatedSubTasks, completed: allSubTasksCompleted };\n      }\n      return task;\n    });\n    setTasks(updated);\n    if (user && user.id) {\n      try {\n        await upsertUserTasks(user.id, updated);\n      } catch (err) {\n        console.error('Failed to sync subtask toggle to Supabase:', err);\n      }\n    }\n  };\n\n  // Function to toggle prompt\n  const togglePrompt = () => {\n    setPromptSelection(prev => (prev === 'A' ? 'B' : 'A'));\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {/* Restore AuthHeader for Google login and user state sync */}\n      <AuthHeader onAuthChange={setUser} />\n      <Container maxWidth=\"md\" sx={{ position: 'relative' }}>\n        {/* Version number in top right */}\n        <Box sx={{ position: 'absolute', top: 16, right: 24, zIndex: 10 }}>\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            v{APP_VERSION}\n          </Typography>\n        </Box>\n        <Box sx={{ my: 4 }}>\n          {/* Prompt Toggle Button */}\n          <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>\n            <Button variant=\"outlined\" onClick={togglePrompt}>\n              Using Prompt: {promptSelection} (Click to Switch)\n            </Button>\n          </Box>\n\n          <AddTaskForm onAddTask={addTask} currentPrompt={promptSelection} user={user} />\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n            <Tabs value={tab} onChange={handleTabChange} variant=\"fullWidth\">\n              <Tab label=\"My Tasks\" />\n              <Tab label=\"My Accomplishments\" />\n              <Tab label=\"My Rewards [coming soon]\" />\n            </Tabs>\n          </Box>\n          {tab === 0 && (\n            <TaskList tasks={incompleteTasks} onToggleTask={handleToggleTask} onToggleSubTask={handleToggleSubTask} user={user} />\n          )}\n          {tab === 1 && (\n            <TaskList tasks={completedTasks} onToggleTask={handleToggleTask} onToggleSubTask={handleToggleSubTask} user={user} />\n          )}\n          {tab === 2 && (\n            <Box sx={{ p: 4, textAlign: 'center', color: 'text.secondary' }}>\n              <Typography variant=\"h5\" gutterBottom>\n                My Rewards\n              </Typography>\n              <Typography variant=\"body1\">\n                Rewards are coming soon! Stay tuned for future updates.\n              </Typography>\n            </Box>\n          )}\n        </Box>\n      </Container>\n      <Snackbar open={mergeNotice} autoHideDuration={4000} onClose={() => setMergeNotice(false)} anchorOrigin={{vertical:'top',horizontal:'center'}}>\n        <Alert onClose={() => setMergeNotice(false)} severity=\"success\" sx={{ width: '100%' }}>\n          Local tasks have been uploaded and merged with your account!\n        </Alert>\n      </Snackbar>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}