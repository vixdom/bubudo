{"ast":null,"code":"import dayjs from \"dayjs\";\nexport function findMostLikelyADYear(yearNumber) {\n  if (yearNumber < 100) {\n    if (yearNumber > 50) {\n      yearNumber = yearNumber + 1900;\n    } else {\n      yearNumber = yearNumber + 2000;\n    }\n  }\n  return yearNumber;\n}\nexport function findYearClosestToRef(refDate, day, month) {\n  const refMoment = dayjs(refDate);\n  let dateMoment = refMoment;\n  dateMoment = dateMoment.month(month - 1);\n  dateMoment = dateMoment.date(day);\n  dateMoment = dateMoment.year(refMoment.year());\n  const nextYear = dateMoment.add(1, \"y\");\n  const lastYear = dateMoment.add(-1, \"y\");\n  if (Math.abs(nextYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n    dateMoment = nextYear;\n  } else if (Math.abs(lastYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n    dateMoment = lastYear;\n  }\n  return dateMoment.year();\n}","map":{"version":3,"names":["dayjs","findMostLikelyADYear","yearNumber","findYearClosestToRef","refDate","day","month","refMoment","dateMoment","date","year","nextYear","add","lastYear","Math","abs","diff"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/calculation/years.ts"],"sourcesContent":["import dayjs from \"dayjs\";\n\n/**\n * Find the most likely year, from a raw number. For example:\n * 1997 => 1997\n * 97 => 1997\n * 12 => 2012\n */\nexport function findMostLikelyADYear(yearNumber: number): number {\n    if (yearNumber < 100) {\n        if (yearNumber > 50) {\n            yearNumber = yearNumber + 1900;\n        } else {\n            yearNumber = yearNumber + 2000;\n        }\n    }\n\n    return yearNumber;\n}\n\nexport function findYearClosestToRef(refDate: Date, day: number, month: number): number {\n    //Find the most appropriated year\n    const refMoment = dayjs(refDate);\n    let dateMoment = refMoment;\n    dateMoment = dateMoment.month(month - 1);\n    dateMoment = dateMoment.date(day);\n    dateMoment = dateMoment.year(refMoment.year());\n\n    const nextYear = dateMoment.add(1, \"y\");\n    const lastYear = dateMoment.add(-1, \"y\");\n    if (Math.abs(nextYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n        dateMoment = nextYear;\n    } else if (Math.abs(lastYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n        dateMoment = lastYear;\n    }\n\n    return dateMoment.year();\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAQzB,OAAM,SAAUC,oBAAoBA,CAACC,UAAkB;EACnD,IAAIA,UAAU,GAAG,GAAG,EAAE;IAClB,IAAIA,UAAU,GAAG,EAAE,EAAE;MACjBA,UAAU,GAAGA,UAAU,GAAG,IAAI;KACjC,MAAM;MACHA,UAAU,GAAGA,UAAU,GAAG,IAAI;;;EAItC,OAAOA,UAAU;AACrB;AAEA,OAAM,SAAUC,oBAAoBA,CAACC,OAAa,EAAEC,GAAW,EAAEC,KAAa;EAE1E,MAAMC,SAAS,GAAGP,KAAK,CAACI,OAAO,CAAC;EAChC,IAAII,UAAU,GAAGD,SAAS;EAC1BC,UAAU,GAAGA,UAAU,CAACF,KAAK,CAACA,KAAK,GAAG,CAAC,CAAC;EACxCE,UAAU,GAAGA,UAAU,CAACC,IAAI,CAACJ,GAAG,CAAC;EACjCG,UAAU,GAAGA,UAAU,CAACE,IAAI,CAACH,SAAS,CAACG,IAAI,EAAE,CAAC;EAE9C,MAAMC,QAAQ,GAAGH,UAAU,CAACI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;EACvC,MAAMC,QAAQ,GAAGL,UAAU,CAACI,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;EACxC,IAAIE,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAACK,IAAI,CAACT,SAAS,CAAC,CAAC,GAAGO,IAAI,CAACC,GAAG,CAACP,UAAU,CAACQ,IAAI,CAACT,SAAS,CAAC,CAAC,EAAE;IAC3EC,UAAU,GAAGG,QAAQ;GACxB,MAAM,IAAIG,IAAI,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAACT,SAAS,CAAC,CAAC,GAAGO,IAAI,CAACC,GAAG,CAACP,UAAU,CAACQ,IAAI,CAACT,SAAS,CAAC,CAAC,EAAE;IAClFC,UAAU,GAAGK,QAAQ;;EAGzB,OAAOL,UAAU,CAACE,IAAI,EAAE;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}