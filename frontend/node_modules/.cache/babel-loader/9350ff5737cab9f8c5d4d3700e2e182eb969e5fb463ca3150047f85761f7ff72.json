{"ast":null,"code":"import dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary.js\";\nconst NOW_GROUP = 1;\nconst DAY_GROUP_1 = 2;\nconst TIME_GROUP_1 = 3;\nconst TIME_GROUP_2 = 4;\nconst DAY_GROUP_3 = 5;\nconst TIME_GROUP_3 = 6;\nexport default class ZHHansCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern(context) {\n    return new RegExp(\"(现在|立(?:刻|即)|即刻)|\" + \"(今|明|前|大前|后|大后|昨)(早|晚)|\" + \"(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|\" + \"(今|明|前|大前|后|大后|昨)(?:日|天)\" + \"(?:[\\\\s|,|，]*)\" + \"(?:(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?\", \"i\");\n  }\n  innerExtract(context, match) {\n    const index = match.index;\n    const result = context.createParsingResult(index, match[0]);\n    const refMoment = dayjs(context.refDate);\n    let startMoment = refMoment;\n    if (match[NOW_GROUP]) {\n      result.start.imply(\"hour\", refMoment.hour());\n      result.start.imply(\"minute\", refMoment.minute());\n      result.start.imply(\"second\", refMoment.second());\n      result.start.imply(\"millisecond\", refMoment.millisecond());\n    } else if (match[DAY_GROUP_1]) {\n      const day1 = match[DAY_GROUP_1];\n      const time1 = match[TIME_GROUP_1];\n      if (day1 == \"明\") {\n        if (refMoment.hour() > 1) {\n          startMoment = startMoment.add(1, \"day\");\n        }\n      } else if (day1 == \"昨\") {\n        startMoment = startMoment.add(-1, \"day\");\n      } else if (day1 == \"前\") {\n        startMoment = startMoment.add(-2, \"day\");\n      } else if (day1 == \"大前\") {\n        startMoment = startMoment.add(-3, \"day\");\n      } else if (day1 == \"后\") {\n        startMoment = startMoment.add(2, \"day\");\n      } else if (day1 == \"大后\") {\n        startMoment = startMoment.add(3, \"day\");\n      }\n      if (time1 == \"早\") {\n        result.start.imply(\"hour\", 6);\n      } else if (time1 == \"晚\") {\n        result.start.imply(\"hour\", 22);\n        result.start.imply(\"meridiem\", 1);\n      }\n    } else if (match[TIME_GROUP_2]) {\n      const timeString2 = match[TIME_GROUP_2];\n      const time2 = timeString2[0];\n      if (time2 == \"早\" || time2 == \"上\") {\n        result.start.imply(\"hour\", 6);\n      } else if (time2 == \"下\") {\n        result.start.imply(\"hour\", 15);\n        result.start.imply(\"meridiem\", 1);\n      } else if (time2 == \"中\") {\n        result.start.imply(\"hour\", 12);\n        result.start.imply(\"meridiem\", 1);\n      } else if (time2 == \"夜\" || time2 == \"晚\") {\n        result.start.imply(\"hour\", 22);\n        result.start.imply(\"meridiem\", 1);\n      } else if (time2 == \"凌\") {\n        result.start.imply(\"hour\", 0);\n      }\n    } else if (match[DAY_GROUP_3]) {\n      const day3 = match[DAY_GROUP_3];\n      if (day3 == \"明\") {\n        if (refMoment.hour() > 1) {\n          startMoment = startMoment.add(1, \"day\");\n        }\n      } else if (day3 == \"昨\") {\n        startMoment = startMoment.add(-1, \"day\");\n      } else if (day3 == \"前\") {\n        startMoment = startMoment.add(-2, \"day\");\n      } else if (day3 == \"大前\") {\n        startMoment = startMoment.add(-3, \"day\");\n      } else if (day3 == \"后\") {\n        startMoment = startMoment.add(2, \"day\");\n      } else if (day3 == \"大后\") {\n        startMoment = startMoment.add(3, \"day\");\n      }\n      const timeString3 = match[TIME_GROUP_3];\n      if (timeString3) {\n        const time3 = timeString3[0];\n        if (time3 == \"早\" || time3 == \"上\") {\n          result.start.imply(\"hour\", 6);\n        } else if (time3 == \"下\") {\n          result.start.imply(\"hour\", 15);\n          result.start.imply(\"meridiem\", 1);\n        } else if (time3 == \"中\") {\n          result.start.imply(\"hour\", 12);\n          result.start.imply(\"meridiem\", 1);\n        } else if (time3 == \"夜\" || time3 == \"晚\") {\n          result.start.imply(\"hour\", 22);\n          result.start.imply(\"meridiem\", 1);\n        } else if (time3 == \"凌\") {\n          result.start.imply(\"hour\", 0);\n        }\n      }\n    }\n    result.start.assign(\"day\", startMoment.date());\n    result.start.assign(\"month\", startMoment.month() + 1);\n    result.start.assign(\"year\", startMoment.year());\n    return result;\n  }\n}","map":{"version":3,"names":["dayjs","AbstractParserWithWordBoundaryChecking","NOW_GROUP","DAY_GROUP_1","TIME_GROUP_1","TIME_GROUP_2","DAY_GROUP_3","TIME_GROUP_3","ZHHansCasualDateParser","innerPattern","context","RegExp","innerExtract","match","index","result","createParsingResult","refMoment","refDate","startMoment","start","imply","hour","minute","second","millisecond","day1","time1","add","timeString2","time2","day3","timeString3","time3","assign","date","month","year"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/zh/hans/parsers/ZHHansCasualDateParser.ts"],"sourcesContent":["import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingComponents, ParsingResult } from \"../../../../results\";\n\nconst NOW_GROUP = 1;\nconst DAY_GROUP_1 = 2;\nconst TIME_GROUP_1 = 3;\nconst TIME_GROUP_2 = 4;\nconst DAY_GROUP_3 = 5;\nconst TIME_GROUP_3 = 6;\n\nexport default class ZHHansCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return new RegExp(\n            \"(现在|立(?:刻|即)|即刻)|\" +\n                \"(今|明|前|大前|后|大后|昨)(早|晚)|\" +\n                \"(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|\" +\n                \"(今|明|前|大前|后|大后|昨)(?:日|天)\" +\n                \"(?:[\\\\s|,|，]*)\" +\n                \"(?:(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?\",\n            \"i\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const index = match.index;\n        const result = context.createParsingResult(index, match[0]);\n\n        const refMoment = dayjs(context.refDate);\n        let startMoment = refMoment;\n\n        if (match[NOW_GROUP]) {\n            result.start.imply(\"hour\", refMoment.hour());\n            result.start.imply(\"minute\", refMoment.minute());\n            result.start.imply(\"second\", refMoment.second());\n            result.start.imply(\"millisecond\", refMoment.millisecond());\n        } else if (match[DAY_GROUP_1]) {\n            const day1 = match[DAY_GROUP_1];\n            const time1 = match[TIME_GROUP_1];\n\n            if (day1 == \"明\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    startMoment = startMoment.add(1, \"day\");\n                }\n            } else if (day1 == \"昨\") {\n                startMoment = startMoment.add(-1, \"day\");\n            } else if (day1 == \"前\") {\n                startMoment = startMoment.add(-2, \"day\");\n            } else if (day1 == \"大前\") {\n                startMoment = startMoment.add(-3, \"day\");\n            } else if (day1 == \"后\") {\n                startMoment = startMoment.add(2, \"day\");\n            } else if (day1 == \"大后\") {\n                startMoment = startMoment.add(3, \"day\");\n            }\n\n            if (time1 == \"早\") {\n                result.start.imply(\"hour\", 6);\n            } else if (time1 == \"晚\") {\n                result.start.imply(\"hour\", 22);\n                result.start.imply(\"meridiem\", 1);\n            }\n        } else if (match[TIME_GROUP_2]) {\n            const timeString2 = match[TIME_GROUP_2];\n            const time2 = timeString2[0];\n            if (time2 == \"早\" || time2 == \"上\") {\n                result.start.imply(\"hour\", 6);\n            } else if (time2 == \"下\") {\n                result.start.imply(\"hour\", 15);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"中\") {\n                result.start.imply(\"hour\", 12);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"夜\" || time2 == \"晚\") {\n                result.start.imply(\"hour\", 22);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"凌\") {\n                result.start.imply(\"hour\", 0);\n            }\n        } else if (match[DAY_GROUP_3]) {\n            const day3 = match[DAY_GROUP_3];\n\n            if (day3 == \"明\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    startMoment = startMoment.add(1, \"day\");\n                }\n            } else if (day3 == \"昨\") {\n                startMoment = startMoment.add(-1, \"day\");\n            } else if (day3 == \"前\") {\n                startMoment = startMoment.add(-2, \"day\");\n            } else if (day3 == \"大前\") {\n                startMoment = startMoment.add(-3, \"day\");\n            } else if (day3 == \"后\") {\n                startMoment = startMoment.add(2, \"day\");\n            } else if (day3 == \"大后\") {\n                startMoment = startMoment.add(3, \"day\");\n            }\n\n            const timeString3 = match[TIME_GROUP_3];\n            if (timeString3) {\n                const time3 = timeString3[0];\n                if (time3 == \"早\" || time3 == \"上\") {\n                    result.start.imply(\"hour\", 6);\n                } else if (time3 == \"下\") {\n                    result.start.imply(\"hour\", 15);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"中\") {\n                    result.start.imply(\"hour\", 12);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"夜\" || time3 == \"晚\") {\n                    result.start.imply(\"hour\", 22);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"凌\") {\n                    result.start.imply(\"hour\", 0);\n                }\n            }\n        }\n\n        result.start.assign(\"day\", startMoment.date());\n        result.start.assign(\"month\", startMoment.month() + 1);\n        result.start.assign(\"year\", startMoment.year());\n\n        return result;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}