{"ast":null,"code":"import * as references from \"../../../common/casualReferences.js\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking.js\";\nexport default class RUCasualDateParser extends AbstractParserWithLeftRightBoundaryChecking {\n  innerPatternString(context) {\n    return `(?:с|со)?\\\\s*(сегодня|вчера|завтра|послезавтра|послепослезавтра|позапозавчера|позавчера)`;\n  }\n  innerExtract(context, match) {\n    const lowerText = match[1].toLowerCase();\n    const component = context.createParsingComponents();\n    switch (lowerText) {\n      case \"сегодня\":\n        return references.today(context.reference);\n      case \"вчера\":\n        return references.yesterday(context.reference);\n      case \"завтра\":\n        return references.tomorrow(context.reference);\n      case \"послезавтра\":\n        return references.theDayAfter(context.reference, 2);\n      case \"послепослезавтра\":\n        return references.theDayAfter(context.reference, 3);\n      case \"позавчера\":\n        return references.theDayBefore(context.reference, 2);\n      case \"позапозавчера\":\n        return references.theDayBefore(context.reference, 3);\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["references","AbstractParserWithLeftRightBoundaryChecking","RUCasualDateParser","innerPatternString","context","innerExtract","match","lowerText","toLowerCase","component","createParsingComponents","today","reference","yesterday","tomorrow","theDayAfter","theDayBefore"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ru/parsers/RUCasualDateParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport * as references from \"../../../common/casualReferences\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking\";\n\nexport default class RUCasualDateParser extends AbstractParserWithLeftRightBoundaryChecking {\n    innerPatternString(context: ParsingContext): string {\n        return `(?:с|со)?\\\\s*(сегодня|вчера|завтра|послезавтра|послепослезавтра|позапозавчера|позавчера)`;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const lowerText = match[1].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"сегодня\":\n                return references.today(context.reference);\n\n            case \"вчера\":\n                return references.yesterday(context.reference);\n\n            case \"завтра\":\n                return references.tomorrow(context.reference);\n\n            case \"послезавтра\":\n                return references.theDayAfter(context.reference, 2);\n\n            case \"послепослезавтра\":\n                return references.theDayAfter(context.reference, 3);\n\n            case \"позавчера\":\n                return references.theDayBefore(context.reference, 2);\n\n            case \"позапозавчера\":\n                return references.theDayBefore(context.reference, 3);\n        }\n\n        return component;\n    }\n}\n"],"mappings":"AAEA,OAAO,KAAKA,UAAU,MAAM,qCAAmC;AAC/D,SAASC,2CAA2C,QAAQ,6CAA2C;AAEvG,eAAc,MAAOC,kBAAmB,SAAQD,2CAA2C;EACvFE,kBAAkBA,CAACC,OAAuB;IACtC,OAAO,0FAA0F;EACrG;EAEAC,YAAYA,CAACD,OAAuB,EAAEE,KAAuB;IACzD,MAAMC,SAAS,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE;IACxC,MAAMC,SAAS,GAAGL,OAAO,CAACM,uBAAuB,EAAE;IAEnD,QAAQH,SAAS;MACb,KAAK,SAAS;QACV,OAAOP,UAAU,CAACW,KAAK,CAACP,OAAO,CAACQ,SAAS,CAAC;MAE9C,KAAK,OAAO;QACR,OAAOZ,UAAU,CAACa,SAAS,CAACT,OAAO,CAACQ,SAAS,CAAC;MAElD,KAAK,QAAQ;QACT,OAAOZ,UAAU,CAACc,QAAQ,CAACV,OAAO,CAACQ,SAAS,CAAC;MAEjD,KAAK,aAAa;QACd,OAAOZ,UAAU,CAACe,WAAW,CAACX,OAAO,CAACQ,SAAS,EAAE,CAAC,CAAC;MAEvD,KAAK,kBAAkB;QACnB,OAAOZ,UAAU,CAACe,WAAW,CAACX,OAAO,CAACQ,SAAS,EAAE,CAAC,CAAC;MAEvD,KAAK,WAAW;QACZ,OAAOZ,UAAU,CAACgB,YAAY,CAACZ,OAAO,CAACQ,SAAS,EAAE,CAAC,CAAC;MAExD,KAAK,eAAe;QAChB,OAAOZ,UAAU,CAACgB,YAAY,CAACZ,OAAO,CAACQ,SAAS,EAAE,CAAC,CAAC;;IAG5D,OAAOH,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}