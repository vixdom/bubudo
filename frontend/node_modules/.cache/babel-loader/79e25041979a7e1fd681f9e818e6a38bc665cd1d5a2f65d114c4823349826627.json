{"ast":null,"code":"import ENTimeUnitWithinFormatParser from \"./parsers/ENTimeUnitWithinFormatParser.js\";\nimport ENMonthNameLittleEndianParser from \"./parsers/ENMonthNameLittleEndianParser.js\";\nimport ENMonthNameMiddleEndianParser from \"./parsers/ENMonthNameMiddleEndianParser.js\";\nimport ENMonthNameParser from \"./parsers/ENMonthNameParser.js\";\nimport ENYearMonthDayParser from \"./parsers/ENYearMonthDayParser.js\";\nimport ENSlashMonthFormatParser from \"./parsers/ENSlashMonthFormatParser.js\";\nimport ENTimeExpressionParser from \"./parsers/ENTimeExpressionParser.js\";\nimport ENTimeUnitAgoFormatParser from \"./parsers/ENTimeUnitAgoFormatParser.js\";\nimport ENTimeUnitLaterFormatParser from \"./parsers/ENTimeUnitLaterFormatParser.js\";\nimport ENMergeDateRangeRefiner from \"./refiners/ENMergeDateRangeRefiner.js\";\nimport ENMergeDateTimeRefiner from \"./refiners/ENMergeDateTimeRefiner.js\";\nimport { includeCommonConfiguration } from \"../../configurations.js\";\nimport ENCasualDateParser from \"./parsers/ENCasualDateParser.js\";\nimport ENCasualTimeParser from \"./parsers/ENCasualTimeParser.js\";\nimport ENWeekdayParser from \"./parsers/ENWeekdayParser.js\";\nimport ENRelativeDateFormatParser from \"./parsers/ENRelativeDateFormatParser.js\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser.js\";\nimport ENTimeUnitCasualRelativeFormatParser from \"./parsers/ENTimeUnitCasualRelativeFormatParser.js\";\nimport ENMergeRelativeAfterDateRefiner from \"./refiners/ENMergeRelativeAfterDateRefiner.js\";\nimport ENMergeRelativeFollowByDateRefiner from \"./refiners/ENMergeRelativeFollowByDateRefiner.js\";\nimport OverlapRemovalRefiner from \"../../common/refiners/OverlapRemovalRefiner.js\";\nimport ENExtractYearSuffixRefiner from \"./refiners/ENExtractYearSuffixRefiner.js\";\nimport ENUnlikelyFormatFilter from \"./refiners/ENUnlikelyFormatFilter.js\";\nexport default class ENDefaultConfiguration {\n  createCasualConfiguration() {\n    let littleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const option = this.createConfiguration(false, littleEndian);\n    option.parsers.push(new ENCasualDateParser());\n    option.parsers.push(new ENCasualTimeParser());\n    option.parsers.push(new ENMonthNameParser());\n    option.parsers.push(new ENRelativeDateFormatParser());\n    option.parsers.push(new ENTimeUnitCasualRelativeFormatParser());\n    option.refiners.push(new ENUnlikelyFormatFilter());\n    return option;\n  }\n  createConfiguration() {\n    let strictMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const options = includeCommonConfiguration({\n      parsers: [new SlashDateFormatParser(littleEndian), new ENTimeUnitWithinFormatParser(strictMode), new ENMonthNameLittleEndianParser(), new ENMonthNameMiddleEndianParser(littleEndian), new ENWeekdayParser(), new ENSlashMonthFormatParser(), new ENTimeExpressionParser(strictMode), new ENTimeUnitAgoFormatParser(strictMode), new ENTimeUnitLaterFormatParser(strictMode)],\n      refiners: [new ENMergeDateTimeRefiner()]\n    }, strictMode);\n    options.parsers.unshift(new ENYearMonthDayParser(strictMode));\n    options.refiners.unshift(new ENMergeRelativeFollowByDateRefiner());\n    options.refiners.unshift(new ENMergeRelativeAfterDateRefiner());\n    options.refiners.unshift(new OverlapRemovalRefiner());\n    options.refiners.push(new ENMergeDateTimeRefiner());\n    options.refiners.push(new ENExtractYearSuffixRefiner());\n    options.refiners.push(new ENMergeDateRangeRefiner());\n    return options;\n  }\n}","map":{"version":3,"names":["ENTimeUnitWithinFormatParser","ENMonthNameLittleEndianParser","ENMonthNameMiddleEndianParser","ENMonthNameParser","ENYearMonthDayParser","ENSlashMonthFormatParser","ENTimeExpressionParser","ENTimeUnitAgoFormatParser","ENTimeUnitLaterFormatParser","ENMergeDateRangeRefiner","ENMergeDateTimeRefiner","includeCommonConfiguration","ENCasualDateParser","ENCasualTimeParser","ENWeekdayParser","ENRelativeDateFormatParser","SlashDateFormatParser","ENTimeUnitCasualRelativeFormatParser","ENMergeRelativeAfterDateRefiner","ENMergeRelativeFollowByDateRefiner","OverlapRemovalRefiner","ENExtractYearSuffixRefiner","ENUnlikelyFormatFilter","ENDefaultConfiguration","createCasualConfiguration","littleEndian","arguments","length","undefined","option","createConfiguration","parsers","push","refiners","strictMode","options","unshift"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/en/configuration.ts"],"sourcesContent":["import { Configuration } from \"../../chrono\";\n\nimport ENTimeUnitWithinFormatParser from \"./parsers/ENTimeUnitWithinFormatParser\";\nimport ENMonthNameLittleEndianParser from \"./parsers/ENMonthNameLittleEndianParser\";\nimport ENMonthNameMiddleEndianParser from \"./parsers/ENMonthNameMiddleEndianParser\";\nimport ENMonthNameParser from \"./parsers/ENMonthNameParser\";\nimport ENYearMonthDayParser from \"./parsers/ENYearMonthDayParser\";\nimport ENSlashMonthFormatParser from \"./parsers/ENSlashMonthFormatParser\";\nimport ENTimeExpressionParser from \"./parsers/ENTimeExpressionParser\";\nimport ENTimeUnitAgoFormatParser from \"./parsers/ENTimeUnitAgoFormatParser\";\nimport ENTimeUnitLaterFormatParser from \"./parsers/ENTimeUnitLaterFormatParser\";\nimport ENMergeDateRangeRefiner from \"./refiners/ENMergeDateRangeRefiner\";\nimport ENMergeDateTimeRefiner from \"./refiners/ENMergeDateTimeRefiner\";\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport ENCasualDateParser from \"./parsers/ENCasualDateParser\";\nimport ENCasualTimeParser from \"./parsers/ENCasualTimeParser\";\nimport ENWeekdayParser from \"./parsers/ENWeekdayParser\";\nimport ENRelativeDateFormatParser from \"./parsers/ENRelativeDateFormatParser\";\n\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ENTimeUnitCasualRelativeFormatParser from \"./parsers/ENTimeUnitCasualRelativeFormatParser\";\nimport ENMergeRelativeAfterDateRefiner from \"./refiners/ENMergeRelativeAfterDateRefiner\";\nimport ENMergeRelativeFollowByDateRefiner from \"./refiners/ENMergeRelativeFollowByDateRefiner\";\nimport OverlapRemovalRefiner from \"../../common/refiners/OverlapRemovalRefiner\";\nimport ENExtractYearSuffixRefiner from \"./refiners/ENExtractYearSuffixRefiner\";\nimport ENUnlikelyFormatFilter from \"./refiners/ENUnlikelyFormatFilter\";\n\nexport default class ENDefaultConfiguration {\n    /**\n     * Create a default *casual* {@Link Configuration} for English chrono.\n     * It calls {@Link createConfiguration} and includes additional parsers.\n     */\n    createCasualConfiguration(littleEndian = false): Configuration {\n        const option = this.createConfiguration(false, littleEndian);\n        option.parsers.push(new ENCasualDateParser());\n        option.parsers.push(new ENCasualTimeParser());\n        option.parsers.push(new ENMonthNameParser());\n        option.parsers.push(new ENRelativeDateFormatParser());\n        option.parsers.push(new ENTimeUnitCasualRelativeFormatParser());\n        option.refiners.push(new ENUnlikelyFormatFilter());\n        return option;\n    }\n\n    /**\n     * Create a default {@Link Configuration} for English chrono\n     *\n     * @param strictMode If the timeunit mentioning should be strict, not casual\n     * @param littleEndian If format should be date-first/littleEndian (e.g. en_UK), not month-first/middleEndian (e.g. en_US)\n     */\n    createConfiguration(strictMode = true, littleEndian = false): Configuration {\n        const options = includeCommonConfiguration(\n            {\n                parsers: [\n                    new SlashDateFormatParser(littleEndian),\n                    new ENTimeUnitWithinFormatParser(strictMode),\n                    new ENMonthNameLittleEndianParser(),\n                    new ENMonthNameMiddleEndianParser(/*shouldSkipYearLikeDate=*/ littleEndian),\n                    new ENWeekdayParser(),\n                    new ENSlashMonthFormatParser(),\n                    new ENTimeExpressionParser(strictMode),\n                    new ENTimeUnitAgoFormatParser(strictMode),\n                    new ENTimeUnitLaterFormatParser(strictMode),\n                ],\n                refiners: [new ENMergeDateTimeRefiner()],\n            },\n            strictMode\n        );\n        options.parsers.unshift(new ENYearMonthDayParser(/*strictMonthDateOrder=*/ strictMode));\n\n        // These relative-dates consideration should be done before other common refiners.\n        options.refiners.unshift(new ENMergeRelativeFollowByDateRefiner());\n        options.refiners.unshift(new ENMergeRelativeAfterDateRefiner());\n        options.refiners.unshift(new OverlapRemovalRefiner());\n\n        // Re-apply the date time refiner again after the timezone refinement and exclusion in common refiners.\n        options.refiners.push(new ENMergeDateTimeRefiner());\n\n        // Extract year after merging date and time\n        options.refiners.push(new ENExtractYearSuffixRefiner());\n\n        // Keep the date range refiner at the end (after all other refinements).\n        options.refiners.push(new ENMergeDateRangeRefiner());\n        return options;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}