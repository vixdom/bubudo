{"ast":null,"code":"import { MergingRefiner } from \"../abstractRefiners.js\";\nexport default class MergeWeekdayComponentRefiner extends MergingRefiner {\n  mergeResults(textBetween, currentResult, nextResult) {\n    const newResult = nextResult.clone();\n    newResult.index = currentResult.index;\n    newResult.text = currentResult.text + textBetween + newResult.text;\n    newResult.start.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n    if (newResult.end) {\n      newResult.end.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n    }\n    return newResult;\n  }\n  shouldMergeResults(textBetween, currentResult, nextResult) {\n    const weekdayThenNormalDate = currentResult.start.isOnlyWeekdayComponent() && !currentResult.start.isCertain(\"hour\") && nextResult.start.isCertain(\"day\");\n    return weekdayThenNormalDate && textBetween.match(/^,?\\s*$/) != null;\n  }\n}","map":{"version":3,"names":["MergingRefiner","MergeWeekdayComponentRefiner","mergeResults","textBetween","currentResult","nextResult","newResult","clone","index","text","start","assign","get","end","shouldMergeResults","weekdayThenNormalDate","isOnlyWeekdayComponent","isCertain","match"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/common/refiners/MergeWeekdayComponentRefiner.ts"],"sourcesContent":["/*\n  \n*/\n\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\n\n/**\n * Merge weekday component into more completed data\n * - [Sunday] [12/7/2014] => [Sunday 12/7/2014]\n * - [Tuesday], [January 13, 2012] => [Sunday 12/7/2014]\n */\nexport default class MergeWeekdayComponentRefiner extends MergingRefiner {\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const newResult = nextResult.clone();\n        newResult.index = currentResult.index;\n        newResult.text = currentResult.text + textBetween + newResult.text;\n\n        newResult.start.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n        if (newResult.end) {\n            newResult.end.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n        }\n\n        return newResult;\n    }\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        const weekdayThenNormalDate =\n            currentResult.start.isOnlyWeekdayComponent() &&\n            !currentResult.start.isCertain(\"hour\") &&\n            nextResult.start.isCertain(\"day\");\n        return weekdayThenNormalDate && textBetween.match(/^,?\\s*$/) != null;\n    }\n}\n"],"mappings":"AAIA,SAASA,cAAc,QAAQ,wBAAsB;AAQrD,eAAc,MAAOC,4BAA6B,SAAQD,cAAc;EACpEE,YAAYA,CAACC,WAAmB,EAAEC,aAA4B,EAAEC,UAAyB;IACrF,MAAMC,SAAS,GAAGD,UAAU,CAACE,KAAK,EAAE;IACpCD,SAAS,CAACE,KAAK,GAAGJ,aAAa,CAACI,KAAK;IACrCF,SAAS,CAACG,IAAI,GAAGL,aAAa,CAACK,IAAI,GAAGN,WAAW,GAAGG,SAAS,CAACG,IAAI;IAElEH,SAAS,CAACI,KAAK,CAACC,MAAM,CAAC,SAAS,EAAEP,aAAa,CAACM,KAAK,CAACE,GAAG,CAAC,SAAS,CAAC,CAAC;IACrE,IAAIN,SAAS,CAACO,GAAG,EAAE;MACfP,SAAS,CAACO,GAAG,CAACF,MAAM,CAAC,SAAS,EAAEP,aAAa,CAACM,KAAK,CAACE,GAAG,CAAC,SAAS,CAAC,CAAC;;IAGvE,OAAON,SAAS;EACpB;EAEAQ,kBAAkBA,CAACX,WAAmB,EAAEC,aAA4B,EAAEC,UAAyB;IAC3F,MAAMU,qBAAqB,GACvBX,aAAa,CAACM,KAAK,CAACM,sBAAsB,EAAE,IAC5C,CAACZ,aAAa,CAACM,KAAK,CAACO,SAAS,CAAC,MAAM,CAAC,IACtCZ,UAAU,CAACK,KAAK,CAACO,SAAS,CAAC,KAAK,CAAC;IACrC,OAAOF,qBAAqB,IAAIZ,WAAW,CAACe,KAAK,CAAC,SAAS,CAAC,IAAI,IAAI;EACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}