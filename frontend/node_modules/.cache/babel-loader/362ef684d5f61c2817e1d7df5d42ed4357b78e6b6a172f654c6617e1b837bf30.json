{"ast":null,"code":"import * as references from \"../../../common/casualReferences.js\";\nimport { assignSimilarDate } from \"../../../utils/dayjs.js\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking.js\";\nexport default class RUCasualTimeParser extends AbstractParserWithLeftRightBoundaryChecking {\n  innerPatternString(context) {\n    return `(сейчас|прошлым\\\\s*вечером|прошлой\\\\s*ночью|следующей\\\\s*ночью|сегодня\\\\s*ночью|этой\\\\s*ночью|ночью|этим утром|утром|утра|в\\\\s*полдень|вечером|вечера|в\\\\s*полночь)`;\n  }\n  innerExtract(context, match) {\n    let targetDate = dayjs(context.refDate);\n    const lowerText = match[0].toLowerCase();\n    const component = context.createParsingComponents();\n    if (lowerText === \"сейчас\") {\n      return references.now(context.reference);\n    }\n    if (lowerText === \"вечером\" || lowerText === \"вечера\") {\n      return references.evening(context.reference);\n    }\n    if (lowerText.endsWith(\"утром\") || lowerText.endsWith(\"утра\")) {\n      return references.morning(context.reference);\n    }\n    if (lowerText.match(/в\\s*полдень/)) {\n      return references.noon(context.reference);\n    }\n    if (lowerText.match(/прошлой\\s*ночью/)) {\n      return references.lastNight(context.reference);\n    }\n    if (lowerText.match(/прошлым\\s*вечером/)) {\n      return references.yesterdayEvening(context.reference);\n    }\n    if (lowerText.match(/следующей\\s*ночью/)) {\n      const daysToAdd = targetDate.hour() < 22 ? 1 : 2;\n      targetDate = targetDate.add(daysToAdd, \"day\");\n      assignSimilarDate(component, targetDate);\n      component.imply(\"hour\", 0);\n    }\n    if (lowerText.match(/в\\s*полночь/) || lowerText.endsWith(\"ночью\")) {\n      return references.midnight(context.reference);\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["references","assignSimilarDate","dayjs","AbstractParserWithLeftRightBoundaryChecking","RUCasualTimeParser","innerPatternString","context","innerExtract","match","targetDate","refDate","lowerText","toLowerCase","component","createParsingComponents","now","reference","evening","endsWith","morning","noon","lastNight","yesterdayEvening","daysToAdd","hour","add","imply","midnight"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ru/parsers/RUCasualTimeParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport * as references from \"../../../common/casualReferences\";\nimport { assignSimilarDate } from \"../../../utils/dayjs\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking\";\n\nexport default class RUCasualTimeParser extends AbstractParserWithLeftRightBoundaryChecking {\n    innerPatternString(context: ParsingContext): string {\n        return `(сейчас|прошлым\\\\s*вечером|прошлой\\\\s*ночью|следующей\\\\s*ночью|сегодня\\\\s*ночью|этой\\\\s*ночью|ночью|этим утром|утром|утра|в\\\\s*полдень|вечером|вечера|в\\\\s*полночь)`;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        let targetDate = dayjs(context.refDate);\n        const lowerText = match[0].toLowerCase();\n        const component = context.createParsingComponents();\n\n        if (lowerText === \"сейчас\") {\n            return references.now(context.reference);\n        }\n        if (lowerText === \"вечером\" || lowerText === \"вечера\") {\n            return references.evening(context.reference);\n        }\n        if (lowerText.endsWith(\"утром\") || lowerText.endsWith(\"утра\")) {\n            return references.morning(context.reference);\n        }\n        if (lowerText.match(/в\\s*полдень/)) {\n            return references.noon(context.reference);\n        }\n        if (lowerText.match(/прошлой\\s*ночью/)) {\n            return references.lastNight(context.reference);\n        }\n        if (lowerText.match(/прошлым\\s*вечером/)) {\n            return references.yesterdayEvening(context.reference);\n        }\n        if (lowerText.match(/следующей\\s*ночью/)) {\n            const daysToAdd = targetDate.hour() < 22 ? 1 : 2;\n            targetDate = targetDate.add(daysToAdd, \"day\");\n            assignSimilarDate(component, targetDate);\n            component.imply(\"hour\", 0);\n        }\n        if (lowerText.match(/в\\s*полночь/) || lowerText.endsWith(\"ночью\")) {\n            return references.midnight(context.reference);\n        }\n        return component;\n    }\n}\n"],"mappings":"AACA,OAAO,KAAKA,UAAU,MAAM,qCAAmC;AAC/D,SAASC,iBAAiB,QAAQ,yBAAuB;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,2CAA2C,QAAQ,6CAA2C;AAEvG,eAAc,MAAOC,kBAAmB,SAAQD,2CAA2C;EACvFE,kBAAkBA,CAACC,OAAuB;IACtC,OAAO,qKAAqK;EAChL;EAEAC,YAAYA,CAACD,OAAuB,EAAEE,KAAuB;IACzD,IAAIC,UAAU,GAAGP,KAAK,CAACI,OAAO,CAACI,OAAO,CAAC;IACvC,MAAMC,SAAS,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACI,WAAW,EAAE;IACxC,MAAMC,SAAS,GAAGP,OAAO,CAACQ,uBAAuB,EAAE;IAEnD,IAAIH,SAAS,KAAK,QAAQ,EAAE;MACxB,OAAOX,UAAU,CAACe,GAAG,CAACT,OAAO,CAACU,SAAS,CAAC;;IAE5C,IAAIL,SAAS,KAAK,SAAS,IAAIA,SAAS,KAAK,QAAQ,EAAE;MACnD,OAAOX,UAAU,CAACiB,OAAO,CAACX,OAAO,CAACU,SAAS,CAAC;;IAEhD,IAAIL,SAAS,CAACO,QAAQ,CAAC,OAAO,CAAC,IAAIP,SAAS,CAACO,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC3D,OAAOlB,UAAU,CAACmB,OAAO,CAACb,OAAO,CAACU,SAAS,CAAC;;IAEhD,IAAIL,SAAS,CAACH,KAAK,CAAC,aAAa,CAAC,EAAE;MAChC,OAAOR,UAAU,CAACoB,IAAI,CAACd,OAAO,CAACU,SAAS,CAAC;;IAE7C,IAAIL,SAAS,CAACH,KAAK,CAAC,iBAAiB,CAAC,EAAE;MACpC,OAAOR,UAAU,CAACqB,SAAS,CAACf,OAAO,CAACU,SAAS,CAAC;;IAElD,IAAIL,SAAS,CAACH,KAAK,CAAC,mBAAmB,CAAC,EAAE;MACtC,OAAOR,UAAU,CAACsB,gBAAgB,CAAChB,OAAO,CAACU,SAAS,CAAC;;IAEzD,IAAIL,SAAS,CAACH,KAAK,CAAC,mBAAmB,CAAC,EAAE;MACtC,MAAMe,SAAS,GAAGd,UAAU,CAACe,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;MAChDf,UAAU,GAAGA,UAAU,CAACgB,GAAG,CAACF,SAAS,EAAE,KAAK,CAAC;MAC7CtB,iBAAiB,CAACY,SAAS,EAAEJ,UAAU,CAAC;MACxCI,SAAS,CAACa,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;;IAE9B,IAAIf,SAAS,CAACH,KAAK,CAAC,aAAa,CAAC,IAAIG,SAAS,CAACO,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC/D,OAAOlB,UAAU,CAAC2B,QAAQ,CAACrB,OAAO,CAACU,SAAS,CAAC;;IAEjD,OAAOH,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}