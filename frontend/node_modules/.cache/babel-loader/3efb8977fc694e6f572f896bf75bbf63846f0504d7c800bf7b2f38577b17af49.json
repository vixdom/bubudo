{"ast":null,"code":"import { WEEKDAY_DICTIONARY } from \"../../nl/constants.js\";\nimport { matchAnyPattern } from \"../../../utils/pattern.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { createParsingComponentsAtWeekday } from \"../../../common/calculation/weekdays.js\";\nconst PATTERN = new RegExp(\"(?:(?:\\\\,|\\\\(|\\\\（)\\\\s*)?\" + \"(?:op\\\\s*?)?\" + \"(?:(deze|vorige|volgende)\\\\s*(?:week\\\\s*)?)?\" + `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` + \"(?=\\\\W|$)\", \"i\");\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\nexport default class NLWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n    const weekday = WEEKDAY_DICTIONARY[dayOfWeek];\n    const prefix = match[PREFIX_GROUP];\n    const postfix = match[POSTFIX_GROUP];\n    let modifierWord = prefix || postfix;\n    modifierWord = modifierWord || \"\";\n    modifierWord = modifierWord.toLowerCase();\n    let modifier = null;\n    if (modifierWord == \"vorige\") {\n      modifier = \"last\";\n    } else if (modifierWord == \"volgende\") {\n      modifier = \"next\";\n    } else if (modifierWord == \"deze\") {\n      modifier = \"this\";\n    }\n    return createParsingComponentsAtWeekday(context.reference, weekday, modifier);\n  }\n}","map":{"version":3,"names":["WEEKDAY_DICTIONARY","matchAnyPattern","AbstractParserWithWordBoundaryChecking","createParsingComponentsAtWeekday","PATTERN","RegExp","PREFIX_GROUP","WEEKDAY_GROUP","POSTFIX_GROUP","NLWeekdayParser","innerPattern","innerExtract","context","match","dayOfWeek","toLowerCase","weekday","prefix","postfix","modifierWord","modifier","reference"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/nl/parsers/NLWeekdayParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../../nl/constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { createParsingComponentsAtWeekday } from \"../../../common/calculation/weekdays\";\n\nconst PATTERN = new RegExp(\n    \"(?:(?:\\\\,|\\\\(|\\\\（)\\\\s*)?\" +\n        \"(?:op\\\\s*?)?\" +\n        \"(?:(deze|vorige|volgende)\\\\s*(?:week\\\\s*)?)?\" +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\n\nexport default class NLWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const weekday = WEEKDAY_DICTIONARY[dayOfWeek];\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[POSTFIX_GROUP];\n        let modifierWord = prefix || postfix;\n        modifierWord = modifierWord || \"\";\n        modifierWord = modifierWord.toLowerCase();\n\n        let modifier = null;\n        if (modifierWord == \"vorige\") {\n            modifier = \"last\";\n        } else if (modifierWord == \"volgende\") {\n            modifier = \"next\";\n        } else if (modifierWord == \"deze\") {\n            modifier = \"this\";\n        }\n\n        return createParsingComponentsAtWeekday(context.reference, weekday, modifier);\n    }\n}\n"],"mappings":"AAEA,SAASA,kBAAkB,QAAQ,uBAAqB;AACxD,SAASC,eAAe,QAAQ,2BAAyB;AACzD,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,gCAAgC,QAAQ,yCAAuC;AAExF,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,0BAA0B,GACtB,cAAc,GACd,8CAA8C,GAC9C,IAAIJ,eAAe,CAACD,kBAAkB,CAAC,GAAG,GAC1C,WAAW,EACf,GAAG,CACN;AAED,MAAMM,YAAY,GAAG,CAAC;AACtB,MAAMC,aAAa,GAAG,CAAC;AACvB,MAAMC,aAAa,GAAG,CAAC;AAEvB,eAAc,MAAOC,eAAgB,SAAQP,sCAAsC;EAC/EQ,YAAYA,CAAA;IACR,OAAON,OAAO;EAClB;EAEAO,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,SAAS,GAAGD,KAAK,CAACN,aAAa,CAAC,CAACQ,WAAW,EAAE;IACpD,MAAMC,OAAO,GAAGhB,kBAAkB,CAACc,SAAS,CAAC;IAC7C,MAAMG,MAAM,GAAGJ,KAAK,CAACP,YAAY,CAAC;IAClC,MAAMY,OAAO,GAAGL,KAAK,CAACL,aAAa,CAAC;IACpC,IAAIW,YAAY,GAAGF,MAAM,IAAIC,OAAO;IACpCC,YAAY,GAAGA,YAAY,IAAI,EAAE;IACjCA,YAAY,GAAGA,YAAY,CAACJ,WAAW,EAAE;IAEzC,IAAIK,QAAQ,GAAG,IAAI;IACnB,IAAID,YAAY,IAAI,QAAQ,EAAE;MAC1BC,QAAQ,GAAG,MAAM;KACpB,MAAM,IAAID,YAAY,IAAI,UAAU,EAAE;MACnCC,QAAQ,GAAG,MAAM;KACpB,MAAM,IAAID,YAAY,IAAI,MAAM,EAAE;MAC/BC,QAAQ,GAAG,MAAM;;IAGrB,OAAOjB,gCAAgC,CAACS,OAAO,CAACS,SAAS,EAAEL,OAAO,EAAEI,QAAQ,CAAC;EACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}