{"ast":null,"code":"import { TIME_UNITS_PATTERN, parseTimeUnits, REGEX_PARTS } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nconst PATTERN = `(?:(?:приблизно|орієнтовно)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})${REGEX_PARTS.rightBoundary}`;\nexport default class UKTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n  patternLeftBoundary() {\n    return REGEX_PARTS.leftBoundary;\n  }\n  innerPattern(context) {\n    return context.option.forwardDate ? new RegExp(PATTERN, \"i\") : new RegExp(`(?:протягом|на протязі|протягом|упродовж|впродовж)\\\\s*${PATTERN}`, REGEX_PARTS.flags);\n  }\n  innerExtract(context, match) {\n    const timeUnits = parseTimeUnits(match[1]);\n    return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n  }\n}","map":{"version":3,"names":["TIME_UNITS_PATTERN","parseTimeUnits","REGEX_PARTS","ParsingComponents","AbstractParserWithWordBoundaryChecking","PATTERN","rightBoundary","UKTimeUnitWithinFormatParser","patternLeftBoundary","leftBoundary","innerPattern","context","option","forwardDate","RegExp","flags","innerExtract","match","timeUnits","createRelativeFromReference","reference"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/uk/parsers/UKTimeUnitWithinFormatParser.ts"],"sourcesContent":["import { TIME_UNITS_PATTERN, parseTimeUnits, REGEX_PARTS } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = `(?:(?:приблизно|орієнтовно)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})${REGEX_PARTS.rightBoundary}`;\n\nexport default class UKTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(context: ParsingContext): RegExp {\n        return context.option.forwardDate\n            ? new RegExp(PATTERN, \"i\")\n            : new RegExp(`(?:протягом|на протязі|протягом|упродовж|впродовж)\\\\s*${PATTERN}`, REGEX_PARTS.flags);\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const timeUnits = parseTimeUnits(match[1]);\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,cAAc,EAAEC,WAAW,QAAQ,iBAAe;AAE/E,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,SAASC,sCAAsC,QAAQ,2DAAyD;AAEhH,MAAMC,OAAO,GAAG,+CAA+CL,kBAAkB,IAAIE,WAAW,CAACI,aAAa,EAAE;AAEhH,eAAc,MAAOC,4BAA6B,SAAQH,sCAAsC;EAC5FI,mBAAmBA,CAAA;IACf,OAAON,WAAW,CAACO,YAAY;EACnC;EAEAC,YAAYA,CAACC,OAAuB;IAChC,OAAOA,OAAO,CAACC,MAAM,CAACC,WAAW,GAC3B,IAAIC,MAAM,CAACT,OAAO,EAAE,GAAG,CAAC,GACxB,IAAIS,MAAM,CAAC,yDAAyDT,OAAO,EAAE,EAAEH,WAAW,CAACa,KAAK,CAAC;EAC3G;EAEAC,YAAYA,CAACL,OAAuB,EAAEM,KAAuB;IACzD,MAAMC,SAAS,GAAGjB,cAAc,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1C,OAAOd,iBAAiB,CAACgB,2BAA2B,CAACR,OAAO,CAACS,SAAS,EAAEF,SAAS,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}