{"ast":null,"code":"import { TIME_UNITS_PATTERN, parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nconst PATTERN_WITH_OPTIONAL_PREFIX = new RegExp(`(?:(?:within|in|for)\\\\s*)?` + `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\nconst PATTERN_WITH_PREFIX = new RegExp(`(?:within|in|for)\\\\s*` + `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\nconst PATTERN_WITH_PREFIX_STRICT = new RegExp(`(?:within|in|for)\\\\s*` + `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_NO_ABBR_PATTERN})(?=\\\\W|$)`, \"i\");\nexport default class ENTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n  constructor(strictMode) {\n    super();\n    this.strictMode = strictMode;\n  }\n  innerPattern(context) {\n    if (this.strictMode) {\n      return PATTERN_WITH_PREFIX_STRICT;\n    }\n    return context.option.forwardDate ? PATTERN_WITH_OPTIONAL_PREFIX : PATTERN_WITH_PREFIX;\n  }\n  innerExtract(context, match) {\n    if (match[0].match(/^for\\s*the\\s*\\w+/)) {\n      return null;\n    }\n    const timeUnits = parseTimeUnits(match[1]);\n    if (!timeUnits) {\n      return null;\n    }\n    return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n  }\n}","map":{"version":3,"names":["TIME_UNITS_PATTERN","parseTimeUnits","TIME_UNITS_NO_ABBR_PATTERN","ParsingComponents","AbstractParserWithWordBoundaryChecking","PATTERN_WITH_OPTIONAL_PREFIX","RegExp","PATTERN_WITH_PREFIX","PATTERN_WITH_PREFIX_STRICT","ENTimeUnitWithinFormatParser","constructor","strictMode","innerPattern","context","option","forwardDate","innerExtract","match","timeUnits","createRelativeFromReference","reference"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitWithinFormatParser.ts"],"sourcesContent":["import { TIME_UNITS_PATTERN, parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN_WITH_OPTIONAL_PREFIX = new RegExp(\n    `(?:(?:within|in|for)\\\\s*)?` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst PATTERN_WITH_PREFIX = new RegExp(\n    `(?:within|in|for)\\\\s*` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst PATTERN_WITH_PREFIX_STRICT = new RegExp(\n    `(?:within|in|for)\\\\s*` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_NO_ABBR_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nexport default class ENTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(context: ParsingContext): RegExp {\n        if (this.strictMode) {\n            return PATTERN_WITH_PREFIX_STRICT;\n        }\n        return context.option.forwardDate ? PATTERN_WITH_OPTIONAL_PREFIX : PATTERN_WITH_PREFIX;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        // Exclude \"for the unit\" phases, e.g. \"for the year\"\n        if (match[0].match(/^for\\s*the\\s*\\w+/)) {\n            return null;\n        }\n        const timeUnits = parseTimeUnits(match[1]);\n        if (!timeUnits) {\n            return null;\n        }\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,cAAc,EAAEC,0BAA0B,QAAQ,iBAAe;AAE9F,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,SAASC,sCAAsC,QAAQ,2DAAyD;AAEhH,MAAMC,4BAA4B,GAAG,IAAIC,MAAM,CAC3C,4BAA4B,GACxB,kEAAkEN,kBAAkB,YAAY,EACpG,GAAG,CACN;AAED,MAAMO,mBAAmB,GAAG,IAAID,MAAM,CAClC,uBAAuB,GACnB,kEAAkEN,kBAAkB,YAAY,EACpG,GAAG,CACN;AAED,MAAMQ,0BAA0B,GAAG,IAAIF,MAAM,CACzC,uBAAuB,GACnB,kEAAkEJ,0BAA0B,YAAY,EAC5G,GAAG,CACN;AAED,eAAc,MAAOO,4BAA6B,SAAQL,sCAAsC;EAC5FM,YAAoBC,UAAmB;IACnC,KAAK,EAAE;IADS,KAAAA,UAAU,GAAVA,UAAU;EAE9B;EAEAC,YAAYA,CAACC,OAAuB;IAChC,IAAI,IAAI,CAACF,UAAU,EAAE;MACjB,OAAOH,0BAA0B;;IAErC,OAAOK,OAAO,CAACC,MAAM,CAACC,WAAW,GAAGV,4BAA4B,GAAGE,mBAAmB;EAC1F;EAEAS,YAAYA,CAACH,OAAuB,EAAEI,KAAuB;IAEzD,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,kBAAkB,CAAC,EAAE;MACpC,OAAO,IAAI;;IAEf,MAAMC,SAAS,GAAGjB,cAAc,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1C,IAAI,CAACC,SAAS,EAAE;MACZ,OAAO,IAAI;;IAEf,OAAOf,iBAAiB,CAACgB,2BAA2B,CAACN,OAAO,CAACO,SAAS,EAAEF,SAAS,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}