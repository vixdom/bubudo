{"ast":null,"code":"import { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern.js\";\nexport const WEEKDAY_DICTIONARY = {\n  \"dimanche\": 0,\n  \"dim\": 0,\n  \"lundi\": 1,\n  \"lun\": 1,\n  \"mardi\": 2,\n  \"mar\": 2,\n  \"mercredi\": 3,\n  \"mer\": 3,\n  \"jeudi\": 4,\n  \"jeu\": 4,\n  \"vendredi\": 5,\n  \"ven\": 5,\n  \"samedi\": 6,\n  \"sam\": 6\n};\nexport const MONTH_DICTIONARY = {\n  \"janvier\": 1,\n  \"jan\": 1,\n  \"jan.\": 1,\n  \"février\": 2,\n  \"fév\": 2,\n  \"fév.\": 2,\n  \"fevrier\": 2,\n  \"fev\": 2,\n  \"fev.\": 2,\n  \"mars\": 3,\n  \"mar\": 3,\n  \"mar.\": 3,\n  \"avril\": 4,\n  \"avr\": 4,\n  \"avr.\": 4,\n  \"mai\": 5,\n  \"juin\": 6,\n  \"jun\": 6,\n  \"juillet\": 7,\n  \"juil\": 7,\n  \"jul\": 7,\n  \"jul.\": 7,\n  \"août\": 8,\n  \"aout\": 8,\n  \"septembre\": 9,\n  \"sep\": 9,\n  \"sep.\": 9,\n  \"sept\": 9,\n  \"sept.\": 9,\n  \"octobre\": 10,\n  \"oct\": 10,\n  \"oct.\": 10,\n  \"novembre\": 11,\n  \"nov\": 11,\n  \"nov.\": 11,\n  \"décembre\": 12,\n  \"decembre\": 12,\n  \"dec\": 12,\n  \"dec.\": 12\n};\nexport const INTEGER_WORD_DICTIONARY = {\n  \"un\": 1,\n  \"deux\": 2,\n  \"trois\": 3,\n  \"quatre\": 4,\n  \"cinq\": 5,\n  \"six\": 6,\n  \"sept\": 7,\n  \"huit\": 8,\n  \"neuf\": 9,\n  \"dix\": 10,\n  \"onze\": 11,\n  \"douze\": 12,\n  \"treize\": 13\n};\nexport const TIME_UNIT_DICTIONARY = {\n  \"sec\": \"second\",\n  \"seconde\": \"second\",\n  \"secondes\": \"second\",\n  \"min\": \"minute\",\n  \"mins\": \"minute\",\n  \"minute\": \"minute\",\n  \"minutes\": \"minute\",\n  \"h\": \"hour\",\n  \"hr\": \"hour\",\n  \"hrs\": \"hour\",\n  \"heure\": \"hour\",\n  \"heures\": \"hour\",\n  \"jour\": \"d\",\n  \"jours\": \"d\",\n  \"semaine\": \"week\",\n  \"semaines\": \"week\",\n  \"mois\": \"month\",\n  \"trimestre\": \"quarter\",\n  \"trimestres\": \"quarter\",\n  \"ans\": \"year\",\n  \"année\": \"year\",\n  \"années\": \"year\"\n};\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\\\.[0-9]+|une?\\\\b|quelques?|demi-?)`;\nexport function parseNumberPattern(match) {\n  const num = match.toLowerCase();\n  if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n    return INTEGER_WORD_DICTIONARY[num];\n  } else if (num === \"une\" || num === \"un\") {\n    return 1;\n  } else if (num.match(/quelques?/)) {\n    return 3;\n  } else if (num.match(/demi-?/)) {\n    return 0.5;\n  }\n  return parseFloat(num);\n}\nexport const ORDINAL_NUMBER_PATTERN = `(?:[0-9]{1,2}(?:er)?)`;\nexport function parseOrdinalNumberPattern(match) {\n  let num = match.toLowerCase();\n  num = num.replace(/(?:er)$/i, \"\");\n  return parseInt(num);\n}\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s*(?:AC|AD|p\\\\.\\\\s*C(?:hr?)?\\\\.\\\\s*n\\\\.)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match) {\n  if (/AC/i.test(match)) {\n    match = match.replace(/BC/i, \"\");\n    return -parseInt(match);\n  }\n  if (/AD/i.test(match) || /C/i.test(match)) {\n    match = match.replace(/[^\\d]+/i, \"\");\n    return parseInt(match);\n  }\n  let yearNumber = parseInt(match);\n  if (yearNumber < 100) {\n    if (yearNumber > 50) {\n      yearNumber = yearNumber + 1900;\n    } else {\n      yearNumber = yearNumber + 2000;\n    }\n  }\n  return yearNumber;\n}\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\"\", SINGLE_TIME_UNIT_PATTERN);\nexport function parseTimeUnits(timeunitText) {\n  const fragments = {};\n  let remainingText = timeunitText;\n  let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  while (match) {\n    collectDateTimeFragment(fragments, match);\n    remainingText = remainingText.substring(match[0].length);\n    match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  }\n  return fragments;\n}\nfunction collectDateTimeFragment(fragments, match) {\n  const num = parseNumberPattern(match[1]);\n  const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n  fragments[unit] = num;\n}","map":{"version":3,"names":["matchAnyPattern","repeatedTimeunitPattern","WEEKDAY_DICTIONARY","MONTH_DICTIONARY","INTEGER_WORD_DICTIONARY","TIME_UNIT_DICTIONARY","NUMBER_PATTERN","parseNumberPattern","match","num","toLowerCase","undefined","parseFloat","ORDINAL_NUMBER_PATTERN","parseOrdinalNumberPattern","replace","parseInt","YEAR_PATTERN","parseYear","test","yearNumber","SINGLE_TIME_UNIT_PATTERN","SINGLE_TIME_UNIT_REGEX","RegExp","TIME_UNITS_PATTERN","parseTimeUnits","timeunitText","fragments","remainingText","exec","collectDateTimeFragment","substring","length","unit"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/fr/constants.ts"],"sourcesContent":["import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    \"dimanche\": 0,\n    \"dim\": 0,\n    \"lundi\": 1,\n    \"lun\": 1,\n    \"mardi\": 2,\n    \"mar\": 2,\n    \"mercredi\": 3,\n    \"mer\": 3,\n    \"jeudi\": 4,\n    \"jeu\": 4,\n    \"vendredi\": 5,\n    \"ven\": 5,\n    \"samedi\": 6,\n    \"sam\": 6,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    \"janvier\": 1,\n    \"jan\": 1,\n    \"jan.\": 1,\n    \"février\": 2,\n    \"fév\": 2,\n    \"fév.\": 2,\n    \"fevrier\": 2,\n    \"fev\": 2,\n    \"fev.\": 2,\n    \"mars\": 3,\n    \"mar\": 3,\n    \"mar.\": 3,\n    \"avril\": 4,\n    \"avr\": 4,\n    \"avr.\": 4,\n    \"mai\": 5,\n    \"juin\": 6,\n    \"jun\": 6,\n    \"juillet\": 7,\n    \"juil\": 7,\n    \"jul\": 7,\n    \"jul.\": 7,\n    \"août\": 8,\n    \"aout\": 8,\n    \"septembre\": 9,\n    \"sep\": 9,\n    \"sep.\": 9,\n    \"sept\": 9,\n    \"sept.\": 9,\n    \"octobre\": 10,\n    \"oct\": 10,\n    \"oct.\": 10,\n    \"novembre\": 11,\n    \"nov\": 11,\n    \"nov.\": 11,\n    \"décembre\": 12,\n    \"decembre\": 12,\n    \"dec\": 12,\n    \"dec.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    \"un\": 1,\n    \"deux\": 2,\n    \"trois\": 3,\n    \"quatre\": 4,\n    \"cinq\": 5,\n    \"six\": 6,\n    \"sept\": 7,\n    \"huit\": 8,\n    \"neuf\": 9,\n    \"dix\": 10,\n    \"onze\": 11,\n    \"douze\": 12,\n    \"treize\": 13,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    \"sec\": \"second\",\n    \"seconde\": \"second\",\n    \"secondes\": \"second\",\n    \"min\": \"minute\",\n    \"mins\": \"minute\",\n    \"minute\": \"minute\",\n    \"minutes\": \"minute\",\n    \"h\": \"hour\",\n    \"hr\": \"hour\",\n    \"hrs\": \"hour\",\n    \"heure\": \"hour\",\n    \"heures\": \"hour\",\n    \"jour\": \"d\",\n    \"jours\": \"d\",\n    \"semaine\": \"week\",\n    \"semaines\": \"week\",\n    \"mois\": \"month\",\n    \"trimestre\": \"quarter\",\n    \"trimestres\": \"quarter\",\n    \"ans\": \"year\",\n    \"année\": \"year\",\n    \"années\": \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|une?\\\\b|quelques?|demi-?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"une\" || num === \"un\") {\n        return 1;\n    } else if (num.match(/quelques?/)) {\n        return 3;\n    } else if (num.match(/demi-?/)) {\n        return 0.5;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:[0-9]{1,2}(?:er)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    num = num.replace(/(?:er)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n// 88 p. Chr. n.\n// 234 AC\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s*(?:AC|AD|p\\\\.\\\\s*C(?:hr?)?\\\\.\\\\s*n\\\\.)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match: string): number {\n    if (/AC/i.test(match)) {\n        match = match.replace(/BC/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/AD/i.test(match) || /C/i.test(match)) {\n        match = match.replace(/[^\\d]+/i, \"\");\n        return parseInt(match);\n    }\n\n    let yearNumber = parseInt(match);\n    if (yearNumber < 100) {\n        if (yearNumber > 50) {\n            yearNumber = yearNumber + 1900;\n        } else {\n            yearNumber = yearNumber + 2000;\n        }\n    }\n\n    return yearNumber;\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\"\", SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): { [c in OpUnitType | QUnitType]?: number } {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length);\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments as { [c in OpUnitType | QUnitType]?: number };\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n"],"mappings":"AACA,SAASA,eAAe,EAAEC,uBAAuB,QAAQ,wBAAsB;AAE/E,OAAO,MAAMC,kBAAkB,GAA+B;EAC1D,UAAU,EAAE,CAAC;EACb,KAAK,EAAE,CAAC;EACR,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,UAAU,EAAE,CAAC;EACb,KAAK,EAAE,CAAC;EACR,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,UAAU,EAAE,CAAC;EACb,KAAK,EAAE,CAAC;EACR,QAAQ,EAAE,CAAC;EACX,KAAK,EAAE;CACV;AAED,OAAO,MAAMC,gBAAgB,GAA+B;EACxD,SAAS,EAAE,CAAC;EACZ,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,SAAS,EAAE,CAAC;EACZ,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,SAAS,EAAE,CAAC;EACZ,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,MAAM,EAAE,CAAC;EACT,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,KAAK,EAAE,CAAC;EACR,SAAS,EAAE,CAAC;EACZ,MAAM,EAAE,CAAC;EACT,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,MAAM,EAAE,CAAC;EACT,MAAM,EAAE,CAAC;EACT,WAAW,EAAE,CAAC;EACd,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,SAAS,EAAE,EAAE;EACb,KAAK,EAAE,EAAE;EACT,MAAM,EAAE,EAAE;EACV,UAAU,EAAE,EAAE;EACd,KAAK,EAAE,EAAE;EACT,MAAM,EAAE,EAAE;EACV,UAAU,EAAE,EAAE;EACd,UAAU,EAAE,EAAE;EACd,KAAK,EAAE,EAAE;EACT,MAAM,EAAE;CACX;AAED,OAAO,MAAMC,uBAAuB,GAA+B;EAC/D,IAAI,EAAE,CAAC;EACP,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,QAAQ,EAAE,CAAC;EACX,MAAM,EAAE,CAAC;EACT,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,MAAM,EAAE,CAAC;EACT,MAAM,EAAE,CAAC;EACT,KAAK,EAAE,EAAE;EACT,MAAM,EAAE,EAAE;EACV,OAAO,EAAE,EAAE;EACX,QAAQ,EAAE;CACb;AAED,OAAO,MAAMC,oBAAoB,GAA+C;EAC5E,KAAK,EAAE,QAAQ;EACf,SAAS,EAAE,QAAQ;EACnB,UAAU,EAAE,QAAQ;EACpB,KAAK,EAAE,QAAQ;EACf,MAAM,EAAE,QAAQ;EAChB,QAAQ,EAAE,QAAQ;EAClB,SAAS,EAAE,QAAQ;EACnB,GAAG,EAAE,MAAM;EACX,IAAI,EAAE,MAAM;EACZ,KAAK,EAAE,MAAM;EACb,OAAO,EAAE,MAAM;EACf,QAAQ,EAAE,MAAM;EAChB,MAAM,EAAE,GAAG;EACX,OAAO,EAAE,GAAG;EACZ,SAAS,EAAE,MAAM;EACjB,UAAU,EAAE,MAAM;EAClB,MAAM,EAAE,OAAO;EACf,WAAW,EAAE,SAAS;EACtB,YAAY,EAAE,SAAS;EACvB,KAAK,EAAE,MAAM;EACb,OAAO,EAAE,MAAM;EACf,QAAQ,EAAE;CACb;AAID,OAAO,MAAMC,cAAc,GAAG,MAAMN,eAAe,CAC/CI,uBAAuB,CAC1B,mDAAmD;AAEpD,OAAM,SAAUG,kBAAkBA,CAACC,KAAa;EAC5C,MAAMC,GAAG,GAAGD,KAAK,CAACE,WAAW,EAAE;EAC/B,IAAIN,uBAAuB,CAACK,GAAG,CAAC,KAAKE,SAAS,EAAE;IAC5C,OAAOP,uBAAuB,CAACK,GAAG,CAAC;GACtC,MAAM,IAAIA,GAAG,KAAK,KAAK,IAAIA,GAAG,KAAK,IAAI,EAAE;IACtC,OAAO,CAAC;GACX,MAAM,IAAIA,GAAG,CAACD,KAAK,CAAC,WAAW,CAAC,EAAE;IAC/B,OAAO,CAAC;GACX,MAAM,IAAIC,GAAG,CAACD,KAAK,CAAC,QAAQ,CAAC,EAAE;IAC5B,OAAO,GAAG;;EAGd,OAAOI,UAAU,CAACH,GAAG,CAAC;AAC1B;AAIA,OAAO,MAAMI,sBAAsB,GAAG,uBAAuB;AAC7D,OAAM,SAAUC,yBAAyBA,CAACN,KAAa;EACnD,IAAIC,GAAG,GAAGD,KAAK,CAACE,WAAW,EAAE;EAC7BD,GAAG,GAAGA,GAAG,CAACM,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EACjC,OAAOC,QAAQ,CAACP,GAAG,CAAC;AACxB;AAKA,OAAO,MAAMQ,YAAY,GAAG,wFAAwF;AACpH,OAAM,SAAUC,SAASA,CAACV,KAAa;EACnC,IAAI,KAAK,CAACW,IAAI,CAACX,KAAK,CAAC,EAAE;IACnBA,KAAK,GAAGA,KAAK,CAACO,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAChC,OAAO,CAACC,QAAQ,CAACR,KAAK,CAAC;;EAG3B,IAAI,KAAK,CAACW,IAAI,CAACX,KAAK,CAAC,IAAI,IAAI,CAACW,IAAI,CAACX,KAAK,CAAC,EAAE;IACvCA,KAAK,GAAGA,KAAK,CAACO,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IACpC,OAAOC,QAAQ,CAACR,KAAK,CAAC;;EAG1B,IAAIY,UAAU,GAAGJ,QAAQ,CAACR,KAAK,CAAC;EAChC,IAAIY,UAAU,GAAG,GAAG,EAAE;IAClB,IAAIA,UAAU,GAAG,EAAE,EAAE;MACjBA,UAAU,GAAGA,UAAU,GAAG,IAAI;KACjC,MAAM;MACHA,UAAU,GAAGA,UAAU,GAAG,IAAI;;;EAItC,OAAOA,UAAU;AACrB;AAIA,MAAMC,wBAAwB,GAAG,IAAIf,cAAc,aAAaN,eAAe,CAACK,oBAAoB,CAAC,WAAW;AAChH,MAAMiB,sBAAsB,GAAG,IAAIC,MAAM,CAACF,wBAAwB,EAAE,GAAG,CAAC;AAExE,OAAO,MAAMG,kBAAkB,GAAGvB,uBAAuB,CAAC,EAAE,EAAEoB,wBAAwB,CAAC;AAEvF,OAAM,SAAUI,cAAcA,CAACC,YAAY;EACvC,MAAMC,SAAS,GAAG,EAAE;EACpB,IAAIC,aAAa,GAAGF,YAAY;EAChC,IAAIlB,KAAK,GAAGc,sBAAsB,CAACO,IAAI,CAACD,aAAa,CAAC;EACtD,OAAOpB,KAAK,EAAE;IACVsB,uBAAuB,CAACH,SAAS,EAAEnB,KAAK,CAAC;IACzCoB,aAAa,GAAGA,aAAa,CAACG,SAAS,CAACvB,KAAK,CAAC,CAAC,CAAC,CAACwB,MAAM,CAAC;IACxDxB,KAAK,GAAGc,sBAAsB,CAACO,IAAI,CAACD,aAAa,CAAC;;EAEtD,OAAOD,SAAuD;AAClE;AAEA,SAASG,uBAAuBA,CAACH,SAAS,EAAEnB,KAAK;EAC7C,MAAMC,GAAG,GAAGF,kBAAkB,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMyB,IAAI,GAAG5B,oBAAoB,CAACG,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE,CAAC;EACzDiB,SAAS,CAACM,IAAI,CAAC,GAAGxB,GAAG;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}