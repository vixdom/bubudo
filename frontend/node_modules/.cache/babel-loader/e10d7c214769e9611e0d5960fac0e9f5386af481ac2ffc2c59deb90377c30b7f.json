{"ast":null,"code":"// Helper function to parse estimated time strings into minutes\nexport function parseEstimatedTime(timeString) {\n  if (!timeString) return 0;\n\n  // Remove approximate markers like '~'\n  const cleanedTime = timeString.replace('~', '').trim();\n  let totalMinutes = 0;\n\n  // Match patterns like \"X minutes\", \"Y hours\", \"X-Y hours/minutes\"\n  const hourMatch = cleanedTime.match(/(\\d+(\\.\\d+)?)-?(\\d+(\\.\\d+)?)?\\s+hours?/i);\n  const minuteMatch = cleanedTime.match(/(\\d+)-?(\\d+)?\\s+minutes?/i);\n  if (hourMatch) {\n    const lowerBound = parseFloat(hourMatch[1]);\n    const upperBound = hourMatch[3] ? parseFloat(hourMatch[3]) : lowerBound;\n    totalMinutes = (lowerBound + upperBound) / 2 * 60; // Average if range\n  } else if (minuteMatch) {\n    const lowerBound = parseInt(minuteMatch[1], 10);\n    const upperBound = minuteMatch[2] ? parseInt(minuteMatch[2], 10) : lowerBound;\n    totalMinutes = (lowerBound + upperBound) / 2; // Average if range\n  }\n  return Math.round(totalMinutes);\n}\n\n// Helper function to format total minutes into a readable string\nexport function formatTotalTime(totalMinutes) {\n  if (totalMinutes === 0) return ''; // Don't display if no time estimated\n\n  if (totalMinutes < 60) {\n    return `~${totalMinutes} min`;\n  } else {\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    if (minutes === 0) {\n      return `~${hours} hr`;\n    } else {\n      // Simple rounding for display\n      const totalHours = Math.round(totalMinutes / 60 * 10) / 10;\n      return `~${totalHours} hrs`;\n    }\n  }\n}","map":{"version":3,"names":["parseEstimatedTime","timeString","cleanedTime","replace","trim","totalMinutes","hourMatch","match","minuteMatch","lowerBound","parseFloat","upperBound","parseInt","Math","round","formatTotalTime","hours","floor","minutes","totalHours"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/utils/timeUtils.ts"],"sourcesContent":["// Helper function to parse estimated time strings into minutes\nexport function parseEstimatedTime(timeString?: string): number {\n  if (!timeString) return 0;\n\n  // Remove approximate markers like '~'\n  const cleanedTime = timeString.replace('~', '').trim();\n\n  let totalMinutes = 0;\n\n  // Match patterns like \"X minutes\", \"Y hours\", \"X-Y hours/minutes\"\n  const hourMatch = cleanedTime.match(/(\\d+(\\.\\d+)?)-?(\\d+(\\.\\d+)?)?\\s+hours?/i);\n  const minuteMatch = cleanedTime.match(/(\\d+)-?(\\d+)?\\s+minutes?/i);\n\n  if (hourMatch) {\n    const lowerBound = parseFloat(hourMatch[1]);\n    const upperBound = hourMatch[3] ? parseFloat(hourMatch[3]) : lowerBound;\n    totalMinutes = ((lowerBound + upperBound) / 2) * 60; // Average if range\n  } else if (minuteMatch) {\n    const lowerBound = parseInt(minuteMatch[1], 10);\n    const upperBound = minuteMatch[2] ? parseInt(minuteMatch[2], 10) : lowerBound;\n    totalMinutes = (lowerBound + upperBound) / 2; // Average if range\n  }\n\n  return Math.round(totalMinutes);\n}\n\n// Helper function to format total minutes into a readable string\nexport function formatTotalTime(totalMinutes: number): string {\n  if (totalMinutes === 0) return ''; // Don't display if no time estimated\n  \n  if (totalMinutes < 60) {\n    return `~${totalMinutes} min`;\n  } else {\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    if (minutes === 0) {\n      return `~${hours} hr`;\n    } else {\n        // Simple rounding for display\n        const totalHours = Math.round((totalMinutes / 60) * 10) / 10; \n        return `~${totalHours} hrs`;\n    }\n  }\n}\n"],"mappings":"AAAA;AACA,OAAO,SAASA,kBAAkBA,CAACC,UAAmB,EAAU;EAC9D,IAAI,CAACA,UAAU,EAAE,OAAO,CAAC;;EAEzB;EACA,MAAMC,WAAW,GAAGD,UAAU,CAACE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;EAEtD,IAAIC,YAAY,GAAG,CAAC;;EAEpB;EACA,MAAMC,SAAS,GAAGJ,WAAW,CAACK,KAAK,CAAC,yCAAyC,CAAC;EAC9E,MAAMC,WAAW,GAAGN,WAAW,CAACK,KAAK,CAAC,2BAA2B,CAAC;EAElE,IAAID,SAAS,EAAE;IACb,MAAMG,UAAU,GAAGC,UAAU,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAMK,UAAU,GAAGL,SAAS,CAAC,CAAC,CAAC,GAAGI,UAAU,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC,GAAGG,UAAU;IACvEJ,YAAY,GAAI,CAACI,UAAU,GAAGE,UAAU,IAAI,CAAC,GAAI,EAAE,CAAC,CAAC;EACvD,CAAC,MAAM,IAAIH,WAAW,EAAE;IACtB,MAAMC,UAAU,GAAGG,QAAQ,CAACJ,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC/C,MAAMG,UAAU,GAAGH,WAAW,CAAC,CAAC,CAAC,GAAGI,QAAQ,CAACJ,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAGC,UAAU;IAC7EJ,YAAY,GAAG,CAACI,UAAU,GAAGE,UAAU,IAAI,CAAC,CAAC,CAAC;EAChD;EAEA,OAAOE,IAAI,CAACC,KAAK,CAACT,YAAY,CAAC;AACjC;;AAEA;AACA,OAAO,SAASU,eAAeA,CAACV,YAAoB,EAAU;EAC5D,IAAIA,YAAY,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;;EAEnC,IAAIA,YAAY,GAAG,EAAE,EAAE;IACrB,OAAO,IAAIA,YAAY,MAAM;EAC/B,CAAC,MAAM;IACL,MAAMW,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACZ,YAAY,GAAG,EAAE,CAAC;IAC3C,MAAMa,OAAO,GAAGb,YAAY,GAAG,EAAE;IACjC,IAAIa,OAAO,KAAK,CAAC,EAAE;MACjB,OAAO,IAAIF,KAAK,KAAK;IACvB,CAAC,MAAM;MACH;MACA,MAAMG,UAAU,GAAGN,IAAI,CAACC,KAAK,CAAET,YAAY,GAAG,EAAE,GAAI,EAAE,CAAC,GAAG,EAAE;MAC5D,OAAO,IAAIc,UAAU,MAAM;IAC/B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}