{"ast":null,"code":"import { NUMBER_PATTERN, parseNumberPattern, TIME_UNIT_DICTIONARY } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits.js\";\nimport { matchAnyPattern } from \"../../../utils/pattern.js\";\nexport default class FRTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n  constructor() {\n    super();\n  }\n  innerPattern() {\n    return new RegExp(`(?:les?|la|l'|du|des?)\\\\s*` + `(${NUMBER_PATTERN})?` + `(?:\\\\s*(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?))?` + `\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})` + `(?:\\\\s*(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?))?`, \"i\");\n  }\n  innerExtract(context, match) {\n    const num = match[1] ? parseNumberPattern(match[1]) : 1;\n    const unit = TIME_UNIT_DICTIONARY[match[3].toLowerCase()];\n    let timeUnits = {};\n    timeUnits[unit] = num;\n    let modifier = match[2] || match[4] || \"\";\n    modifier = modifier.toLowerCase();\n    if (!modifier) {\n      return;\n    }\n    if (/derni[eè]re?s?/.test(modifier) || /pass[ée]e?s?/.test(modifier) || /pr[ée]c[ée]dents?/.test(modifier)) {\n      timeUnits = reverseTimeUnits(timeUnits);\n    }\n    return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n  }\n}","map":{"version":3,"names":["NUMBER_PATTERN","parseNumberPattern","TIME_UNIT_DICTIONARY","ParsingComponents","AbstractParserWithWordBoundaryChecking","reverseTimeUnits","matchAnyPattern","FRTimeUnitAgoFormatParser","constructor","innerPattern","RegExp","innerExtract","context","match","num","unit","toLowerCase","timeUnits","modifier","test","createRelativeFromReference","reference"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/fr/parsers/FRTimeUnitRelativeFormatParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { NUMBER_PATTERN, parseNumberPattern, TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nexport default class FRTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor() {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return new RegExp(\n            `(?:les?|la|l'|du|des?)\\\\s*` +\n                `(${NUMBER_PATTERN})?` +\n                `(?:\\\\s*(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?))?` +\n                `\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})` +\n                `(?:\\\\s*(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?))?`,\n            \"i\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const num = match[1] ? parseNumberPattern(match[1]) : 1;\n        const unit = TIME_UNIT_DICTIONARY[match[3].toLowerCase()];\n        let timeUnits = {};\n        timeUnits[unit] = num;\n\n        // Modifier\n        let modifier = match[2] || match[4] || \"\";\n        modifier = modifier.toLowerCase();\n        if (!modifier) {\n            return;\n        }\n\n        if (/derni[eè]re?s?/.test(modifier) || /pass[ée]e?s?/.test(modifier) || /pr[ée]c[ée]dents?/.test(modifier)) {\n            timeUnits = reverseTimeUnits(timeUnits);\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n"],"mappings":"AACA,SAASA,cAAc,EAAEC,kBAAkB,EAAEC,oBAAoB,QAAQ,iBAAe;AACxF,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,gBAAgB,QAAQ,6BAA2B;AAC5D,SAASC,eAAe,QAAQ,2BAAyB;AAEzD,eAAc,MAAOC,yBAA0B,SAAQH,sCAAsC;EACzFI,YAAA;IACI,KAAK,EAAE;EACX;EAEAC,YAAYA,CAAA;IACR,OAAO,IAAIC,MAAM,CACb,4BAA4B,GACxB,IAAIV,cAAc,IAAI,GACtB,mFAAmF,GACnF,QAAQM,eAAe,CAACJ,oBAAoB,CAAC,GAAG,GAChD,mFAAmF,EACvF,GAAG,CACN;EACL;EAEAS,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,GAAG,GAAGD,KAAK,CAAC,CAAC,CAAC,GAAGZ,kBAAkB,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD,MAAME,IAAI,GAAGb,oBAAoB,CAACW,KAAK,CAAC,CAAC,CAAC,CAACG,WAAW,EAAE,CAAC;IACzD,IAAIC,SAAS,GAAG,EAAE;IAClBA,SAAS,CAACF,IAAI,CAAC,GAAGD,GAAG;IAGrB,IAAII,QAAQ,GAAGL,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;IACzCK,QAAQ,GAAGA,QAAQ,CAACF,WAAW,EAAE;IACjC,IAAI,CAACE,QAAQ,EAAE;MACX;;IAGJ,IAAI,gBAAgB,CAACC,IAAI,CAACD,QAAQ,CAAC,IAAI,cAAc,CAACC,IAAI,CAACD,QAAQ,CAAC,IAAI,mBAAmB,CAACC,IAAI,CAACD,QAAQ,CAAC,EAAE;MACxGD,SAAS,GAAGZ,gBAAgB,CAACY,SAAS,CAAC;;IAG3C,OAAOd,iBAAiB,CAACiB,2BAA2B,CAACR,OAAO,CAACS,SAAS,EAAEJ,SAAS,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}