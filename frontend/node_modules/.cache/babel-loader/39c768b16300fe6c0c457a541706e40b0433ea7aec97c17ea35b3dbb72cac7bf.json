{"ast":null,"code":"import RUTimeUnitWithinFormatParser from \"./parsers/RUTimeUnitWithinFormatParser.js\";\nimport RUMonthNameLittleEndianParser from \"./parsers/RUMonthNameLittleEndianParser.js\";\nimport RUMonthNameParser from \"./parsers/RUMonthNameParser.js\";\nimport RUTimeExpressionParser from \"./parsers/RUTimeExpressionParser.js\";\nimport RUTimeUnitAgoFormatParser from \"./parsers/RUTimeUnitAgoFormatParser.js\";\nimport RUMergeDateRangeRefiner from \"./refiners/RUMergeDateRangeRefiner.js\";\nimport RUMergeDateTimeRefiner from \"./refiners/RUMergeDateTimeRefiner.js\";\nimport { includeCommonConfiguration } from \"../../configurations.js\";\nimport RUCasualDateParser from \"./parsers/RUCasualDateParser.js\";\nimport RUCasualTimeParser from \"./parsers/RUCasualTimeParser.js\";\nimport RUWeekdayParser from \"./parsers/RUWeekdayParser.js\";\nimport RURelativeDateFormatParser from \"./parsers/RURelativeDateFormatParser.js\";\nimport { Chrono } from \"../../chrono.js\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results.js\";\nimport { Meridiem, Weekday } from \"../../types.js\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser.js\";\nimport RUTimeUnitCasualRelativeFormatParser from \"./parsers/RUTimeUnitCasualRelativeFormatParser.js\";\nexport { Chrono, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Meridiem, Weekday };\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration() {\n  const option = createConfiguration(false);\n  option.parsers.unshift(new RUCasualDateParser());\n  option.parsers.unshift(new RUCasualTimeParser());\n  option.parsers.unshift(new RUMonthNameParser());\n  option.parsers.unshift(new RURelativeDateFormatParser());\n  option.parsers.unshift(new RUTimeUnitCasualRelativeFormatParser());\n  return option;\n}\nexport function createConfiguration() {\n  let strictMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return includeCommonConfiguration({\n    parsers: [new SlashDateFormatParser(true), new RUTimeUnitWithinFormatParser(), new RUMonthNameLittleEndianParser(), new RUWeekdayParser(), new RUTimeExpressionParser(strictMode), new RUTimeUnitAgoFormatParser()],\n    refiners: [new RUMergeDateTimeRefiner(), new RUMergeDateRangeRefiner()]\n  }, strictMode);\n}","map":{"version":3,"names":["RUTimeUnitWithinFormatParser","RUMonthNameLittleEndianParser","RUMonthNameParser","RUTimeExpressionParser","RUTimeUnitAgoFormatParser","RUMergeDateRangeRefiner","RUMergeDateTimeRefiner","includeCommonConfiguration","RUCasualDateParser","RUCasualTimeParser","RUWeekdayParser","RURelativeDateFormatParser","Chrono","ParsingResult","ParsingComponents","ReferenceWithTimezone","Meridiem","Weekday","SlashDateFormatParser","RUTimeUnitCasualRelativeFormatParser","casual","createCasualConfiguration","strict","createConfiguration","parse","text","ref","option","parseDate","parsers","unshift","strictMode","arguments","length","undefined","refiners"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/node_modules/chrono-node/src/locales/ru/index.ts"],"sourcesContent":["/**\n * Chrono components for Russian support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport RUTimeUnitWithinFormatParser from \"./parsers/RUTimeUnitWithinFormatParser\";\nimport RUMonthNameLittleEndianParser from \"./parsers/RUMonthNameLittleEndianParser\";\nimport RUMonthNameParser from \"./parsers/RUMonthNameParser\";\nimport RUTimeExpressionParser from \"./parsers/RUTimeExpressionParser\";\nimport RUTimeUnitAgoFormatParser from \"./parsers/RUTimeUnitAgoFormatParser\";\nimport RUMergeDateRangeRefiner from \"./refiners/RUMergeDateRangeRefiner\";\nimport RUMergeDateTimeRefiner from \"./refiners/RUMergeDateTimeRefiner\";\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport RUCasualDateParser from \"./parsers/RUCasualDateParser\";\nimport RUCasualTimeParser from \"./parsers/RUCasualTimeParser\";\nimport RUWeekdayParser from \"./parsers/RUWeekdayParser\";\nimport RURelativeDateFormatParser from \"./parsers/RURelativeDateFormatParser\";\n\nimport { Chrono, Configuration, Parser, Refiner } from \"../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../types\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport RUTimeUnitCasualRelativeFormatParser from \"./parsers/RUTimeUnitCasualRelativeFormatParser\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n/**\n * Chrono object configured for parsing *casual* Russian\n */\nexport const casual = new Chrono(createCasualConfiguration());\n\n/**\n * Chrono object configured for parsing *strict* Russian\n */\nexport const strict = new Chrono(createConfiguration(true));\n\n/**\n * A shortcut for ru.casual.parse()\n */\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for ru.casual.parseDate()\n */\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * Create a default *casual* {@Link Configuration} for Russian chrono.\n * It calls {@Link createConfiguration} and includes additional parsers.\n */\nexport function createCasualConfiguration(): Configuration {\n    const option = createConfiguration(false);\n    option.parsers.unshift(new RUCasualDateParser());\n    option.parsers.unshift(new RUCasualTimeParser());\n    option.parsers.unshift(new RUMonthNameParser());\n    option.parsers.unshift(new RURelativeDateFormatParser());\n    option.parsers.unshift(new RUTimeUnitCasualRelativeFormatParser());\n    return option;\n}\n\n/**\n * Create a default {@Link Configuration} for Russian chrono\n *\n * @param strictMode If the timeunit mentioning should be strict, not casual\n */\nexport function createConfiguration(strictMode = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(true),\n                new RUTimeUnitWithinFormatParser(),\n                new RUMonthNameLittleEndianParser(),\n                new RUWeekdayParser(),\n                new RUTimeExpressionParser(strictMode),\n                new RUTimeUnitAgoFormatParser(),\n            ],\n            refiners: [new RUMergeDateTimeRefiner(), new RUMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n"],"mappings":"AAMA,OAAOA,4BAA4B,MAAM,2CAAyC;AAClF,OAAOC,6BAA6B,MAAM,4CAA0C;AACpF,OAAOC,iBAAiB,MAAM,gCAA8B;AAC5D,OAAOC,sBAAsB,MAAM,qCAAmC;AACtE,OAAOC,yBAAyB,MAAM,wCAAsC;AAC5E,OAAOC,uBAAuB,MAAM,uCAAqC;AACzE,OAAOC,sBAAsB,MAAM,sCAAoC;AAEvE,SAASC,0BAA0B,QAAQ,yBAAuB;AAClE,OAAOC,kBAAkB,MAAM,iCAA+B;AAC9D,OAAOC,kBAAkB,MAAM,iCAA+B;AAC9D,OAAOC,eAAe,MAAM,8BAA4B;AACxD,OAAOC,0BAA0B,MAAM,yCAAuC;AAE9E,SAASC,MAAM,QAAwC,iBAAe;AACtE,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB,QAAQ,kBAAgB;AACxF,SAAmEC,QAAQ,EAAEC,OAAO,QAAQ,gBAAc;AAC1G,OAAOC,qBAAqB,MAAM,+CAA6C;AAC/E,OAAOC,oCAAoC,MAAM,mDAAiD;AAElG,SAASP,MAAM,EAAmBC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB;AACzF,SAAmEC,QAAQ,EAAEC,OAAO;AAKpF,OAAO,MAAMG,MAAM,GAAG,IAAIR,MAAM,CAACS,yBAAyB,EAAE,CAAC;AAK7D,OAAO,MAAMC,MAAM,GAAG,IAAIV,MAAM,CAACW,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAK3D,OAAM,SAAUC,KAAKA,CAACC,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACrF,OAAOP,MAAM,CAACI,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC1C;AAKA,OAAM,SAAUC,SAASA,CAACH,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACzF,OAAOP,MAAM,CAACQ,SAAS,CAACH,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC9C;AAMA,OAAM,SAAUN,yBAAyBA,CAAA;EACrC,MAAMM,MAAM,GAAGJ,mBAAmB,CAAC,KAAK,CAAC;EACzCI,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,IAAItB,kBAAkB,EAAE,CAAC;EAChDmB,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,IAAIrB,kBAAkB,EAAE,CAAC;EAChDkB,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,IAAI5B,iBAAiB,EAAE,CAAC;EAC/CyB,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,IAAInB,0BAA0B,EAAE,CAAC;EACxDgB,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,IAAIX,oCAAoC,EAAE,CAAC;EAClE,OAAOQ,MAAM;AACjB;AAOA,OAAM,SAAUJ,mBAAmBA,CAAA,EAAkB;EAAA,IAAjBQ,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACjD,OAAOzB,0BAA0B,CAC7B;IACIsB,OAAO,EAAE,CACL,IAAIX,qBAAqB,CAAC,IAAI,CAAC,EAC/B,IAAIlB,4BAA4B,EAAE,EAClC,IAAIC,6BAA6B,EAAE,EACnC,IAAIS,eAAe,EAAE,EACrB,IAAIP,sBAAsB,CAAC4B,UAAU,CAAC,EACtC,IAAI3B,yBAAyB,EAAE,CAClC;IACD+B,QAAQ,EAAE,CAAC,IAAI7B,sBAAsB,EAAE,EAAE,IAAID,uBAAuB,EAAE;GACzE,EACD0B,UAAU,CACb;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}