{"ast":null,"code":"var _jsxFileName = \"/Users/mvikr/Projects/TaskApp/frontend/src/components/AddTaskForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Box, CircularProgress, Typography } from '@mui/material';\nimport { breakDownTask } from '../services/geminiService';\nimport { parseEstimatedTime, formatTotalTime } from '../utils/timeUtils';\nimport * as chrono from 'chrono-node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTaskForm = ({\n  onAddTask,\n  currentPrompt\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (title.trim()) {\n      setLoading(true);\n      setError('');\n      try {\n        const originalTitle = title.trim();\n\n        // Parse for dates\n        const parsedDateResult = chrono.parse(originalTitle);\n        let dueDate = null;\n        let titleForGemini = originalTitle;\n        if (parsedDateResult.length > 0) {\n          dueDate = parsedDateResult[0].start.date();\n          // Optional: Remove the date text from the title sent to Gemini if needed\n          // For now, send the original title to Gemini as it might use the context\n          // titleForGemini = originalTitle.replace(parsedDateResult[0].text, '').trim();\n        }\n\n        // Send potentially modified title (or original) to Gemini\n        const subTasks = await breakDownTask(titleForGemini, currentPrompt);\n\n        // Calculate total time\n        let totalMinutes = 0;\n        subTasks.forEach(subTask => {\n          totalMinutes += parseEstimatedTime(subTask.estimatedTime);\n        });\n\n        // Add 20% buffer\n        const totalMinutesWithBuffer = Math.round(totalMinutes * 1.2);\n        const totalEstimatedTimeString = formatTotalTime(totalMinutesWithBuffer);\n\n        // Pass structured data\n        onAddTask({\n          title: originalTitle,\n          subTasks,\n          totalEstimatedTime: totalEstimatedTimeString,\n          dueDate: dueDate\n        });\n        setTitle('');\n      } catch (err) {\n        setError('Failed to break down task. Please try again.');\n        console.error('Error:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    onSubmit: handleSubmit,\n    sx: {\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      label: \"Task\",\n      variant: \"outlined\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      placeholder: \"Enter a new task\",\n      sx: {\n        mb: 2\n      },\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      sx: {\n        mb: 1\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        fullWidth: true,\n        disabled: loading || !title.trim(),\n        startIcon: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 32\n        }, this) : undefined,\n        children: loading ? 'Breaking down task...' : 'AI Add'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        fullWidth: true,\n        disabled: loading || !title.trim(),\n        onClick: e => {\n          e.preventDefault();\n          const originalTitle = title.trim();\n          // Parse for dates\n          const parsedDateResult = chrono.parse(originalTitle);\n          let dueDate = null;\n          if (parsedDateResult.length > 0) {\n            dueDate = parsedDateResult[0].start.date();\n          }\n          onAddTask({\n            title: originalTitle,\n            subTasks: [],\n            totalEstimatedTime: '',\n            dueDate: dueDate\n          });\n          setTitle('');\n        },\n        children: \"Quick Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(AddTaskForm, \"iqXWCc+hFQ/An3w4zxtVopWwU+Y=\");\n_c = AddTaskForm;\nexport default AddTaskForm;\nvar _c;\n$RefreshReg$(_c, \"AddTaskForm\");","map":{"version":3,"names":["React","useState","TextField","Button","Box","CircularProgress","Typography","breakDownTask","parseEstimatedTime","formatTotalTime","chrono","jsxDEV","_jsxDEV","AddTaskForm","onAddTask","currentPrompt","_s","title","setTitle","loading","setLoading","error","setError","handleSubmit","e","preventDefault","trim","originalTitle","parsedDateResult","parse","dueDate","titleForGemini","length","start","date","subTasks","totalMinutes","forEach","subTask","estimatedTime","totalMinutesWithBuffer","Math","round","totalEstimatedTimeString","totalEstimatedTime","err","console","component","onSubmit","sx","mt","children","fullWidth","label","variant","value","onChange","target","placeholder","mb","disabled","fileName","_jsxFileName","lineNumber","columnNumber","color","display","gap","type","startIcon","size","undefined","onClick","_c","$RefreshReg$"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/components/AddTaskForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextField, Button, Box, CircularProgress, Typography } from '@mui/material';\nimport { breakDownTask, SubTask, TaskWithSubTasks, PromptSelection } from '../services/geminiService';\nimport { parseEstimatedTime, formatTotalTime, formatDate } from '../utils/timeUtils';\nimport * as chrono from 'chrono-node';\n\ninterface AddTaskFormProps {\n  onAddTask: (taskData: Omit<TaskWithSubTasks, 'id' | 'completed'>) => void;\n  currentPrompt: PromptSelection;\n  user?: any;\n}\n\n\nconst AddTaskForm: React.FC<AddTaskFormProps> = ({ onAddTask, currentPrompt }) => {\n  const [title, setTitle] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (title.trim()) {\n      setLoading(true);\n      setError('');\n      \n      try {\n        const originalTitle = title.trim();\n        \n        // Parse for dates\n        const parsedDateResult = chrono.parse(originalTitle);\n        let dueDate: Date | null = null;\n        let titleForGemini = originalTitle;\n\n        if (parsedDateResult.length > 0) {\n          dueDate = parsedDateResult[0].start.date();\n          // Optional: Remove the date text from the title sent to Gemini if needed\n          // For now, send the original title to Gemini as it might use the context\n          // titleForGemini = originalTitle.replace(parsedDateResult[0].text, '').trim();\n        }\n\n        // Send potentially modified title (or original) to Gemini\n        const subTasks = await breakDownTask(titleForGemini, currentPrompt); \n        \n        // Calculate total time\n        let totalMinutes = 0;\n        subTasks.forEach(subTask => {\n          totalMinutes += parseEstimatedTime(subTask.estimatedTime);\n        });\n\n        // Add 20% buffer\n        const totalMinutesWithBuffer = Math.round(totalMinutes * 1.2);\n        const totalEstimatedTimeString = formatTotalTime(totalMinutesWithBuffer);\n\n        // Pass structured data\n        onAddTask({\n          title: originalTitle, \n          subTasks, \n          totalEstimatedTime: totalEstimatedTimeString,\n          dueDate: dueDate\n        });\n\n        setTitle('');\n      } catch (err) {\n        setError('Failed to break down task. Please try again.');\n        console.error('Error:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\n      <TextField\n        fullWidth\n        label=\"Task\"\n        variant=\"outlined\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        placeholder=\"Enter a new task\"\n        sx={{ mb: 2 }}\n        disabled={loading}\n      />\n      {error && (\n        <Typography color=\"error\" sx={{ mb: 1 }}>\n          {error}\n        </Typography>\n      )}\n      <Box sx={{ display: 'flex', gap: 1 }}>\n        <Button \n          type=\"submit\" \n          variant=\"contained\" \n          color=\"primary\"\n          fullWidth\n          disabled={loading || !title.trim()}\n          startIcon={loading ? <CircularProgress size={20} /> : undefined}\n        >\n          {loading ? 'Breaking down task...' : 'AI Add'}\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          fullWidth\n          disabled={loading || !title.trim()}\n          onClick={(e) => {\n            e.preventDefault();\n            const originalTitle = title.trim();\n            // Parse for dates\n            const parsedDateResult = chrono.parse(originalTitle);\n            let dueDate: Date | null = null;\n            if (parsedDateResult.length > 0) {\n              dueDate = parsedDateResult[0].start.date();\n            }\n            onAddTask({\n              title: originalTitle,\n              subTasks: [],\n              totalEstimatedTime: '',\n              dueDate: dueDate\n            });\n            setTitle('');\n          }}\n        >\n          Quick Add\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddTaskForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}