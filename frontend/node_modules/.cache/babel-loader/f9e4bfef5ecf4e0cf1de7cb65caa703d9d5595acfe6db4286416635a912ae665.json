{"ast":null,"code":"import React,{useState}from'react';import{TextField,Button,Box,CircularProgress,Typography}from'@mui/material';import{breakDownTask}from'../services/geminiService';import{parseEstimatedTime,formatTotalTime}from'../utils/timeUtils';import*as chrono from'chrono-node';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AddTaskForm=_ref=>{let{onAddTask,currentPrompt}=_ref;const[title,setTitle]=useState('');const[loading,setLoading]=useState(false);const[error,setError]=useState('');const handleSubmit=async e=>{e.preventDefault();if(title.trim()){setLoading(true);setError('');try{const originalTitle=title.trim();// Parse for dates\nconst parsedDateResult=chrono.parse(originalTitle);let dueDate=null;let titleForGemini=originalTitle;if(parsedDateResult.length>0){dueDate=parsedDateResult[0].start.date();// Optional: Remove the date text from the title sent to Gemini if needed\n// For now, send the original title to Gemini as it might use the context\n// titleForGemini = originalTitle.replace(parsedDateResult[0].text, '').trim();\n}// Send potentially modified title (or original) to Gemini\nconst subTasks=await breakDownTask(titleForGemini,currentPrompt);// Calculate total time\nlet totalMinutes=0;subTasks.forEach(subTask=>{totalMinutes+=parseEstimatedTime(subTask.estimatedTime);});// Add 20% buffer\nconst totalMinutesWithBuffer=Math.round(totalMinutes*1.2);const totalEstimatedTimeString=formatTotalTime(totalMinutesWithBuffer);// Pass structured data\nonAddTask({title:originalTitle,subTasks,totalEstimatedTime:totalEstimatedTimeString,dueDate:dueDate});setTitle('');}catch(err){setError('Failed to break down task. Please try again.');console.error('Error:',err);}finally{setLoading(false);}}};return/*#__PURE__*/_jsxs(Box,{component:\"form\",onSubmit:handleSubmit,sx:{mt:2},children:[/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Task\",variant:\"outlined\",value:title,onChange:e=>setTitle(e.target.value),placeholder:\"Enter a new task\",sx:{mb:2},disabled:loading}),error&&/*#__PURE__*/_jsx(Typography,{color:\"error\",sx:{mb:1},children:error}),/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',gap:1},children:[/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"contained\",color:\"primary\",fullWidth:true,disabled:loading||!title.trim(),startIcon:loading?/*#__PURE__*/_jsx(CircularProgress,{size:20}):undefined,children:loading?'Breaking down task...':'AI Add'}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"secondary\",fullWidth:true,disabled:loading||!title.trim(),onClick:e=>{e.preventDefault();const originalTitle=title.trim();// Parse for dates\nconst parsedDateResult=chrono.parse(originalTitle);let dueDate=null;if(parsedDateResult.length>0){dueDate=parsedDateResult[0].start.date();}onAddTask({title:originalTitle,subTasks:[],totalEstimatedTime:'',dueDate:dueDate});setTitle('');},children:\"Quick Add\"})]})]});};export default AddTaskForm;","map":{"version":3,"names":["React","useState","TextField","Button","Box","CircularProgress","Typography","breakDownTask","parseEstimatedTime","formatTotalTime","chrono","jsx","_jsx","jsxs","_jsxs","AddTaskForm","_ref","onAddTask","currentPrompt","title","setTitle","loading","setLoading","error","setError","handleSubmit","e","preventDefault","trim","originalTitle","parsedDateResult","parse","dueDate","titleForGemini","length","start","date","subTasks","totalMinutes","forEach","subTask","estimatedTime","totalMinutesWithBuffer","Math","round","totalEstimatedTimeString","totalEstimatedTime","err","console","component","onSubmit","sx","mt","children","fullWidth","label","variant","value","onChange","target","placeholder","mb","disabled","color","display","gap","type","startIcon","size","undefined","onClick"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/components/AddTaskForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextField, Button, Box, CircularProgress, Typography } from '@mui/material';\nimport { breakDownTask, SubTask, TaskWithSubTasks, PromptSelection } from '../services/geminiService';\nimport { parseEstimatedTime, formatTotalTime, formatDate } from '../utils/timeUtils';\nimport * as chrono from 'chrono-node';\n\ninterface AddTaskFormProps {\n  onAddTask: (taskData: Omit<TaskWithSubTasks, 'id' | 'completed'>) => void;\n  currentPrompt: PromptSelection;\n  user?: any;\n}\n\n\nconst AddTaskForm: React.FC<AddTaskFormProps> = ({ onAddTask, currentPrompt }) => {\n  const [title, setTitle] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (title.trim()) {\n      setLoading(true);\n      setError('');\n      \n      try {\n        const originalTitle = title.trim();\n        \n        // Parse for dates\n        const parsedDateResult = chrono.parse(originalTitle);\n        let dueDate: Date | null = null;\n        let titleForGemini = originalTitle;\n\n        if (parsedDateResult.length > 0) {\n          dueDate = parsedDateResult[0].start.date();\n          // Optional: Remove the date text from the title sent to Gemini if needed\n          // For now, send the original title to Gemini as it might use the context\n          // titleForGemini = originalTitle.replace(parsedDateResult[0].text, '').trim();\n        }\n\n        // Send potentially modified title (or original) to Gemini\n        const subTasks = await breakDownTask(titleForGemini, currentPrompt); \n        \n        // Calculate total time\n        let totalMinutes = 0;\n        subTasks.forEach(subTask => {\n          totalMinutes += parseEstimatedTime(subTask.estimatedTime);\n        });\n\n        // Add 20% buffer\n        const totalMinutesWithBuffer = Math.round(totalMinutes * 1.2);\n        const totalEstimatedTimeString = formatTotalTime(totalMinutesWithBuffer);\n\n        // Pass structured data\n        onAddTask({\n          title: originalTitle, \n          subTasks, \n          totalEstimatedTime: totalEstimatedTimeString,\n          dueDate: dueDate\n        });\n\n        setTitle('');\n      } catch (err) {\n        setError('Failed to break down task. Please try again.');\n        console.error('Error:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\n      <TextField\n        fullWidth\n        label=\"Task\"\n        variant=\"outlined\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        placeholder=\"Enter a new task\"\n        sx={{ mb: 2 }}\n        disabled={loading}\n      />\n      {error && (\n        <Typography color=\"error\" sx={{ mb: 1 }}>\n          {error}\n        </Typography>\n      )}\n      <Box sx={{ display: 'flex', gap: 1 }}>\n        <Button \n          type=\"submit\" \n          variant=\"contained\" \n          color=\"primary\"\n          fullWidth\n          disabled={loading || !title.trim()}\n          startIcon={loading ? <CircularProgress size={20} /> : undefined}\n        >\n          {loading ? 'Breaking down task...' : 'AI Add'}\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          fullWidth\n          disabled={loading || !title.trim()}\n          onClick={(e) => {\n            e.preventDefault();\n            const originalTitle = title.trim();\n            // Parse for dates\n            const parsedDateResult = chrono.parse(originalTitle);\n            let dueDate: Date | null = null;\n            if (parsedDateResult.length > 0) {\n              dueDate = parsedDateResult[0].start.date();\n            }\n            onAddTask({\n              title: originalTitle,\n              subTasks: [],\n              totalEstimatedTime: '',\n              dueDate: dueDate\n            });\n            setTitle('');\n          }}\n        >\n          Quick Add\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddTaskForm;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,SAAS,CAAEC,MAAM,CAAEC,GAAG,CAAEC,gBAAgB,CAAEC,UAAU,KAAQ,eAAe,CACpF,OAASC,aAAa,KAAoD,2BAA2B,CACrG,OAASC,kBAAkB,CAAEC,eAAe,KAAoB,oBAAoB,CACpF,MAAO,GAAK,CAAAC,MAAM,KAAM,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAStC,KAAM,CAAAC,WAAuC,CAAGC,IAAA,EAAkC,IAAjC,CAAEC,SAAS,CAAEC,aAAc,CAAC,CAAAF,IAAA,CAC3E,KAAM,CAACG,KAAK,CAAEC,QAAQ,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACoB,OAAO,CAAEC,UAAU,CAAC,CAAGrB,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACsB,KAAK,CAAEC,QAAQ,CAAC,CAAGvB,QAAQ,CAAC,EAAE,CAAC,CAEtC,KAAM,CAAAwB,YAAY,CAAG,KAAO,CAAAC,CAAkB,EAAK,CACjDA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,GAAIR,KAAK,CAACS,IAAI,CAAC,CAAC,CAAE,CAChBN,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,EAAE,CAAC,CAEZ,GAAI,CACF,KAAM,CAAAK,aAAa,CAAGV,KAAK,CAACS,IAAI,CAAC,CAAC,CAElC;AACA,KAAM,CAAAE,gBAAgB,CAAGpB,MAAM,CAACqB,KAAK,CAACF,aAAa,CAAC,CACpD,GAAI,CAAAG,OAAoB,CAAG,IAAI,CAC/B,GAAI,CAAAC,cAAc,CAAGJ,aAAa,CAElC,GAAIC,gBAAgB,CAACI,MAAM,CAAG,CAAC,CAAE,CAC/BF,OAAO,CAAGF,gBAAgB,CAAC,CAAC,CAAC,CAACK,KAAK,CAACC,IAAI,CAAC,CAAC,CAC1C;AACA;AACA;AACF,CAEA;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA9B,aAAa,CAAC0B,cAAc,CAAEf,aAAa,CAAC,CAEnE;AACA,GAAI,CAAAoB,YAAY,CAAG,CAAC,CACpBD,QAAQ,CAACE,OAAO,CAACC,OAAO,EAAI,CAC1BF,YAAY,EAAI9B,kBAAkB,CAACgC,OAAO,CAACC,aAAa,CAAC,CAC3D,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,sBAAsB,CAAGC,IAAI,CAACC,KAAK,CAACN,YAAY,CAAG,GAAG,CAAC,CAC7D,KAAM,CAAAO,wBAAwB,CAAGpC,eAAe,CAACiC,sBAAsB,CAAC,CAExE;AACAzB,SAAS,CAAC,CACRE,KAAK,CAAEU,aAAa,CACpBQ,QAAQ,CACRS,kBAAkB,CAAED,wBAAwB,CAC5Cb,OAAO,CAAEA,OACX,CAAC,CAAC,CAEFZ,QAAQ,CAAC,EAAE,CAAC,CACd,CAAE,MAAO2B,GAAG,CAAE,CACZvB,QAAQ,CAAC,8CAA8C,CAAC,CACxDwB,OAAO,CAACzB,KAAK,CAAC,QAAQ,CAAEwB,GAAG,CAAC,CAC9B,CAAC,OAAS,CACRzB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CACF,CAAC,CAED,mBACER,KAAA,CAACV,GAAG,EAAC6C,SAAS,CAAC,MAAM,CAACC,QAAQ,CAAEzB,YAAa,CAAC0B,EAAE,CAAE,CAAEC,EAAE,CAAE,CAAE,CAAE,CAAAC,QAAA,eAC1DzC,IAAA,CAACV,SAAS,EACRoD,SAAS,MACTC,KAAK,CAAC,MAAM,CACZC,OAAO,CAAC,UAAU,CAClBC,KAAK,CAAEtC,KAAM,CACbuC,QAAQ,CAAGhC,CAAC,EAAKN,QAAQ,CAACM,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE,CAC1CG,WAAW,CAAC,kBAAkB,CAC9BT,EAAE,CAAE,CAAEU,EAAE,CAAE,CAAE,CAAE,CACdC,QAAQ,CAAEzC,OAAQ,CACnB,CAAC,CACDE,KAAK,eACJX,IAAA,CAACN,UAAU,EAACyD,KAAK,CAAC,OAAO,CAACZ,EAAE,CAAE,CAAEU,EAAE,CAAE,CAAE,CAAE,CAAAR,QAAA,CACrC9B,KAAK,CACI,CACb,cACDT,KAAA,CAACV,GAAG,EAAC+C,EAAE,CAAE,CAAEa,OAAO,CAAE,MAAM,CAAEC,GAAG,CAAE,CAAE,CAAE,CAAAZ,QAAA,eACnCzC,IAAA,CAACT,MAAM,EACL+D,IAAI,CAAC,QAAQ,CACbV,OAAO,CAAC,WAAW,CACnBO,KAAK,CAAC,SAAS,CACfT,SAAS,MACTQ,QAAQ,CAAEzC,OAAO,EAAI,CAACF,KAAK,CAACS,IAAI,CAAC,CAAE,CACnCuC,SAAS,CAAE9C,OAAO,cAAGT,IAAA,CAACP,gBAAgB,EAAC+D,IAAI,CAAE,EAAG,CAAE,CAAC,CAAGC,SAAU,CAAAhB,QAAA,CAE/DhC,OAAO,CAAG,uBAAuB,CAAG,QAAQ,CACvC,CAAC,cACTT,IAAA,CAACT,MAAM,EACLqD,OAAO,CAAC,UAAU,CAClBO,KAAK,CAAC,WAAW,CACjBT,SAAS,MACTQ,QAAQ,CAAEzC,OAAO,EAAI,CAACF,KAAK,CAACS,IAAI,CAAC,CAAE,CACnC0C,OAAO,CAAG5C,CAAC,EAAK,CACdA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,KAAM,CAAAE,aAAa,CAAGV,KAAK,CAACS,IAAI,CAAC,CAAC,CAClC;AACA,KAAM,CAAAE,gBAAgB,CAAGpB,MAAM,CAACqB,KAAK,CAACF,aAAa,CAAC,CACpD,GAAI,CAAAG,OAAoB,CAAG,IAAI,CAC/B,GAAIF,gBAAgB,CAACI,MAAM,CAAG,CAAC,CAAE,CAC/BF,OAAO,CAAGF,gBAAgB,CAAC,CAAC,CAAC,CAACK,KAAK,CAACC,IAAI,CAAC,CAAC,CAC5C,CACAnB,SAAS,CAAC,CACRE,KAAK,CAAEU,aAAa,CACpBQ,QAAQ,CAAE,EAAE,CACZS,kBAAkB,CAAE,EAAE,CACtBd,OAAO,CAAEA,OACX,CAAC,CAAC,CACFZ,QAAQ,CAAC,EAAE,CAAC,CACd,CAAE,CAAAiC,QAAA,CACH,WAED,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAtC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}