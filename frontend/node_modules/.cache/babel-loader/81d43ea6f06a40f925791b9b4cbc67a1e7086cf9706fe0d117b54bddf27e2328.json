{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nif (!GEMINI_API_KEY) {\n  throw new Error(\"Gemini API key (REACT_APP_GEMINI_API_KEY) is not defined in the environment variables.\");\n}\nexport const geminiService = new GoogleGenerativeAI(GEMINI_API_KEY);\nexport async function breakDownTask(taskTitle) {\n  try {\n    const genAI = geminiService; // Use the initialized service\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\" // Changed model name\n    });\n    const prompt = `\n    When I provide a task, generate a set of context-specific sub-tasks that guide me through completion. \n    The sub-tasks should be clear and actionable without being overly detailed, covering essential steps like preparation, execution, and review. \n    Tailor the sub-tasks to the nature of the main task, such as cooking, writing, crafting, or organizing, etc.\n\n    Also provide a rough estimate of how long each sub-task would take to complete in minutes.\n    \n    Task: ${taskTitle}\n    \n    Format your response strictly as JSON with this structure:\n    [\n      {\n        \"title\": \"Sub-task description\",\n        \"estimatedTime\": \"X minutes\"\n      }\n    ]\n    `;\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    let text = await response.text();\n\n    // Clean the response text: remove markdown fences\n    text = text.replace(/```json\\n?|```/g, '').trim();\n    console.log(\"Cleaned Gemini Response:\", text); // Log the cleaned text\n\n    let parsedSubtasks;\n    try {\n      parsedSubtasks = JSON.parse(text);\n      // Add unique IDs to subtasks\n      parsedSubtasks = parsedSubtasks.map(subtask => ({\n        ...subtask,\n        id: Date.now().toString() + Math.random().toString(36).substring(2, 9),\n        completed: false\n      }));\n    } catch (parseError) {\n      console.error(\"Failed to parse Gemini response:\", parseError, \"Raw text:\", text);\n      throw new Error('Failed to parse task breakdown response');\n    }\n    console.log(\"Parsed Subtasks:\", parsedSubtasks);\n    return parsedSubtasks;\n  } catch (error) {\n    console.error(\"Error breaking down task:\", error);\n    throw new Error('Failed to break down task'); // Re-throw a generic error for the UI\n  }\n}","map":{"version":3,"names":["GoogleGenerativeAI","GEMINI_API_KEY","process","env","REACT_APP_GEMINI_API_KEY","Error","geminiService","breakDownTask","taskTitle","genAI","model","getGenerativeModel","prompt","result","generateContent","response","text","replace","trim","console","log","parsedSubtasks","JSON","parse","map","subtask","id","Date","now","toString","Math","random","substring","completed","parseError","error"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from \"@google/generative-ai\";\n\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\nif (!GEMINI_API_KEY) {\n  throw new Error(\"Gemini API key (REACT_APP_GEMINI_API_KEY) is not defined in the environment variables.\");\n}\n\nexport const geminiService = new GoogleGenerativeAI(GEMINI_API_KEY);\n\nexport interface SubTask {\n  id: string;\n  title: string;\n  completed: boolean;\n  estimatedTime?: string; // Optional estimated time\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\nexport interface TaskWithSubTasks extends Task {\n  subTasks: SubTask[];\n}\n\nexport async function breakDownTask(taskTitle: string): Promise<SubTask[]> {\n  try {\n    const genAI = geminiService; // Use the initialized service\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\", // Changed model name\n    });\n\n    const prompt = `\n    When I provide a task, generate a set of context-specific sub-tasks that guide me through completion. \n    The sub-tasks should be clear and actionable without being overly detailed, covering essential steps like preparation, execution, and review. \n    Tailor the sub-tasks to the nature of the main task, such as cooking, writing, crafting, or organizing, etc.\n\n    Also provide a rough estimate of how long each sub-task would take to complete in minutes.\n    \n    Task: ${taskTitle}\n    \n    Format your response strictly as JSON with this structure:\n    [\n      {\n        \"title\": \"Sub-task description\",\n        \"estimatedTime\": \"X minutes\"\n      }\n    ]\n    `;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    let text = await response.text();\n\n    // Clean the response text: remove markdown fences\n    text = text.replace(/```json\\n?|```/g, '').trim();\n\n    console.log(\"Cleaned Gemini Response:\", text); // Log the cleaned text\n\n    let parsedSubtasks: SubTask[];\n    try {\n      parsedSubtasks = JSON.parse(text);\n      // Add unique IDs to subtasks\n      parsedSubtasks = parsedSubtasks.map(subtask => ({ ...subtask, id: Date.now().toString() + Math.random().toString(36).substring(2, 9), completed: false }));\n    } catch (parseError) {\n      console.error(\"Failed to parse Gemini response:\", parseError, \"Raw text:\", text);\n      throw new Error('Failed to parse task breakdown response');\n    }\n\n    console.log(\"Parsed Subtasks:\", parsedSubtasks);\n    return parsedSubtasks;\n  } catch (error) {\n    console.error(\"Error breaking down task:\", error);\n    throw new Error('Failed to break down task'); // Re-throw a generic error for the UI\n  }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAA0C,uBAAuB;AAE5F,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAE3D,IAAI,CAACH,cAAc,EAAE;EACnB,MAAM,IAAII,KAAK,CAAC,wFAAwF,CAAC;AAC3G;AAEA,OAAO,MAAMC,aAAa,GAAG,IAAIN,kBAAkB,CAACC,cAAc,CAAC;AAmBnE,OAAO,eAAeM,aAAaA,CAACC,SAAiB,EAAsB;EACzE,IAAI;IACF,MAAMC,KAAK,GAAGH,aAAa,CAAC,CAAC;IAC7B,MAAMI,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;MACrCD,KAAK,EAAE,kBAAkB,CAAE;IAC7B,CAAC,CAAC;IAEF,MAAME,MAAM,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,YAAYJ,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMK,MAAM,GAAG,MAAMH,KAAK,CAACI,eAAe,CAACF,MAAM,CAAC;IAClD,MAAMG,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;IACtC,IAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAI,CAAC,CAAC;;IAEhC;IACAA,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;IAEjDC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEJ,IAAI,CAAC,CAAC,CAAC;;IAE/C,IAAIK,cAAyB;IAC7B,IAAI;MACFA,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACP,IAAI,CAAC;MACjC;MACAK,cAAc,GAAGA,cAAc,CAACG,GAAG,CAACC,OAAO,KAAK;QAAE,GAAGA,OAAO;QAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACF,QAAQ,CAAC,EAAE,CAAC,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC;IAC5J,CAAC,CAAC,OAAOC,UAAU,EAAE;MACnBf,OAAO,CAACgB,KAAK,CAAC,kCAAkC,EAAED,UAAU,EAAE,WAAW,EAAElB,IAAI,CAAC;MAChF,MAAM,IAAIX,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEAc,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,cAAc,CAAC;IAC/C,OAAOA,cAAc;EACvB,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAM,IAAI9B,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;EAChD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}