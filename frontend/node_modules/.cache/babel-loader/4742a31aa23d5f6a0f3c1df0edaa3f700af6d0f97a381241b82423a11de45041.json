{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst TABLE_NAME = 'tasks';\nexport async function fetchUserTasks(userId) {\n  const {\n    data,\n    error\n  } = await supabase.from(TABLE_NAME).select('*').eq('user_id', userId);\n  if (error) throw error;\n  return data || [];\n}\nexport async function upsertUserTasks(userId, tasks) {\n  // Attach user_id to each task\n  const tasksWithUser = tasks.map(task => ({\n    ...task,\n    user_id: userId\n  }));\n  const {\n    error\n  } = await supabase.from(TABLE_NAME).upsert(tasksWithUser, {\n    onConflict: 'id'\n  });\n  if (error) throw error;\n}\nexport async function deleteUserTasks(userId) {\n  const {\n    error\n  } = await supabase.from(TABLE_NAME).delete().eq('user_id', userId);\n  if (error) throw error;\n}","map":{"version":3,"names":["supabase","TABLE_NAME","fetchUserTasks","userId","data","error","from","select","eq","upsertUserTasks","tasks","tasksWithUser","map","task","user_id","upsert","onConflict","deleteUserTasks","delete"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/services/supabaseTasksService.ts"],"sourcesContent":["import { supabase } from './supabaseClient';\nimport { TaskWithSubTasks } from './geminiService';\n\nconst TABLE_NAME = 'tasks';\n\nexport async function fetchUserTasks(userId: string): Promise<TaskWithSubTasks[]> {\n  const { data, error } = await supabase\n    .from(TABLE_NAME)\n    .select('*')\n    .eq('user_id', userId);\n  if (error) throw error;\n  return data || [];\n}\n\nexport async function upsertUserTasks(userId: string, tasks: TaskWithSubTasks[]) {\n  // Attach user_id to each task\n  const tasksWithUser = tasks.map(task => ({ ...task, user_id: userId }));\n  const { error } = await supabase\n    .from(TABLE_NAME)\n    .upsert(tasksWithUser, { onConflict: 'id' });\n  if (error) throw error;\n}\n\nexport async function deleteUserTasks(userId: string) {\n  const { error } = await supabase\n    .from(TABLE_NAME)\n    .delete()\n    .eq('user_id', userId);\n  if (error) throw error;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAG3C,MAAMC,UAAU,GAAG,OAAO;AAE1B,OAAO,eAAeC,cAAcA,CAACC,MAAc,EAA+B;EAChF,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAACL,UAAU,CAAC,CAChBM,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAEL,MAAM,CAAC;EACxB,IAAIE,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAOD,IAAI,IAAI,EAAE;AACnB;AAEA,OAAO,eAAeK,eAAeA,CAACN,MAAc,EAAEO,KAAyB,EAAE;EAC/E;EACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,GAAG,CAACC,IAAI,KAAK;IAAE,GAAGA,IAAI;IAAEC,OAAO,EAAEX;EAAO,CAAC,CAAC,CAAC;EACvE,MAAM;IAAEE;EAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAACL,UAAU,CAAC,CAChBc,MAAM,CAACJ,aAAa,EAAE;IAAEK,UAAU,EAAE;EAAK,CAAC,CAAC;EAC9C,IAAIX,KAAK,EAAE,MAAMA,KAAK;AACxB;AAEA,OAAO,eAAeY,eAAeA,CAACd,MAAc,EAAE;EACpD,MAAM;IAAEE;EAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAACL,UAAU,CAAC,CAChBiB,MAAM,CAAC,CAAC,CACRV,EAAE,CAAC,SAAS,EAAEL,MAAM,CAAC;EACxB,IAAIE,KAAK,EAAE,MAAMA,KAAK;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}