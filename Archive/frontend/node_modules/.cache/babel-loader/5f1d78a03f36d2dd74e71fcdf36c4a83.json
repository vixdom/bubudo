{"ast":null,"code":"var _jsxFileName = \"/Users/mvikr/Projects/TaskApp/frontend/src/context/TaskContext.tsx\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nconst TaskContext = createContext(undefined);\nexport const TaskProvider = ({\n  children\n}) => {\n  const [tasks, setTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n\n  // Helper function to make authenticated API requests\n  const apiRequest = async (endpoint, options = {}) => {\n    const token = localStorage.getItem('accessToken');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await fetch(`${process.env.REACT_APP_API_URL}${endpoint}`, {\n      ...options,\n      headers: {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'API request failed');\n    }\n    return response.json();\n  };\n\n  // Fetch all tasks for the current user\n  const fetchTasks = async () => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiRequest('/api/tasks');\n      setTasks(data);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch tasks');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch a single task by ID\n  const fetchTask = async id => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiRequest(`/api/tasks/${id}`);\n      setCurrentTask(data);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create a new task\n  const createTask = async (title, description = '', dueDate, priority = 'medium') => {\n    if (!user) return null;\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiRequest('/api/tasks', {\n        method: 'POST',\n        body: JSON.stringify({\n          title,\n          description,\n          dueDate,\n          priority\n        })\n      });\n      setTasks(prev => [data, ...prev]);\n      return data;\n    } catch (err) {\n      setError(err.message || 'Failed to create task');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update a task\n  const updateTask = async (id, updates) => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiRequest(`/api/tasks/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(updates)\n      });\n\n      // Update tasks list\n      setTasks(prev => prev.map(task => task.id === id ? data : task));\n\n      // Update current task if it's the one being edited\n      if (currentTask && currentTask.id === id) {\n        setCurrentTask(data);\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to update task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async id => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      await apiRequest(`/api/tasks/${id}`, {\n        method: 'DELETE'\n      });\n\n      // Remove task from list\n      setTasks(prev => prev.filter(task => task.id !== id));\n\n      // Clear current task if it's the one being deleted\n      if (currentTask && currentTask.id === id) {\n        setCurrentTask(null);\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to delete task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Generate subtasks using AI\n  const generateSubtasks = async taskId => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiRequest(`/api/tasks/${taskId}/breakdown`, {\n        method: 'POST'\n      });\n\n      // Update tasks list with new subtasks\n      setTasks(prev => prev.map(task => {\n        if (task.id === taskId) {\n          return {\n            ...task,\n            subtasks: data.subtasks\n          };\n        }\n        return task;\n      }));\n\n      // Update current task if it's the one being processed\n      if (currentTask && currentTask.id === taskId) {\n        setCurrentTask({\n          ...currentTask,\n          subtasks: data.subtasks\n        });\n      }\n      return data.tip; // Return the AI-generated tip\n    } catch (err) {\n      setError(err.message || 'Failed to generate subtasks');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update a subtask\n  const updateSubtask = async (taskId, subtaskId, updates) => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiRequest(`/api/tasks/${taskId}/subtasks/${subtaskId}`, {\n        method: 'PUT',\n        body: JSON.stringify(updates)\n      });\n\n      // Update the subtask in the tasks list\n      setTasks(prev => prev.map(task => {\n        if (task.id === taskId && task.subtasks) {\n          return {\n            ...task,\n            subtasks: task.subtasks.map(subtask => subtask.id === subtaskId ? data : subtask)\n          };\n        }\n        return task;\n      }));\n\n      // Update current task if it's the one containing the subtask\n      if (currentTask && currentTask.id === taskId && currentTask.subtasks) {\n        setCurrentTask({\n          ...currentTask,\n          subtasks: currentTask.subtasks.map(subtask => subtask.id === subtaskId ? data : subtask)\n        });\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to update subtask');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a subtask\n  const deleteSubtask = async (taskId, subtaskId) => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      await apiRequest(`/api/tasks/${taskId}/subtasks/${subtaskId}`, {\n        method: 'DELETE'\n      });\n\n      // Remove the subtask from the tasks list\n      setTasks(prev => prev.map(task => {\n        if (task.id === taskId && task.subtasks) {\n          return {\n            ...task,\n            subtasks: task.subtasks.filter(subtask => subtask.id !== subtaskId)\n          };\n        }\n        return task;\n      }));\n\n      // Update current task if it's the one containing the subtask\n      if (currentTask && currentTask.id === taskId && currentTask.subtasks) {\n        setCurrentTask({\n          ...currentTask,\n          subtasks: currentTask.subtasks.filter(subtask => subtask.id !== subtaskId)\n        });\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to delete subtask');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load tasks when user changes\n  useEffect(() => {\n    if (user) {\n      fetchTasks();\n    } else {\n      setTasks([]);\n      setCurrentTask(null);\n    }\n  }, [user]);\n  return /*#__PURE__*/React.createElement(TaskContext.Provider, {\n    value: {\n      tasks,\n      currentTask,\n      loading,\n      error,\n      fetchTasks,\n      fetchTask,\n      createTask,\n      updateTask,\n      deleteTask,\n      generateSubtasks,\n      updateSubtask,\n      deleteSubtask\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useTask = () => {\n  const context = useContext(TaskContext);\n  if (context === undefined) {\n    throw new Error('useTask must be used within a TaskProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","TaskContext","undefined","TaskProvider","children","tasks","setTasks","currentTask","setCurrentTask","loading","setLoading","error","setError","user","apiRequest","endpoint","options","token","localStorage","getItem","Error","response","fetch","process","env","REACT_APP_API_URL","headers","ok","errorData","json","message","fetchTasks","data","err","fetchTask","id","createTask","title","description","dueDate","priority","method","body","JSON","stringify","prev","updateTask","updates","map","task","deleteTask","filter","generateSubtasks","taskId","subtasks","tip","updateSubtask","subtaskId","subtask","deleteSubtask","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTask","context"],"sources":["/Users/mvikr/Projects/TaskApp/frontend/src/context/TaskContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\n\ninterface Subtask {\n  id: string;\n  title: string;\n  link: string | null;\n  status: 'pending' | 'in-progress' | 'completed';\n  task_id: string;\n  created_at: string;\n  completed_at?: string;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  status: 'pending' | 'in-progress' | 'completed';\n  priority: 'low' | 'medium' | 'high';\n  due_date?: string;\n  user_id: string;\n  created_at: string;\n  completed_at?: string;\n  subtasks?: Subtask[];\n}\n\ninterface TaskContextType {\n  tasks: Task[];\n  currentTask: Task | null;\n  loading: boolean;\n  error: string | null;\n  fetchTasks: () => Promise<void>;\n  fetchTask: (id: string) => Promise<void>;\n  createTask: (title: string, description?: string, dueDate?: string, priority?: 'low' | 'medium' | 'high') => Promise<Task | null>;\n  updateTask: (id: string, updates: Partial<Task>) => Promise<void>;\n  deleteTask: (id: string) => Promise<void>;\n  generateSubtasks: (taskId: string) => Promise<void>;\n  updateSubtask: (taskId: string, subtaskId: string, updates: Partial<Subtask>) => Promise<void>;\n  deleteSubtask: (taskId: string, subtaskId: string) => Promise<void>;\n}\n\nconst TaskContext = createContext<TaskContextType | undefined>(undefined);\n\nexport const TaskProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [currentTask, setCurrentTask] = useState<Task | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  // Helper function to make authenticated API requests\n  const apiRequest = async (endpoint: string, options: RequestInit = {}) => {\n    const token = localStorage.getItem('accessToken');\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await fetch(`${process.env.REACT_APP_API_URL}${endpoint}`, {\n      ...options,\n      headers: {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'API request failed');\n    }\n    \n    return response.json();\n  };\n\n  // Fetch all tasks for the current user\n  const fetchTasks = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const data = await apiRequest('/api/tasks');\n      setTasks(data);\n    } catch (err: any) {\n      setError(err.message || 'Failed to fetch tasks');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch a single task by ID\n  const fetchTask = async (id: string) => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const data = await apiRequest(`/api/tasks/${id}`);\n      setCurrentTask(data);\n    } catch (err: any) {\n      setError(err.message || 'Failed to fetch task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create a new task\n  const createTask = async (\n    title: string,\n    description: string = '',\n    dueDate?: string,\n    priority: 'low' | 'medium' | 'high' = 'medium'\n  ): Promise<Task | null> => {\n    if (!user) return null;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const data = await apiRequest('/api/tasks', {\n        method: 'POST',\n        body: JSON.stringify({\n          title,\n          description,\n          dueDate,\n          priority\n        })\n      });\n      \n      setTasks(prev => [data, ...prev]);\n      return data;\n    } catch (err: any) {\n      setError(err.message || 'Failed to create task');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update a task\n  const updateTask = async (id: string, updates: Partial<Task>) => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const data = await apiRequest(`/api/tasks/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(updates)\n      });\n      \n      // Update tasks list\n      setTasks(prev => prev.map(task => task.id === id ? data : task));\n      \n      // Update current task if it's the one being edited\n      if (currentTask && currentTask.id === id) {\n        setCurrentTask(data);\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to update task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async (id: string) => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      await apiRequest(`/api/tasks/${id}`, {\n        method: 'DELETE'\n      });\n      \n      // Remove task from list\n      setTasks(prev => prev.filter(task => task.id !== id));\n      \n      // Clear current task if it's the one being deleted\n      if (currentTask && currentTask.id === id) {\n        setCurrentTask(null);\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Generate subtasks using AI\n  const generateSubtasks = async (taskId: string) => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const data = await apiRequest(`/api/tasks/${taskId}/breakdown`, {\n        method: 'POST'\n      });\n      \n      // Update tasks list with new subtasks\n      setTasks(prev => prev.map(task => {\n        if (task.id === taskId) {\n          return {\n            ...task,\n            subtasks: data.subtasks\n          };\n        }\n        return task;\n      }));\n      \n      // Update current task if it's the one being processed\n      if (currentTask && currentTask.id === taskId) {\n        setCurrentTask({\n          ...currentTask,\n          subtasks: data.subtasks\n        });\n      }\n      \n      return data.tip; // Return the AI-generated tip\n    } catch (err: any) {\n      setError(err.message || 'Failed to generate subtasks');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update a subtask\n  const updateSubtask = async (taskId: string, subtaskId: string, updates: Partial<Subtask>) => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const data = await apiRequest(`/api/tasks/${taskId}/subtasks/${subtaskId}`, {\n        method: 'PUT',\n        body: JSON.stringify(updates)\n      });\n      \n      // Update the subtask in the tasks list\n      setTasks(prev => prev.map(task => {\n        if (task.id === taskId && task.subtasks) {\n          return {\n            ...task,\n            subtasks: task.subtasks.map(subtask => \n              subtask.id === subtaskId ? data : subtask\n            )\n          };\n        }\n        return task;\n      }));\n      \n      // Update current task if it's the one containing the subtask\n      if (currentTask && currentTask.id === taskId && currentTask.subtasks) {\n        setCurrentTask({\n          ...currentTask,\n          subtasks: currentTask.subtasks.map(subtask => \n            subtask.id === subtaskId ? data : subtask\n          )\n        });\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to update subtask');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a subtask\n  const deleteSubtask = async (taskId: string, subtaskId: string) => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      await apiRequest(`/api/tasks/${taskId}/subtasks/${subtaskId}`, {\n        method: 'DELETE'\n      });\n      \n      // Remove the subtask from the tasks list\n      setTasks(prev => prev.map(task => {\n        if (task.id === taskId && task.subtasks) {\n          return {\n            ...task,\n            subtasks: task.subtasks.filter(subtask => subtask.id !== subtaskId)\n          };\n        }\n        return task;\n      }));\n      \n      // Update current task if it's the one containing the subtask\n      if (currentTask && currentTask.id === taskId && currentTask.subtasks) {\n        setCurrentTask({\n          ...currentTask,\n          subtasks: currentTask.subtasks.filter(subtask => subtask.id !== subtaskId)\n        });\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete subtask');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load tasks when user changes\n  useEffect(() => {\n    if (user) {\n      fetchTasks();\n    } else {\n      setTasks([]);\n      setCurrentTask(null);\n    }\n  }, [user]);\n\n  return (\n    <TaskContext.Provider value={{\n      tasks,\n      currentTask,\n      loading,\n      error,\n      fetchTasks,\n      fetchTask,\n      createTask,\n      updateTask,\n      deleteTask,\n      generateSubtasks,\n      updateSubtask,\n      deleteSubtask\n    }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n\nexport const useTask = () => {\n  const context = useContext(TaskContext);\n  if (context === undefined) {\n    throw new Error('useTask must be used within a TaskProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}